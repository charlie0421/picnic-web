{"version":3,"names":["cov_1lhfva9zb8","actualCoverage","s","NotificationProvider","f","useNotification","NotificationContext","_react","createContext","undefined","context","useContext","b","Error","children","notifications","setNotifications","useState","addNotification","useCallback","notification","id","Math","random","toString","substr","newNotification","timestamp","Date","prev","duration","setTimeout","filter","n","removeNotification","clearAllNotifications","value","_jsxruntime","jsx","Provider"],"sources":["/Users/cheolhyun/Repositories/picnic-web/contexts/NotificationContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\ninterface NotificationState {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  timestamp: Date;\n}\n\ninterface NotificationContextType {\n  notifications: NotificationState[];\n  addNotification: (notification: Omit<NotificationState, 'id' | 'timestamp'>) => void;\n  removeNotification: (id: string) => void;\n  clearAllNotifications: () => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\nexport function useNotification() {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n}\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport function NotificationProvider({ children }: NotificationProviderProps) {\n  const [notifications, setNotifications] = useState<NotificationState[]>([]);\n\n  const addNotification = useCallback((notification: Omit<NotificationState, 'id' | 'timestamp'>) => {\n    const id = Math.random().toString(36).substr(2, 9);\n    const newNotification: NotificationState = {\n      ...notification,\n      id,\n      timestamp: new Date(),\n    };\n\n    setNotifications(prev => [...prev, newNotification]);\n\n    // 자동 제거 (기본 5초, 또는 지정된 duration)\n    const duration = notification.duration || 5000;\n    if (duration > 0) {\n      setTimeout(() => {\n        setNotifications(prev => prev.filter(n => n.id !== id));\n      }, duration);\n    }\n  }, []);\n\n  const removeNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  }, []);\n\n  const clearAllNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  const value = {\n    notifications,\n    addNotification,\n    removeNotification,\n    clearAllNotifications,\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n} "],"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","ignoreList":[]}