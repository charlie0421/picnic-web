{"version":3,"names":["cov_2fy0r4uhkn","actualCoverage","s","useLocaleRouter","f","router","_navigation","useRouter","pathname","usePathname","currentLanguage","setLanguage","translations","loadTranslations","storeLoadTranslations","t","storeT","_languageStore","useLanguageStore","isValidLocale","locale","_settings","SUPPORTED_LANGUAGES","includes","extractLocaleFromPath","path","segments","split","filter","Boolean","firstSegment","b","slice","join","DEFAULT_LANGUAGE","currentLocale","removeLocaleFromPath","cleanPath","getLocalizedPath","targetLocale","push","href","localizedHref","replace","refresh","changeLocale","preservePath","document","cookie","currentPath","newPath","error","console","key","args","supportedLocales","defaultLocale"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useLocaleRouter.ts"],"sourcesContent":["'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\nimport { useLanguageStore } from '../stores/languageStore';\nimport { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, type Language } from '../config/settings';\n\ninterface LocaleRouterReturn {\n  currentLocale: Language;\n  supportedLocales: readonly Language[];\n  defaultLocale: Language;\n  push: (href: string, locale?: Language) => void;\n  replace: (href: string, locale?: Language) => void;\n  refresh: () => void;\n  changeLocale: (locale: Language, preservePath?: boolean) => void;\n  getLocalizedPath: (path: string, locale?: Language) => string;\n  isValidLocale: (locale: string) => locale is Language;\n  removeLocaleFromPath: (path: string) => string;\n  extractLocaleFromPath: (path: string) => { locale: Language; path: string };\n  loadTranslations: (locale: Language) => Promise<boolean>;\n  t: (key: string, args?: Record<string, string>) => string;\n}\n\n/**\n * Hook for locale-based routing with local translations\n * Î°úÏºÄÏùº Í∏∞Î∞ò ÎùºÏö∞ÌåÖÍ≥º Î°úÏª¨ Î≤àÏó≠ ÏãúÏä§ÌÖúÏùÑ ÏúÑÌïú Hook\n */\nexport function useLocaleRouter(): LocaleRouterReturn {\n  const router = useRouter();\n  const pathname = usePathname();\n  const { currentLanguage, setLanguage, translations, loadTranslations: storeLoadTranslations, t: storeT } = useLanguageStore();\n\n  // Î°úÏºÄÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨\n  const isValidLocale = (locale: string): locale is Language => {\n    return SUPPORTED_LANGUAGES.includes(locale as Language);\n  };\n\n  // ÌòÑÏû¨ Í≤ΩÎ°úÏóêÏÑú Î°úÏºÄÏùº Ï∂îÏ∂ú\n  const extractLocaleFromPath = (path: string): { locale: Language; path: string } => {\n    const segments = path.split('/').filter(Boolean);\n    const firstSegment = segments[0];\n    \n    if (firstSegment && isValidLocale(firstSegment)) {\n      return {\n        locale: firstSegment as Language,\n        path: '/' + segments.slice(1).join('/')\n      };\n    }\n    \n    return {\n      locale: DEFAULT_LANGUAGE,\n      path: path\n    };\n  };\n\n  // ÌòÑÏû¨ Î°úÏºÄÏùº Í∞êÏßÄ\n  const { locale: currentLocale } = extractLocaleFromPath(pathname);\n\n  // Í≤ΩÎ°úÏóêÏÑú Î°úÏºÄÏùº Ï†úÍ±∞\n  const removeLocaleFromPath = (path: string): string => {\n    const { path: cleanPath } = extractLocaleFromPath(path);\n    return cleanPath || '/';\n  };\n\n  // Î°úÏºÄÏùºÌôîÎêú Í≤ΩÎ°ú ÏÉùÏÑ±\n  const getLocalizedPath = (path: string, locale?: Language): string => {\n    const targetLocale = locale || currentLocale;\n    const cleanPath = removeLocaleFromPath(path);\n    \n    // üîß Î™®Îì† Ïñ∏Ïñ¥Ïóê ÎåÄÌï¥ ÏùºÍ¥ÄÎêú prefix Ï†ÅÏö© (ÏòÅÏñ¥ Ìè¨Ìï®)\n    // DEFAULT_LANGUAGE ÌäπÎ≥Ñ Ï≤òÎ¶¨ Ï†úÍ±∞: app/[lang] Íµ¨Ï°∞ÏóêÏÑúÎäî Î™®Îì† Ïñ∏Ïñ¥Í∞Ä prefix ÌïÑÏöî\n    return `/${targetLocale}${cleanPath === '/' ? '' : cleanPath}`;\n  };\n\n  // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ìï®ÏàòÎì§\n  const push = (href: string, locale?: Language) => {\n    const localizedHref = getLocalizedPath(href, locale);\n    router.push(localizedHref);\n  };\n\n  const replace = (href: string, locale?: Language) => {\n    const localizedHref = getLocalizedPath(href, locale);\n    router.replace(localizedHref);\n  };\n\n  const refresh = () => {\n    router.refresh();\n  };\n\n  // Î°úÏºÄÏùº Î≥ÄÍ≤Ω\n  const changeLocale = async (locale: Language, preservePath = true) => {\n    if (!isValidLocale(locale) || locale === currentLocale) {\n      return;\n    }\n\n    // Ïñ∏Ïñ¥ Ïä§ÌÜ†Ïñ¥ ÏóÖÎç∞Ïù¥Ìä∏\n    setLanguage(locale);\n\n    // Ïø†ÌÇ§Ïóê Ïñ∏Ïñ¥ ÏÑ§Ï†ï Ï†ÄÏû•\n    if (typeof document !== 'undefined') {\n      document.cookie = `locale=${locale}; path=/; max-age=${60 * 60 * 24 * 365}; SameSite=Lax`;\n    }\n\n    // Î°úÏª¨ Î≤àÏó≠ Î°úÎìú\n    await loadTranslations(locale);\n\n    // Í≤ΩÎ°ú Î≥ÄÍ≤Ω\n    if (preservePath) {\n      const currentPath = removeLocaleFromPath(pathname);\n      const newPath = getLocalizedPath(currentPath, locale);\n      router.push(newPath);\n    } else {\n      const newPath = getLocalizedPath('/', locale);\n      router.push(newPath);\n    }\n  };\n\n  // Î°úÏª¨ Î≤àÏó≠ Î°úÎìú\n  const loadTranslations = async (locale: Language): Promise<boolean> => {\n    try {\n      // Í∏∞Ï°¥ Ïä§ÌÜ†Ïñ¥Ïùò loadTranslations Ìï®Ïàò ÏÇ¨Ïö© (Î°úÏª¨ JSONÏóêÏÑú Î°úÎìú)\n      await storeLoadTranslations(locale);\n      return true;\n    } catch (error) {\n      console.error(`Failed to load translations for ${locale}:`, error);\n      return false;\n    }\n  };\n\n  // Î≤àÏó≠ Ìï®Ïàò (Ïä§ÌÜ†Ïñ¥Ïùò t Ìï®Ïàò ÏÇ¨Ïö©)\n  const t = (key: string, args?: Record<string, string>): string => {\n    return storeT(key, args);\n  };\n\n  return {\n    currentLocale,\n    supportedLocales: SUPPORTED_LANGUAGES,\n    defaultLocale: DEFAULT_LANGUAGE,\n    push,\n    replace,\n    refresh,\n    changeLocale,\n    getLocalizedPath,\n    isValidLocale,\n    removeLocaleFromPath,\n    extractLocaleFromPath,\n    loadTranslations,\n    t,\n  };\n} "],"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","ignoreList":[]}