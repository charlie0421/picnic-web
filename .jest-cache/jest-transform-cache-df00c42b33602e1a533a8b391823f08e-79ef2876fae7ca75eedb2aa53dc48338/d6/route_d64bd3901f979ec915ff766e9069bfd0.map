{"version":3,"names":["DELETE","cov_2l0dlc55yc","f","s","POST","request","code","accessToken","json","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","clientId","NEXT_PUBLIC_KAKAO_CLIENT_ID","clientSecret","KAKAO_CLIENT_SECRET","b","console","error","_server","NextResponse","status","token","redirectUri","headers","get","includes","tokenResponse","fetch","method","body","URLSearchParams","grant_type","client_id","client_secret","redirect_uri","toString","ok","errorText","text","tokenData","access_token","userInfoResponse","Authorization","userInfo","normalizedProfile","_kakao","normalizeKakaoProfile","email","data","users","userError","admin","listUsers","message","matchedUser","find","u","user","success","profile","existingUser","warn","unlinkResponse","unlinkData","id"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/auth/kakao/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { Database } from '@/types/supabase';\nimport { normalizeKakaoProfile } from '@/lib/supabase/social/kakao';\n\n/**\n * Kakao 토큰 및 사용자 정보 처리 API\n * \n * 이 API는 Kakao OAuth 콜백으로부터 받은 코드를 사용하여\n * 액세스 토큰을 획득하고 사용자 정보를 가져오는 역할을 합니다.\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const { code, accessToken } = await request.json();\n    \n    // 서버 측 Supabase 클라이언트 생성\n    const supabase = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!, // 서비스 롤 키 사용 (주의: 서버 측에서만 사용)\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false,\n        }\n      }\n    );\n    \n    // Kakao API 설정\n    const clientId = process.env.NEXT_PUBLIC_KAKAO_CLIENT_ID;\n    const clientSecret = process.env.KAKAO_CLIENT_SECRET;\n    \n    if (!clientId) {\n      console.error('Kakao 클라이언트 ID가 설정되지 않았습니다.');\n      return NextResponse.json(\n        { error: 'Kakao 클라이언트 ID가 설정되지 않았습니다.' },\n        { status: 500 }\n      );\n    }\n    \n    let token = accessToken;\n    \n    // 코드가 있으면 액세스 토큰으로 교환\n    if (code && !token) {\n      const redirectUri = request.headers.get('referer')?.includes('callback')\n        ? `${request.headers.get('origin')}/auth/callback/kakao`\n        : `${request.headers.get('origin')}/api/auth/kakao`;\n      \n      const tokenResponse = await fetch('https://kauth.kakao.com/oauth/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          grant_type: 'authorization_code',\n          client_id: clientId,\n          ...(clientSecret && { client_secret: clientSecret }),\n          redirect_uri: redirectUri || '',\n          code\n        }).toString()\n      });\n      \n      if (!tokenResponse.ok) {\n        const errorText = await tokenResponse.text();\n        console.error('액세스 토큰 요청 실패:', errorText);\n        return NextResponse.json(\n          { error: '액세스 토큰 요청 실패' },\n          { status: 502 }\n        );\n      }\n      \n      const tokenData = await tokenResponse.json();\n      token = tokenData.access_token;\n      \n      if (!token) {\n        console.error('Kakao 액세스 토큰을 획득하지 못했습니다.');\n        return NextResponse.json(\n          { error: 'Kakao 액세스 토큰을 획득하지 못했습니다.' },\n          { status: 502 }\n        );\n      }\n    }\n    \n    if (!token) {\n      return NextResponse.json(\n        { error: 'Kakao 액세스 토큰이 필요합니다.' },\n        { status: 400 }\n      );\n    }\n    \n    // 사용자 정보 요청\n    const userInfoResponse = await fetch('https://kapi.kakao.com/v2/user/me', {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'\n      }\n    });\n    \n    if (!userInfoResponse.ok) {\n      const errorText = await userInfoResponse.text();\n      console.error('Kakao 사용자 정보 요청 실패:', errorText);\n      return NextResponse.json(\n        { error: 'Kakao 사용자 정보 요청 실패' },\n        { status: 502 }\n      );\n    }\n    \n    const userInfo = await userInfoResponse.json();\n    \n    // 프로필 정보 정규화\n    const normalizedProfile = normalizeKakaoProfile(userInfo);\n    \n    // Supabase에 사용자가 이미 존재하는지 확인\n    if (normalizedProfile.email) {\n      try {\n        // listUsers에서 filter 옵션이 지원되지 않으므로 결과에서 직접 필터링\n        const { data: users, error: userError } = await supabase.auth.admin.listUsers();\n        \n        if (userError) {\n          console.error('Supabase 사용자 조회 실패:', userError.message);\n          return NextResponse.json(\n            { error: 'Supabase 사용자 조회 실패' },\n            { status: 500 }\n          );\n        }\n        \n        // 이메일로 필터링하여 일치하는 사용자 찾기\n        const matchedUser = users?.users.find(u => u.email === normalizedProfile.email);\n        const user = matchedUser ? { user: matchedUser } : null;\n        \n        if (user?.user) {\n          // 사용자가 존재하면 반환\n          return NextResponse.json({\n            success: true,\n            profile: normalizedProfile,\n            existingUser: true\n          });\n        }\n      } catch (error: any) {\n        // 오류가 발생해도 계속 진행 (새 사용자 생성 시도)\n        console.warn('Supabase 사용자 조회 오류 (계속 진행):', error);\n      }\n    }\n    \n    // 새 사용자 정보 반환\n    return NextResponse.json({\n      success: true,\n      profile: normalizedProfile,\n      existingUser: false\n    });\n  } catch (error) {\n    console.error('Kakao 인증 처리 중 오류:', error);\n    return NextResponse.json(\n      { error: '서버 오류가 발생했습니다.' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Kakao 연결 해제 처리\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    const { accessToken } = await request.json();\n    \n    if (!accessToken) {\n      return NextResponse.json(\n        { error: 'Kakao 액세스 토큰이 필요합니다.' },\n        { status: 400 }\n      );\n    }\n    \n    // Kakao 연결 해제 요청\n    const unlinkResponse = await fetch('https://kapi.kakao.com/v1/user/unlink', {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n    \n    if (!unlinkResponse.ok) {\n      const errorText = await unlinkResponse.text();\n      console.error('Kakao 연결 해제 요청 실패:', errorText);\n      return NextResponse.json(\n        { error: 'Kakao 연결 해제 요청 실패' },\n        { status: 502 }\n      );\n    }\n    \n    const unlinkData = await unlinkResponse.json();\n    \n    return NextResponse.json({\n      success: true,\n      id: unlinkData.id\n    });\n  } catch (error) {\n    console.error('Kakao 연결 해제 처리 중 오류:', error);\n    return NextResponse.json(\n      { error: '서버 오류가 발생했습니다.' },\n      { status: 500 }\n    );\n  }\n}"],"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","ignoreList":[]}