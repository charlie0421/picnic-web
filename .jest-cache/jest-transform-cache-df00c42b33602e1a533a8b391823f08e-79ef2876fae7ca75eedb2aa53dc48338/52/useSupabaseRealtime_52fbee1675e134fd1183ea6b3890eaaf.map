{"version":3,"names":["cov_1iy731elg7","actualCoverage","s","useRealtimeData","f","useSupabaseSubscription","options","supabase","_client","createBrowserSupabaseClient","isConnected","setIsConnected","_react","useState","error","setError","channelRef","useRef","table","event","b","filter","onChange","cleanup","useCallback","current","unsubscribe","useEffect","setupSubscription","channelId","events","Array","isArray","filterOptions","undefined","subscription","channel","on","map","e","schema","payload","new","_transforms","clientTransformers","transform","old","subscribe","status","Error","err","_error","handleError","query","data","setData","isLoading","setIsLoading","loadData","responseData","responseError","handleDataChange","eventType","prev","idField","item","refresh"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useSupabaseRealtime.ts"],"sourcesContent":["\"use client\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { createBrowserSupabaseClient } from '@/lib/supabase/client';\nimport { clientTransformers } from '@/lib/supabase/transforms';\nimport { handleError } from \"@/lib/supabase/error\";\nimport type {\n  RealtimeChannel,\n  RealtimePostgresChangesPayload,\n} from \"@supabase/supabase-js\";\n\n/**\n * 구독 이벤트 타입\n */\nexport type SubscriptionEvent = \"INSERT\" | \"UPDATE\" | \"DELETE\" | \"*\";\n\n/**\n * 구독 설정 옵션\n */\nexport type SubscriptionOptions<T extends Record<string, any>> = {\n  /**\n   * 테이블 이름 (예: 'votes')\n   */\n  table: string;\n\n  /**\n   * 구독할 이벤트 타입(들)\n   * @default '*'\n   */\n  event?: SubscriptionEvent | SubscriptionEvent[];\n\n  /**\n   * 필터 조건 (예: 'vote_id=eq.123')\n   */\n  filter?: string;\n\n  /**\n   * 데이터 변경 시 호출될 콜백 함수\n   */\n  onChange?: (payload: RealtimePostgresChangesPayload<T>) => void;\n};\n\n/**\n * Supabase Realtime API를 사용하여 데이터 변경을 구독하는 커스텀 훅\n *\n * @example\n * ```tsx\n * // 투표 항목 변경 구독\n * useSupabaseSubscription({\n *   table: 'vote_item',\n *   event: 'UPDATE',\n *   filter: `vote_id=eq.${voteId}`,\n *   onChange: (payload) => {\n *     // 변경된 데이터 처리\n *     console.log('투표 항목 업데이트:', payload);\n *   }\n * });\n * ```\n *\n * @param options 구독 설정 옵션\n */\nexport function useSupabaseSubscription<T extends Record<string, any>>(\n  options: SubscriptionOptions<T>,\n) {\n  const supabase = createBrowserSupabaseClient();\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const channelRef = useRef<RealtimeChannel | null>(null);\n\n  const { table, event = \"*\", filter, onChange } = options;\n\n  const cleanup = useCallback(() => {\n    if (channelRef.current) {\n      channelRef.current.unsubscribe();\n      channelRef.current = null;\n      setIsConnected(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    const setupSubscription = async () => {\n      // 이전 구독 정리\n      cleanup();\n\n      try {\n        // 채널 ID 생성\n        const channelId = `${table}${filter ? `:${filter}` : \"\"}`;\n\n        // 이벤트 설정\n        const events = Array.isArray(event) ? event : [event];\n\n        // 필터 설정\n        const filterOptions = filter ? { filter } : undefined;\n\n        // 구독 채널 생성\n        const subscription = supabase\n          .channel(channelId)\n          .on(\n            \"postgres_changes\" as any,\n            events.map((e) => ({\n              event: e,\n              schema: \"public\",\n              table,\n              ...(filterOptions || {}),\n            })),\n            (payload: RealtimePostgresChangesPayload<any>) => {\n              // 페이로드 데이터를 카멜 케이스로 변환\n              if (payload.new) {\n                payload.new = clientTransformers.transform(payload.new);\n              }\n              if (payload.old) {\n                payload.old = clientTransformers.transform(payload.old);\n              }\n\n              // 콜백 호출\n              onChange?.(payload as RealtimePostgresChangesPayload<T>);\n            },\n          )\n          .subscribe((status) => {\n            if (status === \"SUBSCRIBED\") {\n              setIsConnected(true);\n              setError(null);\n            } else if (status === \"CHANNEL_ERROR\") {\n              setIsConnected(false);\n              setError(new Error(\"실시간 구독 오류가 발생했습니다\"));\n            }\n          });\n\n        // 생성된 채널 저장\n        channelRef.current = subscription;\n      } catch (err) {\n        setIsConnected(false);\n        setError(handleError(err));\n      }\n    };\n\n    setupSubscription();\n\n    // 컴포넌트 언마운트 시 구독 정리\n    return cleanup;\n  }, [supabase, table, event, filter, onChange, cleanup]);\n\n  return {\n    isConnected,\n    error,\n    /**\n     * 구독 해제 함수\n     */\n    unsubscribe: cleanup,\n  };\n}\n\n/**\n * 간단한 Realtime 구독을 제공하는 커스텀 훅\n *\n * 이 훅은 데이터를 자동으로 가져오고 실시간 업데이트도 구독합니다.\n *\n * @example\n * ```tsx\n * const { data, isLoading, error } = useRealtimeData({\n *   table: 'votes',\n *   query: (supabase) => supabase\n *     .from('votes')\n *     .select('*')\n *     .eq('id', voteId)\n *     .single(),\n *   subscription: {\n *     event: 'UPDATE',\n *     filter: `id=eq.${voteId}`\n *   }\n * });\n * ```\n */\nexport function useRealtimeData<T extends Record<string, any>>({\n  table,\n  query,\n  subscription,\n}: {\n  /**\n   * 테이블 이름\n   */\n  table: string;\n\n  /**\n   * 초기 데이터를 가져오는 쿼리 함수\n   */\n  query: (supabase: ReturnType<typeof createBrowserSupabaseClient>) => Promise<{\n    data: any;\n    error: any;\n  }>;\n\n  /**\n   * 구독 설정 (선택적)\n   */\n  subscription?: {\n    event?: SubscriptionEvent | SubscriptionEvent[];\n    filter?: string;\n  };\n}) {\n  const supabase = createBrowserSupabaseClient();\n  const [data, setData] = useState<T | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  // 데이터 로드 함수\n  const loadData = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const { data: responseData, error: responseError } = await query(\n        supabase,\n      );\n\n      if (responseError) {\n        setError(handleError(responseError));\n        setData(null);\n      } else {\n        setData(clientTransformers.transform(responseData) as T);\n        setError(null);\n      }\n    } catch (err) {\n      setError(handleError(err));\n      setData(null);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [supabase, query]);\n\n  // 데이터 변경 핸들러\n  const handleDataChange = useCallback(\n    (payload: RealtimePostgresChangesPayload<T>) => {\n      // 변경 타입에 따른 처리\n      switch (payload.eventType) {\n        case \"INSERT\":\n          loadData(); // 새 데이터 삽입 시 전체 다시 로드\n          break;\n\n        case \"UPDATE\":\n          // 단일 항목 업데이트인 경우 직접 상태 업데이트\n          if (payload.new && typeof data === \"object\" && data !== null) {\n            setData((prev) => {\n              if (Array.isArray(prev)) {\n                // 배열인 경우, ID로 항목 찾아 업데이트\n                const idField = \"id\" in payload.new\n                  ? \"id\"\n                  : \"ID\" in payload.new\n                  ? \"ID\"\n                  : null;\n\n                if (idField && idField in payload.new) {\n                  return prev.map((item) =>\n                    (item as any)[idField] === (payload.new as any)[idField]\n                      ? { ...item, ...payload.new }\n                      : item\n                  ) as unknown as T;\n                }\n              }\n\n              // 단일 객체나 ID를 찾을 수 없는 경우 전체 교체\n              return Array.isArray(prev)\n                ? prev\n                : { ...prev, ...payload.new } as T;\n            });\n          } else {\n            // 복잡한 데이터 구조인 경우 다시 로드\n            loadData();\n          }\n          break;\n\n        case \"DELETE\":\n          // 삭제 시 다시 로드\n          loadData();\n          break;\n      }\n    },\n    [data, loadData],\n  );\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    loadData();\n  }, [loadData]);\n\n  // 실시간 구독 설정 (선택적)\n  useSupabaseSubscription({\n    table,\n    event: subscription?.event || \"UPDATE\",\n    filter: subscription?.filter,\n    onChange: handleDataChange,\n  });\n\n  return {\n    data,\n    isLoading,\n    error,\n    /**\n     * 수동으로 데이터를 다시 로드하는 함수\n     */\n    refresh: loadData,\n  };\n}\n"],"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","ignoreList":[]}