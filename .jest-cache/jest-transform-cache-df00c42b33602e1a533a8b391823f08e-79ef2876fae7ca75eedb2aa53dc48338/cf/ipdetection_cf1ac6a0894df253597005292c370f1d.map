{"version":3,"names":["clearLocationCache","cov_8m2dxb2y2","f","s","detectUserLocation","getCurrencyByPaymentMethod","getPaymentMethodByLocation","cachedLocation","detectLocationFromBrowser","language","b","navigator","userLanguage","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","isKoreanLanguage","startsWith","isKoreaTimezone","isKorea","country","countryCode","ip","source","error","console","warn","tryIpServiceOptional","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","method","headers","signal","clearTimeout","ok","data","json","country_code","country_name","browserResult","then","ipResult","log","catch","location","paymentMethod"],"sources":["/Users/cheolhyun/Repositories/picnic-web/utils/ip-detection.ts"],"sourcesContent":["interface LocationInfo {\n  country: string;\n  countryCode: string;\n  isKorea: boolean;\n  ip: string;\n  source: 'browser' | 'ip-service';\n}\n\n// Cache location info for the session\nlet cachedLocation: LocationInfo | null = null;\n\n/**\n * Primary method: Detect location based on browser language and timezone\n * This is more reliable and doesn't require external API calls\n */\nfunction detectLocationFromBrowser(): LocationInfo {\n  try {\n    const language = navigator.language || (navigator as any).userLanguage;\n    const timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n    \n    // Korean language or Korea timezone\n    const isKoreanLanguage = language.startsWith('ko');\n    const isKoreaTimezone = timezone === 'Asia/Seoul';\n    const isKorea = isKoreanLanguage || isKoreaTimezone;\n\n    return {\n      country: isKorea ? 'South Korea' : 'Unknown',\n      countryCode: isKorea ? 'KR' : 'XX',\n      isKorea,\n      ip: 'unknown',\n      source: 'browser'\n    };\n  } catch (error) {\n    console.warn('Browser detection failed, defaulting to international:', error);\n    // Safe fallback: assume international user\n    return {\n      country: 'Unknown',\n      countryCode: 'XX',\n      isKorea: false,\n      ip: 'unknown',\n      source: 'browser'\n    };\n  }\n}\n\n/**\n * Optional: Try to get more precise location from IP service (only if needed)\n * This is completely optional and won't block the main functionality\n */\nasync function tryIpServiceOptional(): Promise<LocationInfo | null> {\n  try {\n    // Only try one reliable service with timeout\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n\n    const response = await fetch('https://ipapi.co/json/', {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      },\n      signal: controller.signal\n    });\n\n    clearTimeout(timeoutId);\n\n    if (!response.ok) {\n      return null; // Silently fail\n    }\n\n    const data = await response.json();\n\n    if (data.country_code) {\n      return {\n        country: data.country_name || 'Unknown',\n        countryCode: data.country_code,\n        isKorea: data.country_code === 'KR',\n        ip: data.ip || 'unknown',\n        source: 'ip-service'\n      };\n    }\n\n    return null;\n  } catch (error) {\n    // Silently fail - this is optional\n    return null;\n  }\n}\n\n/**\n * Detects user's location with browser-first approach\n * Browser detection is primary, IP service is optional enhancement\n */\nexport async function detectUserLocation(): Promise<LocationInfo> {\n  // Return cached location if available\n  if (cachedLocation) {\n    return cachedLocation;\n  }\n\n  // Primary method: Browser-based detection (always works)\n  const browserResult = detectLocationFromBrowser();\n  cachedLocation = browserResult;\n\n  // Optional enhancement: Try to get more precise location from IP service\n  // This runs in the background and doesn't block the main functionality\n  if (browserResult.source === 'browser') {\n    tryIpServiceOptional().then(ipResult => {\n      if (ipResult) {\n        // Update cache with more precise location if available\n        cachedLocation = ipResult;\n        console.log('Enhanced location with IP service:', ipResult);\n      }\n    }).catch(() => {\n      // Silently ignore IP service failures\n    });\n  }\n\n  console.log('Location detected:', browserResult);\n  return browserResult;\n}\n\n/**\n * Clears the cached location info\n */\nexport function clearLocationCache() {\n  cachedLocation = null;\n}\n\n/**\n * Determines the payment method based on location\n */\nexport function getPaymentMethodByLocation(location: LocationInfo | null): 'portone' | 'paypal' {\n  // Default to PayPal for international users or if location detection fails\n  if (!location) {\n    return 'paypal';\n  }\n\n  // Use Port One for Korean users\n  return location.isKorea ? 'portone' : 'paypal';\n}\n\n/**\n * Gets the currency based on payment method\n */\nexport function getCurrencyByPaymentMethod(paymentMethod: 'portone' | 'paypal'): 'KRW' | 'USD' {\n  return paymentMethod === 'portone' ? 'KRW' : 'USD';\n}"],"mappingsgBA,kBAAkB,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAlBH,kBAAA;;EA/BMI,kBAAkB,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAlBC,kBAAA;;EAmDNC,0BAA0B,WAAAA,CAAA;IAAA;IAAAJ,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAA1BE,0BAAA;;EAbAC,0BAA0B,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAA1BG,0BAAA;;;AA1HhB;AACA,IAAIC,cAAA;AAAA;AAAA,CAAAN,aAAA,GAAAE,CAAA,OAAsC;AAE1C;;;;AAIA,SAASK,0BAAA;EAAA;EAAAP,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACP,IAAI;IACF,MAAMM,QAAA;IAAA;IAAA,CAAAR,aAAA,GAAAE,CAAA;IAAW;IAAA,CAAAF,aAAA,GAAAS,CAAA,UAAAC,SAAA,CAAUF,QAAQ;IAAA;IAAA,CAAAR,aAAA,GAAAS,CAAA,UAAIC,SAAC,CAAkBC,YAAY;IACtE,MAAMC,QAAA;IAAA;IAAA,CAAAZ,aAAA,GAAAE,CAAA,QAAWW,IAAA,CAAKC,cAAc,GAAGC,eAAe,GAAGC,QAAQ;IAEjE;IACA,MAAMC,gBAAA;IAAA;IAAA,CAAAjB,aAAA,GAAAE,CAAA,QAAmBM,QAAA,CAASU,UAAU,CAAC;IAC7C,MAAMC,eAAA;IAAA;IAAA,CAAAnB,aAAA,GAAAE,CAAA,QAAkBU,QAAA,KAAa;IACrC,MAAMQ,OAAA;IAAA;IAAA,CAAApB,aAAA,GAAAE,CAAA;IAAU;IAAA,CAAAF,aAAA,GAAAS,CAAA,UAAAQ,gBAAA;IAAA;IAAA,CAAAjB,aAAA,GAAAS,CAAA,UAAoBU,eAAA;IAAA;IAAAnB,aAAA,GAAAE,CAAA;IAEpC,OAAO;MACLmB,OAAA,EAASD,OAAA;MAAA;MAAA,CAAApB,aAAA,GAAAS,CAAA,UAAU;MAAA;MAAA,CAAAT,aAAA,GAAAS,CAAA,UAAgB;MACnCa,WAAA,EAAaF,OAAA;MAAA;MAAA,CAAApB,aAAA,GAAAS,CAAA,UAAU;MAAA;MAAA,CAAAT,aAAA,GAAAS,CAAA,UAAO;MAC9BW,OAAA;MACAG,EAAA,EAAI;MACJC,MAAA,EAAQ;IACV;EACF,EAAE,OAAOC,KAAA,EAAO;IAAA;IAAAzB,aAAA,GAAAE,CAAA;IACdwB,OAAA,CAAQC,IAAI,CAAC,0DAA0DF,KAAA;IACvE;IAAA;IAAAzB,aAAA,GAAAE,CAAA;IACA,OAAO;MACLmB,OAAA,EAAS;MACTC,WAAA,EAAa;MACbF,OAAA,EAAS;MACTG,EAAA,EAAI;MACJC,MAAA,EAAQ;IACV;EACF;AACF;AAEA;;;;AAIA,eAAeI,qBAAA;EAAA;EAAA5B,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACb,IAAI;IACF;IACA,MAAM2B,UAAA;IAAA;IAAA,CAAA7B,aAAA,GAAAE,CAAA,QAAa,IAAI4B,eAAA;IACvB,MAAMC,SAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAE,CAAA,QAAY8B,UAAA,CAAW,MAAM;MAAA;MAAAhC,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAAA,OAAA2B,UAAA,CAAWI,KAAK;IAAA,GAAI,QAAO;IAE9D,MAAMC,QAAA;IAAA;IAAA,CAAAlC,aAAA,GAAAE,CAAA,QAAW,MAAMiC,KAAA,CAAM,0BAA0B;MACrDC,MAAA,EAAQ;MACRC,OAAA,EAAS;QACP,UAAU;MACZ;MACAC,MAAA,EAAQT,UAAA,CAAWS;IACrB;IAAA;IAAAtC,aAAA,GAAAE,CAAA;IAEAqC,YAAA,CAAaR,SAAA;IAAA;IAAA/B,aAAA,GAAAE,CAAA;IAEb,IAAI,CAACgC,QAAA,CAASM,EAAE,EAAE;MAAA;MAAAxC,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MAChB,OAAO,MAAM;IACf;IAAA;IAAA;MAAAF,aAAA,GAAAS,CAAA;IAAA;IAEA,MAAMgC,IAAA;IAAA;IAAA,CAAAzC,aAAA,GAAAE,CAAA,QAAO,MAAMgC,QAAA,CAASQ,IAAI;IAAA;IAAA1C,aAAA,GAAAE,CAAA;IAEhC,IAAIuC,IAAA,CAAKE,YAAY,EAAE;MAAA;MAAA3C,aAAA,GAAAS,CAAA;MAAAT,aAAA,GAAAE,CAAA;MACrB,OAAO;QACLmB,OAAA;QAAS;QAAA,CAAArB,aAAA,GAAAS,CAAA,UAAAgC,IAAA,CAAKG,YAAY;QAAA;QAAA,CAAA5C,aAAA,GAAAS,CAAA,UAAI;QAC9Ba,WAAA,EAAamB,IAAA,CAAKE,YAAY;QAC9BvB,OAAA,EAASqB,IAAA,CAAKE,YAAY,KAAK;QAC/BpB,EAAA;QAAI;QAAA,CAAAvB,aAAA,GAAAS,CAAA,UAAAgC,IAAA,CAAKlB,EAAE;QAAA;QAAA,CAAAvB,aAAA,GAAAS,CAAA,UAAI;QACfe,MAAA,EAAQ;MACV;IACF;IAAA;IAAA;MAAAxB,aAAA,GAAAS,CAAA;IAAA;IAAAT,aAAA,GAAAE,CAAA;IAEA,OAAO;EACT,EAAE,OAAOuB,KAAA,EAAO;IAAA;IAAAzB,aAAA,GAAAE,CAAA;IACd;IACA,OAAO;EACT;AACF;AAMO,eAAeC,mBAAA;EAAA;EAAAH,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACpB;EACA,IAAII,cAAA,EAAgB;IAAA;IAAAN,aAAA,GAAAS,CAAA;IAAAT,aAAA,GAAAE,CAAA;IAClB,OAAOI,cAAA;EACT;EAAA;EAAA;IAAAN,aAAA,GAAAS,CAAA;EAAA;EAEA;EACA,MAAMoC,aAAA;EAAA;EAAA,CAAA7C,aAAA,GAAAE,CAAA,QAAgBK,yBAAA;EAAA;EAAAP,aAAA,GAAAE,CAAA;EACtBI,cAAA,GAAiBuC,aAAA;EAEjB;EACA;EAAA;EAAA7C,aAAA,GAAAE,CAAA;EACA,IAAI2C,aAAA,CAAcrB,MAAM,KAAK,WAAW;IAAA;IAAAxB,aAAA,GAAAS,CAAA;IAAAT,aAAA,GAAAE,CAAA;IACtC0B,oBAAA,GAAuBkB,IAAI,CAACC,QAAA;MAAA;MAAA/C,aAAA,GAAAC,CAAA;MAAAD,aAAA,GAAAE,CAAA;MAC1B,IAAI6C,QAAA,EAAU;QAAA;QAAA/C,aAAA,GAAAS,CAAA;QAAAT,aAAA,GAAAE,CAAA;QACZ;QACAI,cAAA,GAAiByC,QAAA;QAAA;QAAA/C,aAAA,GAAAE,CAAA;QACjBwB,OAAA,CAAQsB,GAAG,CAAC,sCAAsCD,QAAA;MACpD;MAAA;MAAA;QAAA/C,aAAA,GAAAS,CAAA;MAAA;IACF,GAAGwC,KAAK,CAAC;MAAA;MAAAjD,aAAA,GAAAC,CAAA;IAET,EADE;IACF;EACF;EAAA;EAAA;IAAAD,aAAA,GAAAS,CAAA;EAAA;EAAAT,aAAA,GAAAE,CAAA;EAEAwB,OAAA,CAAQsB,GAAG,CAAC,sBAAsBH,aAAA;EAAA;EAAA7C,aAAA,GAAAE,CAAA;EAClC,OAAO2C,aAAA;AACT;AAKO,SAAS9C,mBAAA;EAAA;EAAAC,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACdI,cAAA,GAAiB;AACnB;AAKO,SAASD,2BAA2B6C,QAA6B;EAAA;EAAAlD,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACtE;EACA,IAAI,CAACgD,QAAA,EAAU;IAAA;IAAAlD,aAAA,GAAAS,CAAA;IAAAT,aAAA,GAAAE,CAAA;IACb,OAAO;EACT;EAAA;EAAA;IAAAF,aAAA,GAAAS,CAAA;EAAA;EAEA;EAAAT,aAAA,GAAAE,CAAA;EACA,OAAOgD,QAAA,CAAS9B,OAAO;EAAA;EAAA,CAAApB,aAAA,GAAAS,CAAA,WAAG;EAAA;EAAA,CAAAT,aAAA,GAAAS,CAAA,WAAY;AACxC;AAKO,SAASL,2BAA2B+C,aAAmC;EAAA;EAAAnD,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EAC5E,OAAOiD,aAAA,KAAkB;EAAA;EAAA,CAAAnD,aAAA,GAAAS,CAAA,WAAY;EAAA;EAAA,CAAAT,aAAA,GAAAS,CAAA,WAAQ;AAC/C","ignoreList":[]}