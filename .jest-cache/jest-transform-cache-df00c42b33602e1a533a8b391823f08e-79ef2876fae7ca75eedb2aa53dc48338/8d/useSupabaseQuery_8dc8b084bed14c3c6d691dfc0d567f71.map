{"version":3,"names":["cov_1hqvcm5e3r","actualCoverage","s","useSupabaseMutation","f","useSupabaseQuery","queryFn","options","supabase","_client","createBrowserSupabaseClient","state","setState","_react","useState","isLoading","isSuccess","isError","error","data","execute","useCallback","prev","b","appError","_error","handleError","refetch","mutationFn","result","success"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useSupabaseQuery.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { createBrowserSupabaseClient } from '@/lib/supabase/client';\nimport { handleError, AppError } from '@/lib/supabase/error';\nimport { PostgrestError } from '@supabase/supabase-js';\n\n/**\n * 데이터 로딩 상태를 관리하는 타입\n */\nexport type QueryState<T> = {\n  /**\n   * 로딩 중 여부\n   */\n  isLoading: boolean;\n  \n  /**\n   * 데이터 로딩 성공 여부\n   */\n  isSuccess: boolean;\n  \n  /**\n   * 오류 발생 여부\n   */\n  isError: boolean;\n  \n  /**\n   * 에러 객체\n   */\n  error: AppError | null;\n  \n  /**\n   * 응답 데이터\n   */\n  data: T | null;\n};\n\ninterface UseSupabaseQueryOptions {\n  queryKey: string;\n  enabled?: boolean;\n  refetchOnMount?: boolean;\n  staleTime?: number;\n}\n\ninterface UseSupabaseQueryResult<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: AppError | null;\n  refetch: () => void;\n  execute: () => Promise<void>;\n}\n\nexport function useSupabaseQuery<T>(\n  queryFn: (supabase: ReturnType<typeof createBrowserSupabaseClient>) => Promise<{ data: T | null; error: any }>,\n  options: UseSupabaseQueryOptions\n): UseSupabaseQueryResult<T> {\n  const supabase = createBrowserSupabaseClient();\n  const [state, setState] = useState<QueryState<T>>({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null,\n    data: null,\n  });\n\n  /**\n   * 쿼리 실행 함수\n   */\n  const execute = useCallback(async () => {\n    setState(prev => ({ ...prev, isLoading: true, isError: false, error: null }));\n    \n    try {\n      const { data, error } = await queryFn(supabase);\n      \n      if (error) {\n        const appError = handleError(error);\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: appError,\n          data: null,\n        });\n      } else {\n        // 데이터를 그대로 사용\n        setState({\n          isLoading: false,\n          isSuccess: true,\n          isError: false,\n          error: null,\n          data: data,\n        });\n      }\n    } catch (error) {\n      const appError = handleError(error);\n      setState({\n        isLoading: false,\n        isSuccess: false,\n        isError: true,\n        error: appError,\n        data: null,\n      });\n    }\n  }, [supabase, queryFn]);\n\n  return {\n    ...state,\n    execute,\n    refetch: execute,\n  };\n}\n\n/**\n * 변경(삽입, 업데이트, 삭제) 쿼리를 위한 확장 커스텀 훅\n * \n * @example\n * ```tsx\n * const { \n *   isLoading, \n *   isError, \n *   error, \n *   execute \n * } = useSupabaseMutation(\n *   (supabase, data) => supabase\n *     .from('votes')\n *     .insert(data)\n * );\n * \n * // 뮤테이션 실행\n * const handleSubmit = async (formData) => {\n *   await execute(formData);\n * };\n * ```\n * \n * @param mutationFn Supabase 변경 쿼리 함수\n * @returns 뮤테이션 상태와 실행 함수\n */\nexport function useSupabaseMutation<T, R = any>(\n  mutationFn: (\n    supabase: ReturnType<typeof createBrowserSupabaseClient>,\n    data: T\n  ) => Promise<{\n    data: any;\n    error: PostgrestError | null;\n  }>\n) {\n  const supabase = createBrowserSupabaseClient();\n  const [state, setState] = useState<QueryState<R>>({\n    isLoading: false,\n    isSuccess: false,\n    isError: false,\n    error: null,\n    data: null,\n  });\n\n  /**\n   * 뮤테이션 실행 함수\n   */\n  const execute = useCallback(\n    async (data: T) => {\n      setState(prev => ({ ...prev, isLoading: true, isError: false, error: null }));\n      \n      try {\n        const result = await mutationFn(supabase, data);\n        \n        if (result.error) {\n          const appError = handleError(result.error);\n          setState({\n            isLoading: false,\n            isSuccess: false,\n            isError: true,\n            error: appError,\n            data: null,\n          });\n          return { success: false, error: appError };\n        } else {\n          // 데이터를 그대로 사용\n          setState({\n            isLoading: false,\n            isSuccess: true,\n            isError: false,\n            error: null,\n            data: result.data,\n          });\n          return { success: true, data: result.data };\n        }\n      } catch (error) {\n        const appError = handleError(error);\n        setState({\n          isLoading: false,\n          isSuccess: false,\n          isError: true,\n          error: appError,\n          data: null,\n        });\n        return { success: false, error: appError };\n      }\n    },\n    [supabase, mutationFn]\n  );\n\n  return {\n    ...state,\n    execute,\n  };\n} "],"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","ignoreList":[]}