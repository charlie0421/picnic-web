{"version":3,"names":["cov_1aczul9jis","actualCoverage","s","SafeAvatar","f","SimpleAvatar","sizeClasses","sm","md","lg","xl","src","alt","b","size","fallbackUrl","className","useProxy","onImageLoad","onImageError","isLoading","setIsLoading","_react","useState","hasError","setHasError","safeImageUrl","_imageutils","getSafeAvatarUrl","shouldUseFallback","isFailedImageUrl","finalImageUrl","handleImageLoad","useCallback","handleImageError","createImageErrorHandler","handleError","event","originalSrc","currentTarget","baseClasses","trim","hasCustomSize","includes","loadingClasses","replace","_jsxruntime","jsxs","jsx","fill","viewBox","d","onLoad","onError","loading","process","env","NODE_ENV","Fragment","title"],"sources":["/Users/cheolhyun/Repositories/picnic-web/components/ui/SafeAvatar.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport { getSafeAvatarUrl, createImageErrorHandler, isFailedImageUrl } from '@/utils/image-utils';\n\ninterface SafeAvatarProps {\n  src?: string | null;\n  alt?: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  fallbackUrl?: string;\n  className?: string;\n  useProxy?: boolean; // 프록시 사용 옵션\n  onImageLoad?: () => void;\n  onImageError?: (originalSrc: string) => void;\n}\n\nconst sizeClasses = {\n  sm: 'w-8 h-8',\n  md: 'w-12 h-12', \n  lg: 'w-16 h-16',\n  xl: 'w-24 h-24'\n};\n\n/**\n * 안전한 아바타 이미지 컴포넌트\n * - 이미지 로딩 실패 시 자동 폴백\n * - URL 검증\n * - 로딩 상태 표시\n * - Google 이미지 429 에러 대응 (프록시 포함)\n */\nexport function SafeAvatar({\n  src,\n  alt = '프로필 이미지',\n  size = 'md',\n  fallbackUrl = '/images/default-avatar.png',\n  className = '',\n  useProxy = true, // 기본적으로 프록시 사용\n  onImageLoad,\n  onImageError\n}: SafeAvatarProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasError, setHasError] = useState(false);\n  \n  // 안전한 이미지 URL 가져오기 (Google 이미지 최적화 및 프록시 포함)\n  const safeImageUrl = getSafeAvatarUrl(src, fallbackUrl, useProxy);\n  \n  // 이전에 실패한 URL인지 확인하여 즉시 폴백 사용\n  const shouldUseFallback = src && isFailedImageUrl(src);\n  const finalImageUrl = shouldUseFallback ? fallbackUrl : safeImageUrl;\n  \n  // 이미지 로딩 완료 핸들러\n  const handleImageLoad = useCallback(() => {\n    setIsLoading(false);\n    setHasError(false);\n    onImageLoad?.();\n  }, [onImageLoad]);\n  \n  // 이미지 에러 핸들러 (프록시 옵션 포함)\n  const handleImageError = useCallback(\n    createImageErrorHandler(fallbackUrl, useProxy),\n    [fallbackUrl, useProxy]\n  );\n  \n  // 커스텀 에러 핸들러\n  const handleError = useCallback((event: React.SyntheticEvent<HTMLImageElement, Event>) => {\n    const originalSrc = event.currentTarget.src;\n    setIsLoading(false);\n    setHasError(true);\n    \n    // 기본 에러 핸들러 실행\n    handleImageError(event);\n    \n    // 커스텀 에러 콜백 실행\n    onImageError?.(originalSrc);\n  }, [handleImageError, onImageError]);\n\n  const baseClasses = `\n    rounded-full object-cover bg-gray-200 \n    ${sizeClasses[size]} \n    ${className}\n  `.trim();\n\n  // className에 크기 덮어쓰기가 있는지 확인\n  const hasCustomSize = className.includes('!w-full') && className.includes('!h-full');\n  \n  // 로딩 플레이스홀더용 클래스 (크기 덮어쓰기 반영)\n  const loadingClasses = hasCustomSize \n    ? `rounded-full object-cover bg-gray-200 !w-full !h-full ${className.replace(sizeClasses[size], '').trim()}`\n    : baseClasses;\n\n  return (\n    <div className=\"relative inline-block\">\n      {/* 로딩 중 표시 */}\n      {isLoading && !shouldUseFallback && (\n        <div \n          className={`\n            ${loadingClasses} \n            animate-pulse bg-gray-300 \n            flex items-center justify-center\n          `}\n        >\n          <svg \n            className=\"w-1/2 h-1/2 text-gray-400\" \n            fill=\"currentColor\" \n            viewBox=\"0 0 24 24\"\n          >\n            <path d=\"M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z\"/>\n          </svg>\n        </div>\n      )}\n      \n      {/* 실제 이미지 */}\n      <img\n        src={finalImageUrl}\n        alt={alt}\n        className={`\n          ${baseClasses}\n          ${isLoading && !shouldUseFallback ? 'opacity-0 absolute inset-0' : 'opacity-100'}\n          transition-opacity duration-200\n        `}\n        onLoad={handleImageLoad}\n        onError={handleError}\n        loading=\"lazy\"\n      />\n      \n      {/* 개발 환경에서만 표시되는 상태 인디케이터 - 파란 점 제거 */}\n      {false && process.env.NODE_ENV === 'development' && (\n        <>\n          {/* 에러 상태 표시 */}\n          {hasError && (\n            <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full border border-white\" \n                 title={`이미지 로딩 실패: ${src}`} />\n          )}\n          \n          {/* Google 이미지 429 에러 표시 */}\n          {shouldUseFallback && src?.includes('googleusercontent.com') && (\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-yellow-500 rounded-full border border-white\" \n                 title={`Google 이미지 429 에러로 폴백 사용: ${src}`} />\n          )}\n          \n          {/* 프록시 사용 표시 - 파란 점 제거됨 */}\n          {/* {useProxy && finalImageUrl.includes('/api/proxy-image') && (\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 rounded-full border border-white\" \n                 title={`프록시를 통해 이미지 로딩: ${src}`} />\n          )} */}\n        </>\n      )}\n    </div>\n  );\n}\n\n/**\n * 간단한 아바타 (로딩 상태 없음)\n */\nexport function SimpleAvatar({\n  src,\n  alt = '프로필 이미지',\n  size = 'md',\n  fallbackUrl = '/images/default-avatar.png',\n  className = '',\n  useProxy = true // 기본적으로 프록시 사용\n}: Omit<SafeAvatarProps, 'onImageLoad' | 'onImageError'>) {\n  const safeImageUrl = getSafeAvatarUrl(src, fallbackUrl, useProxy);\n  const handleImageError = createImageErrorHandler(fallbackUrl, useProxy);\n  \n  // 이전에 실패한 URL인지 확인하여 즉시 폴백 사용\n  const shouldUseFallback = src && isFailedImageUrl(src);\n  const finalImageUrl = shouldUseFallback ? fallbackUrl : safeImageUrl;\n\n  return (\n    <div className=\"relative inline-block\">\n      <img\n        src={finalImageUrl}\n        alt={alt}\n        className={`\n          rounded-full object-cover bg-gray-200 \n          ${sizeClasses[size]} \n          ${className}\n        `}\n        onError={handleImageError}\n        loading=\"lazy\"\n      />\n      \n      {/* 개발 환경에서만 표시되는 상태 인디케이터 - 파란 점 제거 */}\n      {false && process.env.NODE_ENV === 'development' && (\n        <>\n          {/* Google 이미지 429 에러 표시 */}\n          {shouldUseFallback && src?.includes('googleusercontent.com') && (\n            <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-yellow-500 rounded-full border border-white\" \n                 title={`Google 이미지 429 에러로 폴백 사용: ${src}`} />\n          )}\n          \n          {/* 프록시 사용 표시 - 파란 점 제거됨 */}\n          {/* {useProxy && finalImageUrl.includes('/api/proxy-image') && (\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-blue-500 rounded-full border border-white\" \n                 title={`프록시를 통해 이미지 로딩: ${src}`} />\n          )} */}\n        </>\n      )}\n    </div>\n  );\n} "],"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","ignoreList":[]}