75e8275f7c894dedf9b219f03ac51553
/**
 * navigation-loading.ts 유틸리티 함수 테스트
 */ "use strict";
// config/settings 모킹
jest.mock('@/config/settings', ()=>({
        SUPPORTED_LANGUAGES: [
            'ko',
            'en',
            'ja',
            'zh',
            'id'
        ],
        DEFAULT_LANGUAGE: 'ko'
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _navigationloading = require("../../utils/navigation-loading");
describe('navigation-loading utilities', ()=>{
    describe('isSamePage', ()=>{
        it('returns true for identical paths', ()=>{
            expect((0, _navigationloading.isSamePage)('/vote', '/vote')).toBe(true);
            expect((0, _navigationloading.isSamePage)('/ko/vote', '/ko/vote')).toBe(true);
        });
        it('returns false for different paths', ()=>{
            expect((0, _navigationloading.isSamePage)('/vote', '/mypage')).toBe(false);
            expect((0, _navigationloading.isSamePage)('/ko/vote', '/en/vote')).toBe(false);
        });
    });
    describe('extractLocaleFromPath', ()=>{
        it('extracts locale from localized paths', ()=>{
            expect((0, _navigationloading.extractLocaleFromPath)('/ko/vote')).toEqual({
                locale: 'ko',
                path: '/vote'
            });
            expect((0, _navigationloading.extractLocaleFromPath)('/en/mypage/profile')).toEqual({
                locale: 'en',
                path: '/mypage/profile'
            });
            expect((0, _navigationloading.extractLocaleFromPath)('/ja')).toEqual({
                locale: 'ja',
                path: '/'
            });
        });
        it('returns default locale for non-localized paths', ()=>{
            expect((0, _navigationloading.extractLocaleFromPath)('/vote')).toEqual({
                locale: 'ko',
                path: '/vote'
            });
            expect((0, _navigationloading.extractLocaleFromPath)('/')).toEqual({
                locale: 'ko',
                path: '/'
            });
        });
        it('returns default locale for unsupported languages', ()=>{
            expect((0, _navigationloading.extractLocaleFromPath)('/fr/vote')).toEqual({
                locale: 'ko',
                path: '/fr/vote'
            });
            expect((0, _navigationloading.extractLocaleFromPath)('/de/mypage')).toEqual({
                locale: 'ko',
                path: '/de/mypage'
            });
        });
    });
    describe('removeLocaleFromPath', ()=>{
        it('removes locale from localized paths', ()=>{
            expect((0, _navigationloading.removeLocaleFromPath)('/ko/vote')).toBe('/vote');
            expect((0, _navigationloading.removeLocaleFromPath)('/en/mypage/profile')).toBe('/mypage/profile');
            expect((0, _navigationloading.removeLocaleFromPath)('/ja')).toBe('/');
        });
        it('returns original path for non-localized paths', ()=>{
            expect((0, _navigationloading.removeLocaleFromPath)('/vote')).toBe('/vote');
            expect((0, _navigationloading.removeLocaleFromPath)('/')).toBe('/');
        });
        it('handles unsupported languages correctly', ()=>{
            expect((0, _navigationloading.removeLocaleFromPath)('/fr/vote')).toBe('/fr/vote');
            expect((0, _navigationloading.removeLocaleFromPath)('/de/mypage')).toBe('/de/mypage');
        });
    });
    describe('isSamePageWithLocale', ()=>{
        it('returns true for same pages with different locales', ()=>{
            expect((0, _navigationloading.isSamePageWithLocale)('/ko/vote', '/en/vote')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/ja/mypage/profile', '/zh/mypage/profile')).toBe(true);
        });
        it('returns true for same pages with same locales', ()=>{
            expect((0, _navigationloading.isSamePageWithLocale)('/ko/vote', '/ko/vote')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/en/mypage', '/en/mypage')).toBe(true);
        });
        it('returns false for different pages', ()=>{
            expect((0, _navigationloading.isSamePageWithLocale)('/ko/vote', '/ko/mypage')).toBe(false);
            expect((0, _navigationloading.isSamePageWithLocale)('/en/vote', '/ja/mypage')).toBe(false);
        });
        it('handles non-localized paths correctly', ()=>{
            expect((0, _navigationloading.isSamePageWithLocale)('/vote', '/ko/vote')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/mypage', '/en/mypage')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/vote', '/mypage')).toBe(false);
        });
        it('handles root paths correctly', ()=>{
            expect((0, _navigationloading.isSamePageWithLocale)('/ko', '/en')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/', '/ko')).toBe(true);
            expect((0, _navigationloading.isSamePageWithLocale)('/ko', '/ko/vote')).toBe(false);
        });
    });
    describe('normalizePathWithLocale', ()=>{
        it('normalizes paths with given locale', ()=>{
            expect((0, _navigationloading.normalizePathWithLocale)('/vote', 'ko')).toBe('/ko/vote');
            expect((0, _navigationloading.normalizePathWithLocale)('/mypage/profile', 'en')).toBe('/en/mypage/profile');
        });
        it('handles root path correctly', ()=>{
            expect((0, _navigationloading.normalizePathWithLocale)('/', 'ko')).toBe('/ko');
            expect((0, _navigationloading.normalizePathWithLocale)('/', 'en')).toBe('/en');
        });
        it('removes existing locale and applies new one', ()=>{
            expect((0, _navigationloading.normalizePathWithLocale)('/en/vote', 'ko')).toBe('/ko/vote');
            expect((0, _navigationloading.normalizePathWithLocale)('/ja/mypage', 'zh')).toBe('/zh/mypage');
        });
        it('handles already normalized paths', ()=>{
            expect((0, _navigationloading.normalizePathWithLocale)('/ko/vote', 'ko')).toBe('/ko/vote');
            expect((0, _navigationloading.normalizePathWithLocale)('/en/mypage', 'en')).toBe('/en/mypage');
        });
    });
    describe('hasSameLocale', ()=>{
        it('returns true for paths with same locale', ()=>{
            expect((0, _navigationloading.hasSameLocale)('/ko/vote', '/ko/mypage')).toBe(true);
            expect((0, _navigationloading.hasSameLocale)('/en/vote', '/en/mypage')).toBe(true);
        });
        it('returns false for paths with different locales', ()=>{
            expect((0, _navigationloading.hasSameLocale)('/ko/vote', '/en/vote')).toBe(false);
            expect((0, _navigationloading.hasSameLocale)('/ja/mypage', '/zh/mypage')).toBe(false);
        });
        it('handles non-localized paths correctly', ()=>{
            expect((0, _navigationloading.hasSameLocale)('/vote', '/mypage')).toBe(true); // both default to 'ko'
            expect((0, _navigationloading.hasSameLocale)('/vote', '/ko/mypage')).toBe(true); // both resolve to 'ko'
        });
        it('handles mixed localized and non-localized paths', ()=>{
            expect((0, _navigationloading.hasSameLocale)('/ko/vote', '/vote')).toBe(true); // both resolve to 'ko'
            expect((0, _navigationloading.hasSameLocale)('/en/vote', '/vote')).toBe(false); // 'en' vs 'ko'
        });
    });
});

//# sourceMappingURL=data:application/json;base64,