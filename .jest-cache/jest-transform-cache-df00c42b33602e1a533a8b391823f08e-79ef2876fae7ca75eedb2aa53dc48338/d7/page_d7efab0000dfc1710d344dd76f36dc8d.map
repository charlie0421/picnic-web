{"version":3,"names":["cov_1op7amvi6","actualCoverage","s","default","f","VoteDetailPage","dynamic","generateMetadata","params","id","lang","langParam","String","b","vote","_voteservice","getVoteById","_metadatautils","createPageMetadata","title","titleObj","ko","en","description","vote_content","baseMetadata","alternates","canonical","_staticpages","SITE_URL","languages","main_image","imageMetadata","createImageMetadata","console","log","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","_navigation","notFound","schemaData","_seoutils","createVoteSchema","undefined","start_at","stop_at","_jsxruntime","jsxs","Fragment","jsx","type","dangerouslySetInnerHTML","__html","JSON","stringify","_react","Suspense","fallback","_server","VoteDetailSkeleton","VoteDetailFetcher","voteId"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/[lang]/(main)/vote/[id]/page.tsx"],"sourcesContent":["import { Suspense } from 'react';\nimport type { Metadata } from 'next';\nimport { notFound } from 'next/navigation';\nimport { getVoteById } from '@/lib/data-fetching/vote-service';\nimport { VoteDetail } from '@/components/client/vote';\nimport { VoteDetailFetcher, VoteDetailSkeleton } from '@/components/server';\n\nimport {\n  createPageMetadata,\n  createImageMetadata,\n} from '@/app/[lang]/utils/metadata-utils';\nimport { createVoteSchema } from '@/app/[lang]/utils/seo-utils';\nimport { SITE_URL } from '@/app/[lang]/constants/static-pages';\n\n// 동적 렌더링 강제 - DYNAMIC_SERVER_USAGE 에러 방지\nexport const dynamic = 'force-dynamic';\n\n// 메타데이터 동적 생성\nexport async function generateMetadata({\n  params,\n}: {\n  params: Promise<{ id: string; lang: string }>;\n}): Promise<Metadata> {\n  // Next.js 15.3.1에서는 params를 먼저 await 해야 함\n  const { id, lang: langParam } = await params;\n  const lang = String(langParam || 'ko');\n\n  const vote = await getVoteById(id);\n\n  if (!vote) {\n    return createPageMetadata(\n      '투표 - 정보 없음',\n      '해당 투표를 찾을 수 없습니다.',\n    );\n  }\n\n  let title: string;\n  if (typeof vote.title === 'string') {\n    title = vote.title;\n  } else if (vote.title && typeof vote.title === 'object') {\n    const titleObj = vote.title as { ko?: string; en?: string };\n    title = titleObj.ko || titleObj.en || '투표';\n  } else {\n    title = '투표';\n  }\n\n  const description =\n    vote.vote_content || '피크닠에서 좋아하는 아티스트에게 투표해보세요!';\n\n  // 기본 메타데이터\n  const baseMetadata = createPageMetadata(\n    `${title} - 피크닠 투표`,\n    description,\n    {\n      alternates: {\n        canonical: `${SITE_URL}/${lang}/vote/${id}`,\n        languages: {\n          'ko-KR': `${SITE_URL}/ko/vote/${id}`,\n          'en-US': `${SITE_URL}/en/vote/${id}`,\n        },\n      },\n    },\n  );\n\n  // 이미지가 있는 경우 이미지 메타데이터 추가\n  if (vote.main_image) {\n    const imageMetadata = createImageMetadata(\n      vote.main_image,\n      title,\n      1200,\n      630,\n    );\n\n    return {\n      ...baseMetadata,\n      ...imageMetadata,\n    };\n  }\n\n  return baseMetadata;\n}\n\n// PageProps 타입 생략, 직접 함수 파라미터에 타입을 인라인으로 정의\nexport default async function VoteDetailPage({\n  params,\n}: {\n  params: Promise<{ id: string; lang: string }>;\n}) {\n  // Next.js 15.3.1에서는 params를 먼저 await 해야 함\n  const { id, lang: langParam } = await params;\n  const lang = String(langParam || 'ko');\n\n  console.log('[VoteDetailPage] 페이지 시작 - ID:', id, 'Lang:', lang);\n  console.log('[VoteDetailPage] 환경 변수 체크:');\n  console.log(\n    '  - NEXT_PUBLIC_SUPABASE_URL:',\n    process.env.NEXT_PUBLIC_SUPABASE_URL ? '설정됨' : '설정되지 않음',\n  );\n  console.log(\n    '  - NEXT_PUBLIC_SUPABASE_ANON_KEY:',\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '설정됨' : '설정되지 않음',\n  );\n\n  const vote = await getVoteById(id);\n\n  // 투표가 없으면 404 페이지로 이동\n  if (!vote) {\n    console.log('[VoteDetailPage] 투표 없음 - notFound 호출');\n    notFound();\n  }\n\n  console.log('[VoteDetailPage] 투표 데이터 로드 성공');\n\n  // 구조화된 데이터를 위한 정보 준비\n  let schemaData: any = null;\n\n  let title: string;\n  if (typeof vote.title === 'string') {\n    title = vote.title;\n  } else if (vote.title && typeof vote.title === 'object') {\n    const titleObj = vote.title as { ko?: string; en?: string };\n    title = titleObj.ko || titleObj.en || '투표';\n  } else {\n    title = '투표';\n  }\n\n  const description =\n    vote.vote_content || '피크닠에서 좋아하는 아티스트에게 투표해보세요!';\n\n  schemaData = createVoteSchema(\n    title,\n    description,\n    vote.main_image ? `https://cdn.picnic.fan/${vote.main_image}` : undefined,\n    vote.start_at || undefined,\n    vote.stop_at || undefined,\n    `${SITE_URL}/${lang}/vote/${id}`,\n  );\n\n  return (\n    <>\n      {schemaData && (\n        <script\n          type='application/ld+json'\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify(schemaData),\n          }}\n        />\n      )}\n      <Suspense fallback={<VoteDetailSkeleton />}>\n        <VoteDetailFetcher voteId={id} />\n      </Suspense>\n    </>\n  );\n}\n"],"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","ignoreList":[]}