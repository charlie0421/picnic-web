{"version":3,"sources":["/Users/cheolhyun/Repositories/picnic-web/__tests__/utils/navigation-loading.test.ts"],"sourcesContent":["/**\n * navigation-loading.ts 유틸리티 함수 테스트\n */\n\nimport {\n  isSamePage,\n  isSamePageWithLocale,\n  extractLocaleFromPath,\n  removeLocaleFromPath,\n  normalizePathWithLocale,\n  hasSameLocale\n} from '../../utils/navigation-loading';\n\n// config/settings 모킹\njest.mock('@/config/settings', () => ({\n  SUPPORTED_LANGUAGES: ['ko', 'en', 'ja', 'zh', 'id'],\n  DEFAULT_LANGUAGE: 'ko',\n}));\n\ndescribe('navigation-loading utilities', () => {\n  describe('isSamePage', () => {\n    it('returns true for identical paths', () => {\n      expect(isSamePage('/vote', '/vote')).toBe(true);\n      expect(isSamePage('/ko/vote', '/ko/vote')).toBe(true);\n    });\n\n    it('returns false for different paths', () => {\n      expect(isSamePage('/vote', '/mypage')).toBe(false);\n      expect(isSamePage('/ko/vote', '/en/vote')).toBe(false);\n    });\n  });\n\n  describe('extractLocaleFromPath', () => {\n    it('extracts locale from localized paths', () => {\n      expect(extractLocaleFromPath('/ko/vote')).toEqual({\n        locale: 'ko',\n        path: '/vote'\n      });\n\n      expect(extractLocaleFromPath('/en/mypage/profile')).toEqual({\n        locale: 'en',\n        path: '/mypage/profile'\n      });\n\n      expect(extractLocaleFromPath('/ja')).toEqual({\n        locale: 'ja',\n        path: '/'\n      });\n    });\n\n    it('returns default locale for non-localized paths', () => {\n      expect(extractLocaleFromPath('/vote')).toEqual({\n        locale: 'ko',\n        path: '/vote'\n      });\n\n      expect(extractLocaleFromPath('/')).toEqual({\n        locale: 'ko',\n        path: '/'\n      });\n    });\n\n    it('returns default locale for unsupported languages', () => {\n      expect(extractLocaleFromPath('/fr/vote')).toEqual({\n        locale: 'ko',\n        path: '/fr/vote'\n      });\n\n      expect(extractLocaleFromPath('/de/mypage')).toEqual({\n        locale: 'ko',\n        path: '/de/mypage'\n      });\n    });\n  });\n\n  describe('removeLocaleFromPath', () => {\n    it('removes locale from localized paths', () => {\n      expect(removeLocaleFromPath('/ko/vote')).toBe('/vote');\n      expect(removeLocaleFromPath('/en/mypage/profile')).toBe('/mypage/profile');\n      expect(removeLocaleFromPath('/ja')).toBe('/');\n    });\n\n    it('returns original path for non-localized paths', () => {\n      expect(removeLocaleFromPath('/vote')).toBe('/vote');\n      expect(removeLocaleFromPath('/')).toBe('/');\n    });\n\n    it('handles unsupported languages correctly', () => {\n      expect(removeLocaleFromPath('/fr/vote')).toBe('/fr/vote');\n      expect(removeLocaleFromPath('/de/mypage')).toBe('/de/mypage');\n    });\n  });\n\n  describe('isSamePageWithLocale', () => {\n    it('returns true for same pages with different locales', () => {\n      expect(isSamePageWithLocale('/ko/vote', '/en/vote')).toBe(true);\n      expect(isSamePageWithLocale('/ja/mypage/profile', '/zh/mypage/profile')).toBe(true);\n    });\n\n    it('returns true for same pages with same locales', () => {\n      expect(isSamePageWithLocale('/ko/vote', '/ko/vote')).toBe(true);\n      expect(isSamePageWithLocale('/en/mypage', '/en/mypage')).toBe(true);\n    });\n\n    it('returns false for different pages', () => {\n      expect(isSamePageWithLocale('/ko/vote', '/ko/mypage')).toBe(false);\n      expect(isSamePageWithLocale('/en/vote', '/ja/mypage')).toBe(false);\n    });\n\n    it('handles non-localized paths correctly', () => {\n      expect(isSamePageWithLocale('/vote', '/ko/vote')).toBe(true);\n      expect(isSamePageWithLocale('/mypage', '/en/mypage')).toBe(true);\n      expect(isSamePageWithLocale('/vote', '/mypage')).toBe(false);\n    });\n\n    it('handles root paths correctly', () => {\n      expect(isSamePageWithLocale('/ko', '/en')).toBe(true);\n      expect(isSamePageWithLocale('/', '/ko')).toBe(true);\n      expect(isSamePageWithLocale('/ko', '/ko/vote')).toBe(false);\n    });\n  });\n\n  describe('normalizePathWithLocale', () => {\n    it('normalizes paths with given locale', () => {\n      expect(normalizePathWithLocale('/vote', 'ko')).toBe('/ko/vote');\n      expect(normalizePathWithLocale('/mypage/profile', 'en')).toBe('/en/mypage/profile');\n    });\n\n    it('handles root path correctly', () => {\n      expect(normalizePathWithLocale('/', 'ko')).toBe('/ko');\n      expect(normalizePathWithLocale('/', 'en')).toBe('/en');\n    });\n\n    it('removes existing locale and applies new one', () => {\n      expect(normalizePathWithLocale('/en/vote', 'ko')).toBe('/ko/vote');\n      expect(normalizePathWithLocale('/ja/mypage', 'zh')).toBe('/zh/mypage');\n    });\n\n    it('handles already normalized paths', () => {\n      expect(normalizePathWithLocale('/ko/vote', 'ko')).toBe('/ko/vote');\n      expect(normalizePathWithLocale('/en/mypage', 'en')).toBe('/en/mypage');\n    });\n  });\n\n  describe('hasSameLocale', () => {\n    it('returns true for paths with same locale', () => {\n      expect(hasSameLocale('/ko/vote', '/ko/mypage')).toBe(true);\n      expect(hasSameLocale('/en/vote', '/en/mypage')).toBe(true);\n    });\n\n    it('returns false for paths with different locales', () => {\n      expect(hasSameLocale('/ko/vote', '/en/vote')).toBe(false);\n      expect(hasSameLocale('/ja/mypage', '/zh/mypage')).toBe(false);\n    });\n\n    it('handles non-localized paths correctly', () => {\n      expect(hasSameLocale('/vote', '/mypage')).toBe(true); // both default to 'ko'\n      expect(hasSameLocale('/vote', '/ko/mypage')).toBe(true); // both resolve to 'ko'\n    });\n\n    it('handles mixed localized and non-localized paths', () => {\n      expect(hasSameLocale('/ko/vote', '/vote')).toBe(true); // both resolve to 'ko'\n      expect(hasSameLocale('/en/vote', '/vote')).toBe(false); // 'en' vs 'ko'\n    });\n  });\n}); "],"names":["jest","mock","SUPPORTED_LANGUAGES","DEFAULT_LANGUAGE","describe","it","expect","isSamePage","toBe","extractLocaleFromPath","toEqual","locale","path","removeLocaleFromPath","isSamePageWithLocale","normalizePathWithLocale","hasSameLocale"],"mappings":"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"}