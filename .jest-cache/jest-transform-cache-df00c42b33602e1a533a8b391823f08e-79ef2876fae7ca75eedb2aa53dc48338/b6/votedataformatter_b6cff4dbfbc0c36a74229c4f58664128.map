{"version":3,"names":["buildVoteQuery","cov_oo03j3gv9","f","s","formatVoteData","voteData","map","vote","deletedAt","deleted_at","startAt","start_at","stopAt","stop_at","createdAt","created_at","updatedAt","updated_at","mainImage","main_image","resultImage","result_image","waitImage","wait_image","voteCategory","vote_category","voteContent","vote_content","voteSubCategory","vote_sub_category","visibleAt","visible_at","area","voteItem","vote_item","b","item","voteId","vote_id","artistId","artist_id","groupId","group_id","voteTotal","vote_total","artist","image","reward","vote_reward","vr","filter","Boolean","title","supabase","status","now","Date","toISOString","query","from","select","is","gt","lte","gte","lt","eq","order","ascending"],"sources":["/Users/cheolhyun/Repositories/picnic-web/utils/vote-data-formatter.ts"],"sourcesContent":["import { Vote } from '@/types/interfaces';\n\n// 투표 데이터 변환 함수 (서버/클라이언트 공통)\nexport const formatVoteData = (voteData: any[]): Vote[] => {\n  return voteData.map((vote: any) => ({\n    ...vote,\n    deletedAt: vote.deleted_at,\n    startAt: vote.start_at,\n    stopAt: vote.stop_at,\n    createdAt: vote.created_at,\n    updatedAt: vote.updated_at,\n    mainImage: vote.main_image,\n    resultImage: vote.result_image,\n    waitImage: vote.wait_image,\n    voteCategory: vote.vote_category,\n    voteContent: vote.vote_content,\n    voteSubCategory: vote.vote_sub_category,\n    visibleAt: vote.visible_at,\n    area: vote.area,\n    voteItem: vote.vote_item\n      ? vote.vote_item.map((item: any) => ({\n          ...item,\n          deletedAt: item.deleted_at,\n          createdAt: item.created_at,\n          updatedAt: item.updated_at,\n          voteId: item.vote_id,\n          artistId: item.artist_id,\n          groupId: item.group_id,\n          voteTotal: item.vote_total || 0,\n          artist: item.artist\n            ? {\n                ...item.artist,\n                image: item.artist.image,\n              }\n            : null,\n        }))\n      : [],\n    reward: vote.vote_reward\n      ? vote.vote_reward.map((vr: any) => vr.reward).filter(Boolean)\n      : [],\n    title: vote.title || '제목 없음',\n  }));\n};\n\n// 투표 쿼리 빌더 (서버/클라이언트 공통)\nexport const buildVoteQuery = (supabase: any, status: string, area: string) => {\n  const now = new Date().toISOString();\n  \n  let query = supabase\n    .from('vote')\n    .select(`\n      *,\n      vote_item!vote_id (\n        id,\n        vote_id,\n        artist_id,\n        group_id,\n        vote_total,\n        created_at,\n        updated_at,\n        deleted_at,\n        artist (\n          id,\n          name,\n          image,\n          artist_group (\n            id,\n            name\n          )\n        )\n      ),\n      vote_reward (\n        reward_id,\n        reward:reward_id (*)\n      )\n    `)\n    .is('deleted_at', null);\n\n  // 상태별 필터링\n  switch (status) {\n    case 'upcoming':\n      query = query.gt('start_at', now);\n      break;\n    case 'ongoing':\n      query = query.lte('start_at', now).gte('stop_at', now);\n      break;\n    case 'completed':\n      query = query.lt('stop_at', now);\n      break;\n  }\n\n  // 영역별 필터링 - 'all'인 경우 필터링하지 않음\n  if (area && area !== 'all') {\n    query = query.eq('area', area);\n  }\n  \n  // 정렬\n  query = query.order('start_at', { ascending: false });\n  \n  return query;\n}; "],"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","ignoreList":[]}