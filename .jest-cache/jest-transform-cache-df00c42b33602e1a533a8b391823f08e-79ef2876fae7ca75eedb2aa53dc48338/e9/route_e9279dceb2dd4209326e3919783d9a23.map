{"version":3,"names":["OPTIONS","cov_1s23pk6n3v","f","s","POST","PUT","requestCounts","Map","RATE_LIMIT_WINDOW","RATE_LIMIT_MAX_REQUESTS","checkRateLimit","clientId","now","Date","clientData","get","b","resetTime","set","count","allowed","remaining","validateInput","code","state","valid","error","length","test","handleWeChatApiError","errcode","errmsg","errorCode","toString","errorMessages","setSecurityHeaders","response","headers","process","env","NEXT_PUBLIC_SITE_URL","request","startTime","clientIp","console","log","ip","userAgent","timestamp","toISOString","rateLimitResult","warn","_server","NextResponse","json","retryAfter","Math","ceil","status","requestBody","parseError","validation","appId","NEXT_PUBLIC_WECHAT_APP_ID","appSecret","WECHAT_APP_SECRET","supabase","_supabasejs","createClient","NEXT_PUBLIC_SUPABASE_URL","SUPABASE_SERVICE_ROLE_KEY","auth","autoRefreshToken","persistSession","supabaseError","tokenUrl","encodeURIComponent","tokenResponse","fetch","method","signal","AbortSignal","timeout","fetchError","ok","statusText","details","tokenData","errorMessage","friendlyMessage","accessToken","access_token","openId","openid","refreshToken","refresh_token","expiresIn","expires_in","hasAccessToken","hasOpenId","userInfoUrl","userInfoResponse","userInfo","normalizedProfile","_wechat","normalizeWeChatProfile","profileError","idToken","generateJwtToken","sub","id","name","picture","avatar","provider","wechat_openid","jwtError","data","existingUsers","from","select","eq","userId","update","display_name","avatar_url","updated_at","processingTime","substring","success","tokens","id_token","profile","metadata","Error","message","String","stack","undefined","refreshUrl","refreshResponse","refreshData","hasNewToken","payload","jwtSecret","JWT_SECRET","SUPABASE_JWT_SECRET","NEXT_PUBLIC_SUPABASE_ANON_KEY","floor","tokenPayload","iat","exp","iss","aud","jti","random","_jsonwebtoken","default","sign","algorithm"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/auth/wechat/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\nimport { Database } from '@/types/supabase';\nimport { SocialAuthError, SocialAuthErrorCode } from '@/lib/supabase/social/types';\nimport { normalizeWeChatProfile } from '@/lib/supabase/social/wechat';\nimport jwt from 'jsonwebtoken';\n\n// 레이트 리미팅을 위한 간단한 메모리 저장소\nconst requestCounts = new Map<string, { count: number; resetTime: number }>();\nconst RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15분\nconst RATE_LIMIT_MAX_REQUESTS = 10; // 15분당 최대 10회 요청\n\n/**\n * 레이트 리미팅 검사\n * \n * @param clientId 클라이언트 식별자 (IP 주소 등)\n * @returns 요청 허용 여부\n */\nfunction checkRateLimit(clientId: string): { allowed: boolean; remaining: number; resetTime: number } {\n  const now = Date.now();\n  const clientData = requestCounts.get(clientId);\n  \n  // 기존 데이터가 없거나 윈도우가 만료된 경우\n  if (!clientData || now > clientData.resetTime) {\n    const resetTime = now + RATE_LIMIT_WINDOW;\n    requestCounts.set(clientId, { count: 1, resetTime });\n    return { allowed: true, remaining: RATE_LIMIT_MAX_REQUESTS - 1, resetTime };\n  }\n  \n  // 요청 횟수 증가\n  clientData.count++;\n  \n  if (clientData.count > RATE_LIMIT_MAX_REQUESTS) {\n    return { allowed: false, remaining: 0, resetTime: clientData.resetTime };\n  }\n  \n  return { \n    allowed: true, \n    remaining: RATE_LIMIT_MAX_REQUESTS - clientData.count, \n    resetTime: clientData.resetTime \n  };\n}\n\n/**\n * 입력 검증 함수\n * \n * @param code OAuth 코드\n * @param state 상태 토큰\n * @returns 검증 결과\n */\nfunction validateInput(code: string, state?: string): { valid: boolean; error?: string } {\n  // 코드 검증\n  if (!code || typeof code !== 'string') {\n    return { valid: false, error: 'OAuth 코드가 필요합니다.' };\n  }\n  \n  if (code.length < 10 || code.length > 512) {\n    return { valid: false, error: '유효하지 않은 OAuth 코드 형식입니다.' };\n  }\n  \n  // 코드에 허용되지 않는 문자가 있는지 확인\n  if (!/^[a-zA-Z0-9_-]+$/.test(code)) {\n    return { valid: false, error: 'OAuth 코드에 유효하지 않은 문자가 포함되어 있습니다.' };\n  }\n  \n  // 상태 토큰 검증 (선택사항)\n  if (state && typeof state === 'string') {\n    if (state.length > 256) {\n      return { valid: false, error: '상태 토큰이 너무 깁니다.' };\n    }\n    \n    if (!/^[a-zA-Z0-9_-]+$/.test(state)) {\n      return { valid: false, error: '상태 토큰에 유효하지 않은 문자가 포함되어 있습니다.' };\n    }\n  }\n  \n  return { valid: true };\n}\n\n/**\n * WeChat API 오류 코드 처리\n * \n * @param errcode WeChat API 오류 코드\n * @param errmsg WeChat API 오류 메시지\n * @returns 사용자 친화적인 오류 메시지\n */\nfunction handleWeChatApiError(errcode: string | number, errmsg: string): string {\n  const errorCode = errcode.toString();\n  \n  const errorMessages: Record<string, string> = {\n    // 토큰 관련 오류\n    '40001': '액세스 토큰이 유효하지 않습니다.',\n    '40002': '잘못된 자격 증명 타입입니다.',\n    '40003': 'OpenID가 유효하지 않습니다.',\n    '40013': '잘못된 앱 ID입니다.',\n    '40125': '잘못된 앱 시크릿입니다.',\n    \n    // 코드 관련 오류\n    '40029': '잘못된 OAuth 코드입니다.',\n    '40163': '코드가 이미 사용되었습니다.',\n    \n    // 토큰 만료 오류\n    '42001': '액세스 토큰이 만료되었습니다.',\n    '42002': '리프레시 토큰이 만료되었습니다.',\n    '42003': '액세스 토큰이 갱신되어야 합니다.',\n    \n    // 권한 관련 오류\n    '48001': '앱이 승인되지 않았습니다.',\n    '48002': '앱이 차단되었습니다.',\n    '48003': '앱이 삭제되었습니다.',\n    '48004': '앱이 일시 중단되었습니다.',\n    \n    // 사용자 관련 오류\n    '50001': '사용자가 인증을 취소했습니다.',\n    '50002': '사용자가 앱 사용을 거부했습니다.',\n    \n    // 시스템 오류\n    '-1': 'WeChat 시스템 오류가 발생했습니다.',\n    '40164': '요청이 너무 자주 발생했습니다. 잠시 후 다시 시도해주세요.',\n    '89503': 'WeChat 서비스가 일시적으로 사용할 수 없습니다.',\n  };\n  \n  return errorMessages[errorCode] || `WeChat API 오류: ${errmsg} (코드: ${errcode})`;\n}\n\n/**\n * 보안 헤더 설정\n * \n * @param response NextResponse 객체\n * @returns 보안 헤더가 설정된 응답\n */\nfunction setSecurityHeaders(response: NextResponse): NextResponse {\n  // CORS 헤더\n  response.headers.set('Access-Control-Allow-Origin', process.env.NEXT_PUBLIC_SITE_URL || '*');\n  response.headers.set('Access-Control-Allow-Methods', 'POST, PUT, OPTIONS');\n  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  \n  // 보안 헤더\n  response.headers.set('X-Content-Type-Options', 'nosniff');\n  response.headers.set('X-Frame-Options', 'DENY');\n  response.headers.set('X-XSS-Protection', '1; mode=block');\n  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  // 캐시 방지 (민감한 데이터)\n  response.headers.set('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n  response.headers.set('Pragma', 'no-cache');\n  response.headers.set('Expires', '0');\n  \n  return response;\n}\n\n/**\n * WeChat 토큰 및 사용자 정보 처리 API\n * \n * 이 API는 WeChat OAuth 콜백으로부터 받은 코드를 사용하여\n * 액세스 토큰을 획득하고 사용자 정보를 가져오는 역할을 합니다.\n */\nexport async function POST(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // 클라이언트 IP 주소 가져오기 (레이트 리미팅용)\n    const clientIp = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown';\n    \n    console.log('🔍 WeChat API 요청 시작:', {\n      ip: clientIp,\n      userAgent: request.headers.get('user-agent'),\n      timestamp: new Date().toISOString()\n    });\n    \n    // 레이트 리미팅 검사\n    const rateLimitResult = checkRateLimit(clientIp);\n    if (!rateLimitResult.allowed) {\n      console.warn('⚠️ 레이트 리미트 초과:', {\n        ip: clientIp,\n        resetTime: new Date(rateLimitResult.resetTime).toISOString()\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: '요청이 너무 자주 발생했습니다. 잠시 후 다시 시도해주세요.',\n          retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000)\n        },\n        { status: 429 }\n      );\n      \n      response.headers.set('Retry-After', Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString());\n      response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\n      response.headers.set('X-RateLimit-Remaining', '0');\n      response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());\n      \n      return setSecurityHeaders(response);\n    }\n    \n    // 요청 본문 파싱\n    let requestBody;\n    try {\n      requestBody = await request.json();\n    } catch (parseError) {\n      console.error('❌ 요청 본문 파싱 오류:', parseError);\n      const response = NextResponse.json(\n        { error: '잘못된 JSON 형식입니다.' },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    const { code, state } = requestBody;\n    \n    // 입력 검증\n    const validation = validateInput(code, state);\n    if (!validation.valid) {\n      console.warn('⚠️ 입력 검증 실패:', validation.error);\n      const response = NextResponse.json(\n        { error: validation.error },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // 환경 변수 검증\n    const appId = process.env.NEXT_PUBLIC_WECHAT_APP_ID;\n    const appSecret = process.env.WECHAT_APP_SECRET;\n    \n    if (!appId || !appSecret) {\n      console.error('❌ WeChat 환경 변수 누락');\n      const response = NextResponse.json(\n        { error: 'WeChat 서비스가 올바르게 설정되지 않았습니다.' },\n        { status: 500 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // Supabase 클라이언트 생성\n    let supabase;\n    try {\n      supabase = createClient<Database>(\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\n        process.env.SUPABASE_SERVICE_ROLE_KEY!,\n        {\n          auth: {\n            autoRefreshToken: false,\n            persistSession: false,\n          }\n        }\n      );\n    } catch (supabaseError) {\n      console.error('❌ Supabase 클라이언트 생성 실패:', supabaseError);\n      const response = NextResponse.json(\n        { error: '데이터베이스 연결에 실패했습니다.' },\n        { status: 500 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    console.log('🔍 WeChat 액세스 토큰 요청 시작');\n    \n    // 1. 코드로 액세스 토큰 획득\n    const tokenUrl = `https://api.weixin.qq.com/sns/oauth2/access_token?appid=${encodeURIComponent(appId)}&secret=${encodeURIComponent(appSecret)}&code=${encodeURIComponent(code)}&grant_type=authorization_code`;\n    \n    let tokenResponse;\n    try {\n      tokenResponse = await fetch(tokenUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'WeChat-OAuth-Server/1.0'\n        },\n        // 타임아웃 설정 (10초)\n        signal: AbortSignal.timeout(10000)\n      });\n    } catch (fetchError) {\n      console.error('❌ WeChat 토큰 요청 네트워크 오류:', fetchError);\n      const response = NextResponse.json(\n        { error: 'WeChat 서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.' },\n        { status: 503 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    if (!tokenResponse.ok) {\n      console.error('❌ WeChat 토큰 요청 HTTP 오류:', {\n        status: tokenResponse.status,\n        statusText: tokenResponse.statusText\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: 'WeChat 토큰 요청에 실패했습니다.',\n          details: `HTTP ${tokenResponse.status}: ${tokenResponse.statusText}`\n        },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    let tokenData;\n    try {\n      tokenData = await tokenResponse.json();\n    } catch (parseError) {\n      console.error('❌ WeChat 토큰 응답 파싱 오류:', parseError);\n      const response = NextResponse.json(\n        { error: 'WeChat 서버 응답을 처리할 수 없습니다.' },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // WeChat API 오류 처리\n    if (tokenData.errcode) {\n      const errorMessage = handleWeChatApiError(tokenData.errcode, tokenData.errmsg);\n      console.error('❌ WeChat 토큰 API 오류:', {\n        errcode: tokenData.errcode,\n        errmsg: tokenData.errmsg,\n        friendlyMessage: errorMessage\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: errorMessage,\n          code: tokenData.errcode \n        },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    const accessToken = tokenData.access_token;\n    const openId = tokenData.openid;\n    const refreshToken = tokenData.refresh_token;\n    const expiresIn = tokenData.expires_in;\n    \n    if (!accessToken || !openId) {\n      console.error('❌ WeChat 토큰 응답에 필수 필드 누락:', {\n        hasAccessToken: !!accessToken,\n        hasOpenId: !!openId\n      });\n      \n      const response = NextResponse.json(\n        { error: 'WeChat에서 유효하지 않은 토큰 응답을 받았습니다.' },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    console.log('✅ WeChat 액세스 토큰 획득 완료');\n    console.log('🔍 WeChat 사용자 정보 요청 시작');\n    \n    // 2. 액세스 토큰으로 사용자 정보 가져오기\n    const userInfoUrl = `https://api.weixin.qq.com/sns/userinfo?access_token=${encodeURIComponent(accessToken)}&openid=${encodeURIComponent(openId)}&lang=zh_CN`;\n    \n    let userInfoResponse;\n    try {\n      userInfoResponse = await fetch(userInfoUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'WeChat-OAuth-Server/1.0'\n        },\n        // 타임아웃 설정 (10초)\n        signal: AbortSignal.timeout(10000)\n      });\n    } catch (fetchError) {\n      console.error('❌ WeChat 사용자 정보 요청 네트워크 오류:', fetchError);\n      const response = NextResponse.json(\n        { error: 'WeChat 사용자 정보를 가져올 수 없습니다. 잠시 후 다시 시도해주세요.' },\n        { status: 503 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    if (!userInfoResponse.ok) {\n      console.error('❌ WeChat 사용자 정보 요청 HTTP 오류:', {\n        status: userInfoResponse.status,\n        statusText: userInfoResponse.statusText\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: 'WeChat 사용자 정보 요청에 실패했습니다.',\n          details: `HTTP ${userInfoResponse.status}: ${userInfoResponse.statusText}`\n        },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    let userInfo;\n    try {\n      userInfo = await userInfoResponse.json();\n    } catch (parseError) {\n      console.error('❌ WeChat 사용자 정보 응답 파싱 오류:', parseError);\n      const response = NextResponse.json(\n        { error: 'WeChat 사용자 정보 응답을 처리할 수 없습니다.' },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // WeChat API 오류 처리\n    if (userInfo.errcode) {\n      const errorMessage = handleWeChatApiError(userInfo.errcode, userInfo.errmsg);\n      console.error('❌ WeChat 사용자 정보 API 오류:', {\n        errcode: userInfo.errcode,\n        errmsg: userInfo.errmsg,\n        friendlyMessage: errorMessage\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: errorMessage,\n          code: userInfo.errcode \n        },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    console.log('✅ WeChat 사용자 정보 획득 완료');\n    \n    // 프로필 정보 정규화\n    let normalizedProfile;\n    try {\n      normalizedProfile = normalizeWeChatProfile(userInfo);\n    } catch (profileError) {\n      console.error('❌ WeChat 프로필 정규화 오류:', profileError);\n      const response = NextResponse.json(\n        { error: 'WeChat 사용자 정보를 처리하는 중 오류가 발생했습니다.' },\n        { status: 500 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // 3. JWT 토큰 생성 (Supabase 인증용)\n    let idToken;\n    try {\n      idToken = await generateJwtToken({\n        sub: normalizedProfile.id,\n        name: normalizedProfile.name,\n        picture: normalizedProfile.avatar,\n        provider: 'wechat',\n        wechat_openid: normalizedProfile.id\n      });\n    } catch (jwtError) {\n      console.error('❌ JWT 토큰 생성 오류:', jwtError);\n      const response = NextResponse.json(\n        { error: '인증 토큰 생성에 실패했습니다.' },\n        { status: 500 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // 4. Supabase에 사용자 데이터 저장 (선택 사항)\n    try {\n      // Supabase 사용자가 이미 존재하는지 확인 (openId 기준)\n      const { data: existingUsers } = await supabase\n        .from('user_profiles')\n        .select('id')\n        .eq('provider', 'wechat')\n        .eq('provider_id', normalizedProfile.id);\n      \n      if (existingUsers && existingUsers.length > 0) {\n        // 기존 사용자가 있으면 프로필 업데이트\n        const userId = existingUsers[0].id;\n        \n        await supabase.from('user_profiles').update({\n          display_name: normalizedProfile.name,\n          avatar_url: normalizedProfile.avatar,\n          updated_at: new Date().toISOString()\n        }).eq('id', userId);\n        \n        normalizedProfile.userId = userId;\n        console.log('✅ 기존 WeChat 사용자 프로필 업데이트 완료');\n      }\n    } catch (error) {\n      console.warn('⚠️ Supabase 사용자 업데이트 실패 (계속 진행):', error);\n      // 사용자 업데이트 실패해도 계속 진행\n    }\n    \n    const processingTime = Date.now() - startTime;\n    console.log('✅ WeChat API 처리 완료:', {\n      processingTime: `${processingTime}ms`,\n      openId: normalizedProfile.id.substring(0, 8) + '...' // 보안상 일부만 로그\n    });\n    \n    const response = NextResponse.json({\n      success: true,\n      tokens: {\n        access_token: accessToken,\n        refresh_token: refreshToken,\n        expires_in: expiresIn,\n        id_token: idToken\n      },\n      profile: normalizedProfile,\n      metadata: {\n        processingTime,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n    // 레이트 리미팅 헤더 추가\n    response.headers.set('X-RateLimit-Limit', RATE_LIMIT_MAX_REQUESTS.toString());\n    response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());\n    response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());\n    \n    return setSecurityHeaders(response);\n    \n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    console.error('❌ WeChat API 요청 처리 중 예상치 못한 오류:', {\n      error: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      processingTime: `${processingTime}ms`\n    });\n    \n    const response = NextResponse.json(\n      { \n        error: '서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n    \n    return setSecurityHeaders(response);\n  }\n}\n\n/**\n * WeChat 토큰 갱신 API\n */\nexport async function PUT(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // 클라이언트 IP 주소 가져오기 (레이트 리미팅용)\n    const clientIp = request.headers.get('x-forwarded-for') || \n                     request.headers.get('x-real-ip') || \n                     'unknown';\n    \n    console.log('🔍 WeChat 토큰 갱신 요청 시작:', {\n      ip: clientIp,\n      timestamp: new Date().toISOString()\n    });\n    \n    // 레이트 리미팅 검사\n    const rateLimitResult = checkRateLimit(clientIp);\n    if (!rateLimitResult.allowed) {\n      console.warn('⚠️ 토큰 갱신 레이트 리미트 초과:', { ip: clientIp });\n      \n      const response = NextResponse.json(\n        { \n          error: '요청이 너무 자주 발생했습니다. 잠시 후 다시 시도해주세요.',\n          retryAfter: Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000)\n        },\n        { status: 429 }\n      );\n      \n      response.headers.set('Retry-After', Math.ceil((rateLimitResult.resetTime - Date.now()) / 1000).toString());\n      return setSecurityHeaders(response);\n    }\n    \n    // 요청 본문 파싱\n    let requestBody;\n    try {\n      requestBody = await request.json();\n    } catch (parseError) {\n      console.error('❌ 토큰 갱신 요청 본문 파싱 오류:', parseError);\n      const response = NextResponse.json(\n        { error: '잘못된 JSON 형식입니다.' },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    const { refresh_token } = requestBody;\n    \n    // 입력 검증\n    if (!refresh_token || typeof refresh_token !== 'string') {\n      const response = NextResponse.json(\n        { error: '리프레시 토큰이 필요합니다.' },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    if (refresh_token.length < 10 || refresh_token.length > 512) {\n      const response = NextResponse.json(\n        { error: '유효하지 않은 리프레시 토큰 형식입니다.' },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // WeChat API 설정\n    const appId = process.env.NEXT_PUBLIC_WECHAT_APP_ID;\n    \n    if (!appId) {\n      console.error('❌ WeChat 앱 ID 환경 변수 누락');\n      const response = NextResponse.json(\n        { error: 'WeChat 서비스가 올바르게 설정되지 않았습니다.' },\n        { status: 500 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    console.log('🔍 WeChat 토큰 갱신 API 호출');\n    \n    // 토큰 갱신 요청\n    const refreshUrl = `https://api.weixin.qq.com/sns/oauth2/refresh_token?appid=${encodeURIComponent(appId)}&grant_type=refresh_token&refresh_token=${encodeURIComponent(refresh_token)}`;\n    \n    let refreshResponse;\n    try {\n      refreshResponse = await fetch(refreshUrl, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'WeChat-OAuth-Server/1.0'\n        },\n        // 타임아웃 설정 (10초)\n        signal: AbortSignal.timeout(10000)\n      });\n    } catch (fetchError) {\n      console.error('❌ WeChat 토큰 갱신 네트워크 오류:', fetchError);\n      const response = NextResponse.json(\n        { error: 'WeChat 서버에 연결할 수 없습니다. 잠시 후 다시 시도해주세요.' },\n        { status: 503 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    if (!refreshResponse.ok) {\n      console.error('❌ WeChat 토큰 갱신 HTTP 오류:', {\n        status: refreshResponse.status,\n        statusText: refreshResponse.statusText\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: 'WeChat 토큰 갱신 요청에 실패했습니다.',\n          details: `HTTP ${refreshResponse.status}: ${refreshResponse.statusText}`\n        },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    let refreshData;\n    try {\n      refreshData = await refreshResponse.json();\n    } catch (parseError) {\n      console.error('❌ WeChat 토큰 갱신 응답 파싱 오류:', parseError);\n      const response = NextResponse.json(\n        { error: 'WeChat 서버 응답을 처리할 수 없습니다.' },\n        { status: 502 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    // WeChat API 오류 처리\n    if (refreshData.errcode) {\n      const errorMessage = handleWeChatApiError(refreshData.errcode, refreshData.errmsg);\n      console.error('❌ WeChat 토큰 갱신 API 오류:', {\n        errcode: refreshData.errcode,\n        errmsg: refreshData.errmsg,\n        friendlyMessage: errorMessage\n      });\n      \n      const response = NextResponse.json(\n        { \n          error: errorMessage,\n          code: refreshData.errcode\n        },\n        { status: 400 }\n      );\n      return setSecurityHeaders(response);\n    }\n    \n    const processingTime = Date.now() - startTime;\n    console.log('✅ WeChat 토큰 갱신 완료:', {\n      processingTime: `${processingTime}ms`,\n      hasNewToken: !!refreshData.access_token\n    });\n    \n    const response = NextResponse.json({\n      success: true,\n      tokens: {\n        access_token: refreshData.access_token,\n        refresh_token: refreshData.refresh_token,\n        expires_in: refreshData.expires_in,\n        openid: refreshData.openid\n      },\n      metadata: {\n        processingTime,\n        timestamp: new Date().toISOString()\n      }\n    });\n    \n    return setSecurityHeaders(response);\n    \n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    console.error('❌ WeChat 토큰 갱신 중 예상치 못한 오류:', {\n      error: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      processingTime: `${processingTime}ms`\n    });\n    \n    const response = NextResponse.json(\n      { \n        error: '서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.',\n        timestamp: new Date().toISOString()\n      },\n      { status: 500 }\n    );\n    \n    return setSecurityHeaders(response);\n  }\n}\n\n/**\n * OPTIONS 요청 처리 (CORS preflight)\n */\nexport async function OPTIONS(request: NextRequest) {\n  const response = new NextResponse(null, { status: 200 });\n  return setSecurityHeaders(response);\n}\n\n/**\n * JWT 토큰 생성 함수\n * jsonwebtoken 라이브러리를 사용하여 안전한 토큰 생성\n */\nasync function generateJwtToken(payload: any): Promise<string> {\n  // JWT 시크릿 키 (환경 변수에서 가져오거나 기본값 사용)\n  const jwtSecret = process.env.JWT_SECRET || \n                   process.env.SUPABASE_JWT_SECRET || \n                   process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || \n                   'fallback-secret-key';\n  \n  if (jwtSecret === 'fallback-secret-key') {\n    console.warn('⚠️ JWT 시크릿 키가 설정되지 않았습니다. 기본값을 사용합니다.');\n  }\n  \n  const now = Math.floor(Date.now() / 1000);\n  const expiresIn = 3600; // 1시간\n  \n  const tokenPayload = {\n    ...payload,\n    iat: now,\n    exp: now + expiresIn,\n    iss: 'picnic-web-wechat',\n    aud: 'picnic-web',\n    jti: `wechat_${Date.now()}_${Math.random().toString(36).substring(2)}`\n  };\n  \n  try {\n    return jwt.sign(tokenPayload, jwtSecret, {\n      algorithm: 'HS256'\n    });\n  } catch (jwtError) {\n    console.error('❌ JWT 토큰 생성 실패:', jwtError);\n    throw new Error('JWT 토큰 생성에 실패했습니다.');\n  }\n} "],"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","ignoreList":[]}