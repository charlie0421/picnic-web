{"version":3,"names":["cacheMetrics","cov_2jak1cd9wa","f","s","clearPerformanceMetrics","generatePerformanceReport","measurePerformance","overFetchingDetector","waterfallDetector","withPerformanceTracking","isDev","process","env","NODE_ENV","name","fn","b","startTime","performance","now","result","endTime","duration","console","log","toFixed","error","CacheMetrics","constructor","metrics","getInstance","instance","recordHit","key","hits","misses","recordMiss","getHitRatio","total","getAllMetrics","Object","entries","ratio","printMetrics","group","groupEnd","clearMetrics","WaterfallDetector","activeRequests","Map","waterfalls","startRequest","id","parent","set","endRequest","request","get","delete","parentRequest","delay","push","child","getWaterfalls","printWaterfalls","length","warn","clearWaterfalls","OverFetchingDetector","fetchCounts","thresholds","recordFetch","setThreshold","threshold","getOverFetchedKeys","count","printWarnings","overFetched","clearCounts","component","options","cacheKey"],"sources":["/Users/cheolhyun/Repositories/picnic-web/utils/performance.ts"],"sourcesContent":["/**\n * 서버 컴포넌트 데이터 페칭 성능 측정 유틸리티\n * \n * 이 파일은 서버 컴포넌트 데이터 페칭 성능을 측정하기 위한 유틸리티 함수를 제공합니다.\n * 개발 환경에서만 사용되며, 프로덕션 환경에서는 자동으로 비활성화됩니다.\n */\n\n// 개발 환경에서만 활성화\nconst isDev = process.env.NODE_ENV === 'development';\n\n/**\n * 성능 측정 래퍼 함수\n * \n * 데이터 페칭 함수를 감싸서 실행 시간을 측정합니다.\n * 개발 환경에서만 로그를 출력하며, 프로덕션 환경에서는 원래 함수만 실행합니다.\n * \n * @param name 측정할 작업의 이름\n * @param fn 측정할 함수\n * @returns 원래 함수의 반환값\n */\nexport async function measurePerformance<T>(\n  name: string,\n  fn: () => Promise<T>\n): Promise<T> {\n  if (!isDev) {\n    return fn();\n  }\n\n  const startTime = performance.now();\n  try {\n    const result = await fn();\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    \n    console.log(`[Performance] ${name}: ${duration.toFixed(2)}ms`);\n    \n    return result;\n  } catch (error) {\n    const endTime = performance.now();\n    const duration = endTime - startTime;\n    \n    console.error(`[Performance] ${name} (Error): ${duration.toFixed(2)}ms`);\n    throw error;\n  }\n}\n\n/**\n * 캐시 적중률 측정 함수\n * \n * 데이터 페칭 함수의 캐시 적중률을 측정합니다.\n * 측정 결과는 개발 도구 콘솔에 출력됩니다.\n */\nclass CacheMetrics {\n  private static instance: CacheMetrics;\n  private metrics: Record<string, { hits: number; misses: number }> = {};\n\n  private constructor() {}\n\n  public static getInstance(): CacheMetrics {\n    if (!CacheMetrics.instance) {\n      CacheMetrics.instance = new CacheMetrics();\n    }\n    return CacheMetrics.instance;\n  }\n\n  public recordHit(key: string): void {\n    if (!isDev) return;\n    \n    if (!this.metrics[key]) {\n      this.metrics[key] = { hits: 0, misses: 0 };\n    }\n    this.metrics[key].hits += 1;\n  }\n\n  public recordMiss(key: string): void {\n    if (!isDev) return;\n    \n    if (!this.metrics[key]) {\n      this.metrics[key] = { hits: 0, misses: 0 };\n    }\n    this.metrics[key].misses += 1;\n  }\n\n  public getHitRatio(key: string): number {\n    if (!this.metrics[key]) return 0;\n    \n    const { hits, misses } = this.metrics[key];\n    const total = hits + misses;\n    return total ? hits / total : 0;\n  }\n\n  public getAllMetrics(): Record<string, { hits: number; misses: number; ratio: number }> {\n    const result: Record<string, { hits: number; misses: number; ratio: number }> = {};\n    \n    for (const [key, { hits, misses }] of Object.entries(this.metrics)) {\n      const total = hits + misses;\n      result[key] = {\n        hits,\n        misses,\n        ratio: total ? hits / total : 0\n      };\n    }\n    \n    return result;\n  }\n\n  public printMetrics(): void {\n    if (!isDev) return;\n    \n    console.group('[Cache Metrics]');\n    \n    for (const [key, { hits, misses, ratio }] of Object.entries(this.getAllMetrics())) {\n      console.log(\n        `${key}: ${(ratio * 100).toFixed(2)}% hit ratio (${hits} hits, ${misses} misses)`\n      );\n    }\n    \n    console.groupEnd();\n  }\n\n  public clearMetrics(): void {\n    this.metrics = {};\n  }\n}\n\nexport const cacheMetrics = CacheMetrics.getInstance();\n\n/**\n * 렌더링 워터폴 감지 함수\n * \n * 중첩된 데이터 페칭이 순차적으로 발생하는 워터폴 패턴을 감지합니다.\n * 개발 환경에서만 작동하며, 워터폴이 감지되면 콘솔에 경고를 출력합니다.\n */\nclass WaterfallDetector {\n  private static instance: WaterfallDetector;\n  private activeRequests: Map<string, { startTime: number; parent: string | null }> = new Map();\n  private waterfalls: Array<{ parent: string; child: string; delay: number }> = [];\n\n  private constructor() {}\n\n  public static getInstance(): WaterfallDetector {\n    if (!WaterfallDetector.instance) {\n      WaterfallDetector.instance = new WaterfallDetector();\n    }\n    return WaterfallDetector.instance;\n  }\n\n  public startRequest(id: string, parent: string | null = null): void {\n    if (!isDev) return;\n    \n    this.activeRequests.set(id, {\n      startTime: performance.now(),\n      parent\n    });\n  }\n\n  public endRequest(id: string): void {\n    if (!isDev) return;\n    \n    const request = this.activeRequests.get(id);\n    if (!request) return;\n    \n    this.activeRequests.delete(id);\n    \n    // 워터폴 패턴 감지\n    if (request.parent) {\n      const parentRequest = this.activeRequests.get(request.parent);\n      if (parentRequest) {\n        const delay = request.startTime - parentRequest.startTime;\n        if (delay > 10) { // 10ms 이상 지연되면 워터폴로 간주\n          this.waterfalls.push({\n            parent: request.parent,\n            child: id,\n            delay\n          });\n        }\n      }\n    }\n  }\n\n  public getWaterfalls(): Array<{ parent: string; child: string; delay: number }> {\n    return [...this.waterfalls];\n  }\n\n  public printWaterfalls(): void {\n    if (!isDev || this.waterfalls.length === 0) return;\n    \n    console.group('[Waterfall Warnings]');\n    \n    for (const { parent, child, delay } of this.waterfalls) {\n      console.warn(\n        `Potential waterfall detected: ${parent} -> ${child} (${delay.toFixed(2)}ms delay)`\n      );\n    }\n    \n    console.groupEnd();\n  }\n\n  public clearWaterfalls(): void {\n    this.waterfalls = [];\n  }\n}\n\nexport const waterfallDetector = WaterfallDetector.getInstance();\n\n/**\n * 과도한 데이터 페칭 감지 함수\n * \n * 동일한 데이터를 반복적으로 페칭하는 패턴을 감지합니다.\n * 개발 환경에서만 작동하며, 과도한 페칭이 감지되면 콘솔에 경고를 출력합니다.\n */\nclass OverFetchingDetector {\n  private static instance: OverFetchingDetector;\n  private fetchCounts: Record<string, number> = {};\n  private thresholds: Record<string, number> = {};\n\n  private constructor() {}\n\n  public static getInstance(): OverFetchingDetector {\n    if (!OverFetchingDetector.instance) {\n      OverFetchingDetector.instance = new OverFetchingDetector();\n    }\n    return OverFetchingDetector.instance;\n  }\n\n  public recordFetch(key: string): void {\n    if (!isDev) return;\n    \n    this.fetchCounts[key] = (this.fetchCounts[key] || 0) + 1;\n  }\n\n  public setThreshold(key: string, threshold: number): void {\n    this.thresholds[key] = threshold;\n  }\n\n  public getOverFetchedKeys(): Array<{ key: string; count: number; threshold: number }> {\n    const result: Array<{ key: string; count: number; threshold: number }> = [];\n    \n    for (const [key, count] of Object.entries(this.fetchCounts)) {\n      const threshold = this.thresholds[key] || 3; // 기본 임계값\n      if (count > threshold) {\n        result.push({ key, count, threshold });\n      }\n    }\n    \n    return result;\n  }\n\n  public printWarnings(): void {\n    if (!isDev) return;\n    \n    const overFetched = this.getOverFetchedKeys();\n    if (overFetched.length === 0) return;\n    \n    console.group('[Over-fetching Warnings]');\n    \n    for (const { key, count, threshold } of overFetched) {\n      console.warn(\n        `Potential over-fetching detected: ${key} (${count} fetches, threshold: ${threshold})`\n      );\n    }\n    \n    console.groupEnd();\n  }\n\n  public clearCounts(): void {\n    this.fetchCounts = {};\n  }\n}\n\nexport const overFetchingDetector = OverFetchingDetector.getInstance();\n\n/**\n * 종합 성능 리포트 생성 함수\n * \n * 캐시 적중률, 워터폴, 과도한 페칭 등 모든 성능 지표를 종합한 리포트를 생성합니다.\n * 개발 환경에서만 작동하며, 콘솔에 출력됩니다.\n */\nexport function generatePerformanceReport(): void {\n  if (!isDev) return;\n  \n  console.group('[Server Component Performance Report]');\n  \n  // 캐시 지표 출력\n  cacheMetrics.printMetrics();\n  \n  // 워터폴 경고 출력\n  waterfallDetector.printWaterfalls();\n  \n  // 과도한 페칭 경고 출력\n  overFetchingDetector.printWarnings();\n  \n  console.groupEnd();\n}\n\n/**\n * 성능 지표 초기화 함수\n * \n * 모든 성능 지표를 초기화합니다.\n */\nexport function clearPerformanceMetrics(): void {\n  cacheMetrics.clearMetrics();\n  waterfallDetector.clearWaterfalls();\n  overFetchingDetector.clearCounts();\n}\n\n// Next.js 앱 라우터에서 사용할 수 있는 미들웨어 함수\nexport function withPerformanceTracking<T>(\n  component: () => Promise<T>,\n  options: {\n    name: string;\n    parent?: string;\n    cacheKey?: string;\n  }\n): () => Promise<T> {\n  if (!isDev) {\n    return component;\n  }\n  \n  return async () => {\n    const { name, parent, cacheKey } = options;\n    \n    if (parent) {\n      waterfallDetector.startRequest(name, parent);\n    }\n    \n    if (cacheKey) {\n      overFetchingDetector.recordFetch(cacheKey);\n    }\n    \n    try {\n      const result = await measurePerformance(name, component);\n      return result;\n    } finally {\n      if (parent) {\n        waterfallDetector.endRequest(name);\n      }\n    }\n  };\n} "],"mappingssHaA,YAAY,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAZH,YAAA;;EA+KGI,uBAAuB,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvBC,uBAAA;;EAtBAC,yBAAyB,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAzBE,yBAAA;;EAlQMC,kBAAkB,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAlBG,kBAAA;;EA0PTC,oBAAoB,WAAAA,CAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAApBI,oBAAA;;EAnEAC,iBAAiB,WAAAA,CAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAjBK,iBAAA;;EAwGGC,uBAAuB,WAAAA,CAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAvBM,uBAAA;;;AA3ShB,MAAMC,KAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,QAAQQ,OAAA,CAAQC,GAAG,CAACC,QAAQ,KAAK;AAYhC,eAAeP,mBACpBQ,IAAY,EACZC,EAAoB;EAAA;EAAAd,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAEpB,IAAI,CAACO,KAAA,EAAO;IAAA;IAAAT,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAE,CAAA;IACV,OAAOY,EAAA;EACT;EAAA;EAAA;IAAAd,cAAA,GAAAe,CAAA;EAAA;EAEA,MAAMC,SAAA;EAAA;EAAA,CAAAhB,cAAA,GAAAE,CAAA,QAAYe,WAAA,CAAYC,GAAG;EAAA;EAAAlB,cAAA,GAAAE,CAAA;EACjC,IAAI;IACF,MAAMiB,MAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAS,MAAMY,EAAA;IACrB,MAAMM,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAUe,WAAA,CAAYC,GAAG;IAC/B,MAAMG,QAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAWkB,OAAA,GAAUJ,SAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAE3BoB,OAAA,CAAQC,GAAG,CAAC,iBAAiBV,IAAA,KAASQ,QAAA,CAASG,OAAO,CAAC,MAAM;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAE7D,OAAOiB,MAAA;EACT,EAAE,OAAOM,KAAA,EAAO;IACd,MAAML,OAAA;IAAA;IAAA,CAAApB,cAAA,GAAAE,CAAA,QAAUe,WAAA,CAAYC,GAAG;IAC/B,MAAMG,QAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAWkB,OAAA,GAAUJ,SAAA;IAAA;IAAAhB,cAAA,GAAAE,CAAA;IAE3BoB,OAAA,CAAQG,KAAK,CAAC,iBAAiBZ,IAAA,aAAiBQ,QAAA,CAASG,OAAO,CAAC,MAAM;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACvE,MAAMuB,KAAA;EACR;AACF;AAEA;;;;;;AAMA,MAAMC,YAAA;EAIJC,YAAA,EAAsB;IAAA;IAAA3B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAFd0B,OAAA,GAA4D,CAAC;EAE9C;EAEvB,OAAcC,YAAA,EAA4B;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxC,IAAI,CAACwB,YAAA,CAAaI,QAAQ,EAAE;MAAA;MAAA9B,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC1BwB,YAAA,CAAaI,QAAQ,GAAG,IAAIJ,YAAA;IAC9B;IAAA;IAAA;MAAA1B,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,OAAOwB,YAAA,CAAaI,QAAQ;EAC9B;EAEOC,UAAUC,GAAW,EAAQ;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEZ,IAAI,CAAC,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,EAAE;MAAA;MAAAhC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACtB,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,GAAG;QAAEC,IAAA,EAAM;QAAGC,MAAA,EAAQ;MAAE;IAC3C;IAAA;IAAA;MAAAlC,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,CAACC,IAAI,IAAI;EAC5B;EAEOE,WAAWH,GAAW,EAAQ;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACnC,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEZ,IAAI,CAAC,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,EAAE;MAAA;MAAAhC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACtB,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,GAAG;QAAEC,IAAA,EAAM;QAAGC,MAAA,EAAQ;MAAE;IAC3C;IAAA;IAAA;MAAAlC,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,CAACE,MAAM,IAAI;EAC9B;EAEOE,YAAYJ,GAAW,EAAU;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACtC,IAAI,CAAC,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI,EAAE;MAAA;MAAAhC,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA,OAAO;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAE/B,MAAM;MAAEkB,IAAI;MAAEC;IAAM,CAAE;IAAA;IAAA,CAAAlC,cAAA,GAAAE,CAAA,QAAG,IAAI,CAAC0B,OAAO,CAACI,GAAA,CAAI;IAC1C,MAAMK,KAAA;IAAA;IAAA,CAAArC,cAAA,GAAAE,CAAA,QAAQ+B,IAAA,GAAOC,MAAA;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IACrB,OAAOmC,KAAA;IAAA;IAAA,CAAArC,cAAA,GAAAe,CAAA,UAAQkB,IAAA,GAAOI,KAAA;IAAA;IAAA,CAAArC,cAAA,GAAAe,CAAA,UAAQ;EAChC;EAEOuB,cAAA,EAAiF;IAAA;IAAAtC,cAAA,GAAAC,CAAA;IACtF,MAAMkB,MAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAA0E,CAAC;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAEjF,KAAK,MAAM,CAAC8B,GAAA,EAAK;MAAEC,IAAI;MAAEC;IAAM,CAAE,CAAC,IAAIK,MAAA,CAAOC,OAAO,CAAC,IAAI,CAACZ,OAAO,GAAG;MAClE,MAAMS,KAAA;MAAA;MAAA,CAAArC,cAAA,GAAAE,CAAA,QAAQ+B,IAAA,GAAOC,MAAA;MAAA;MAAAlC,cAAA,GAAAE,CAAA;MACrBiB,MAAM,CAACa,GAAA,CAAI,GAAG;QACZC,IAAA;QACAC,MAAA;QACAO,KAAA,EAAOJ,KAAA;QAAA;QAAA,CAAArC,cAAA,GAAAe,CAAA,UAAQkB,IAAA,GAAOI,KAAA;QAAA;QAAA,CAAArC,cAAA,GAAAe,CAAA,UAAQ;MAChC;IACF;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAOiB,MAAA;EACT;EAEOuB,aAAA,EAAqB;IAAA;IAAA1C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEZoB,OAAA,CAAQqB,KAAK,CAAC;IAAA;IAAA3C,cAAA,GAAAE,CAAA;IAEd,KAAK,MAAM,CAAC8B,GAAA,EAAK;MAAEC,IAAI;MAAEC,MAAM;MAAEO;IAAK,CAAE,CAAC,IAAIF,MAAA,CAAOC,OAAO,CAAC,IAAI,CAACF,aAAa,KAAK;MAAA;MAAAtC,cAAA,GAAAE,CAAA;MACjFoB,OAAA,CAAQC,GAAG,CACT,GAAGS,GAAA,KAAQ,CAACS,KAAA,GAAQ,GAAE,EAAGjB,OAAO,CAAC,kBAAkBS,IAAA,UAAcC,MAAA,UAAgB;IAErF;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IAEAoB,OAAA,CAAQsB,QAAQ;EAClB;EAEOC,aAAA,EAAqB;IAAA;IAAA7C,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC1B,IAAI,CAAC0B,OAAO,GAAG,CAAC;EAClB;AACF;AAEO,MAAM7B,YAAA;AAAA;AAAA,CAAAC,cAAA,GAAAE,CAAA,QAAewB,YAAA,CAAaG,WAAW;AAEpD;;;;;;AAMA,MAAMiB,iBAAA;EAKJnB,YAAA,EAAsB;IAAA;IAAA3B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAHd6C,cAAA,GAA4E,IAAIC,GAAA;IAAA;IAAAhD,cAAA,GAAAE,CAAA;SAChF+C,UAAA,GAAsE,EAAE;EAEzD;EAEvB,OAAcpB,YAAA,EAAiC;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC7C,IAAI,CAAC4C,iBAAA,CAAkBhB,QAAQ,EAAE;MAAA;MAAA9B,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAC/B4C,iBAAA,CAAkBhB,QAAQ,GAAG,IAAIgB,iBAAA;IACnC;IAAA;IAAA;MAAA9C,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,OAAO4C,iBAAA,CAAkBhB,QAAQ;EACnC;EAEOoB,aAAaC,EAAU,EAAEC,MAAA;EAAA;EAAA,CAAApD,cAAA,GAAAe,CAAA,WAAwB,IAAI,GAAQ;IAAA;IAAAf,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClE,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEZ,IAAI,CAAC6C,cAAc,CAACM,GAAG,CAACF,EAAA,EAAI;MAC1BnC,SAAA,EAAWC,WAAA,CAAYC,GAAG;MAC1BkC;IACF;EACF;EAEOE,WAAWH,EAAU,EAAQ;IAAA;IAAAnD,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAClC,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAEZ,MAAMwC,OAAA;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAU,IAAI,CAAC6C,cAAc,CAACS,GAAG,CAACL,EAAA;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IACxC,IAAI,CAACqD,OAAA,EAAS;MAAA;MAAAvD,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEd,IAAI,CAAC6C,cAAc,CAACU,MAAM,CAACN,EAAA;IAE3B;IAAA;IAAAnD,cAAA,GAAAE,CAAA;IACA,IAAIqD,OAAA,CAAQH,MAAM,EAAE;MAAA;MAAApD,cAAA,GAAAe,CAAA;MAClB,MAAM2C,aAAA;MAAA;MAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAgB,IAAI,CAAC6C,cAAc,CAACS,GAAG,CAACD,OAAA,CAAQH,MAAM;MAAA;MAAApD,cAAA,GAAAE,CAAA;MAC5D,IAAIwD,aAAA,EAAe;QAAA;QAAA1D,cAAA,GAAAe,CAAA;QACjB,MAAM4C,KAAA;QAAA;QAAA,CAAA3D,cAAA,GAAAE,CAAA,QAAQqD,OAAA,CAAQvC,SAAS,GAAG0C,aAAA,CAAc1C,SAAS;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QACzD,IAAIyD,KAAA,GAAQ,IAAI;UAAA;UAAA3D,cAAA,GAAAe,CAAA;UAAAf,cAAA,GAAAE,CAAA;UACd,IAAI,CAAC+C,UAAU,CAACW,IAAI,CAAC;YACnBR,MAAA,EAAQG,OAAA,CAAQH,MAAM;YACtBS,KAAA,EAAOV,EAAA;YACPQ;UACF;QACF;QAAA;QAAA;UAAA3D,cAAA,GAAAe,CAAA;QAAA;MACF;MAAA;MAAA;QAAAf,cAAA,GAAAe,CAAA;MAAA;IACF;IAAA;IAAA;MAAAf,cAAA,GAAAe,CAAA;IAAA;EACF;EAEO+C,cAAA,EAAyE;IAAA;IAAA9D,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC9E,OAAO,C,GAAI,IAAI,CAAC+C,UAAU,CAAC;EAC7B;EAEOc,gBAAA,EAAwB;IAAA;IAAA/D,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC7B;IAAI;IAAA,CAAAF,cAAA,GAAAe,CAAA,YAACN,KAAA;IAAA;IAAA,CAAAT,cAAA,GAAAe,CAAA,WAAS,IAAI,CAACkC,UAAU,CAACe,MAAM,KAAK,IAAG;MAAA;MAAAhE,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAE5CoB,OAAA,CAAQqB,KAAK,CAAC;IAAA;IAAA3C,cAAA,GAAAE,CAAA;IAEd,KAAK,MAAM;MAAEkD,MAAM;MAAES,KAAK;MAAEF;IAAK,CAAE,IAAI,IAAI,CAACV,UAAU,EAAE;MAAA;MAAAjD,cAAA,GAAAE,CAAA;MACtDoB,OAAA,CAAQ2C,IAAI,CACV,iCAAiCb,MAAA,OAAaS,KAAA,KAAUF,KAAA,CAAMnC,OAAO,CAAC,aAAa;IAEvF;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IAEAoB,OAAA,CAAQsB,QAAQ;EAClB;EAEOsB,gBAAA,EAAwB;IAAA;IAAAlE,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC7B,IAAI,CAAC+C,UAAU,GAAG,EAAE;EACtB;AACF;AAEO,MAAM1C,iBAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,QAAoB4C,iBAAA,CAAkBjB,WAAW;AAE9D;;;;;;AAMA,MAAMsC,oBAAA;EAKJxC,YAAA,EAAsB;IAAA;IAAA3B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;SAHdkE,WAAA,GAAsC,CAAC;IAAA;IAAApE,cAAA,GAAAE,CAAA;SACvCmE,UAAA,GAAqC,CAAC;EAEvB;EAEvB,OAAcxC,YAAA,EAAoC;IAAA;IAAA7B,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAChD,IAAI,CAACiE,oBAAA,CAAqBrC,QAAQ,EAAE;MAAA;MAAA9B,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAClCiE,oBAAA,CAAqBrC,QAAQ,GAAG,IAAIqC,oBAAA;IACtC;IAAA;IAAA;MAAAnE,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IACA,OAAOiE,oBAAA,CAAqBrC,QAAQ;EACtC;EAEOwC,YAAYtC,GAAW,EAAQ;IAAA;IAAAhC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACpC,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEZ,IAAI,CAACkE,WAAW,CAACpC,GAAA,CAAI,GAAG;IAAC;IAAA,CAAAhC,cAAA,GAAAe,CAAA,eAAI,CAACqD,WAAW,CAACpC,GAAA,CAAI;IAAA;IAAA,CAAAhC,cAAA,GAAAe,CAAA,WAAI,MAAK;EACzD;EAEOwD,aAAavC,GAAW,EAAEwC,SAAiB,EAAQ;IAAA;IAAAxE,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACxD,IAAI,CAACmE,UAAU,CAACrC,GAAA,CAAI,GAAGwC,SAAA;EACzB;EAEOC,mBAAA,EAA+E;IAAA;IAAAzE,cAAA,GAAAC,CAAA;IACpF,MAAMkB,MAAA;IAAA;IAAA,CAAAnB,cAAA,GAAAE,CAAA,QAAmE,EAAE;IAAA;IAAAF,cAAA,GAAAE,CAAA;IAE3E,KAAK,MAAM,CAAC8B,GAAA,EAAK0C,KAAA,CAAM,IAAInC,MAAA,CAAOC,OAAO,CAAC,IAAI,CAAC4B,WAAW,GAAG;MAC3D,MAAMI,SAAA;MAAA;MAAA,CAAAxE,cAAA,GAAAE,CAAA;MAAY;MAAA,CAAAF,cAAA,GAAAe,CAAA,eAAI,CAACsD,UAAU,CAACrC,GAAA,CAAI;MAAA;MAAA,CAAAhC,cAAA,GAAAe,CAAA,WAAI,KAAG;MAAA;MAAAf,cAAA,GAAAE,CAAA;MAC7C,IAAIwE,KAAA,GAAQF,SAAA,EAAW;QAAA;QAAAxE,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QACrBiB,MAAA,CAAOyC,IAAI,CAAC;UAAE5B,GAAA;UAAK0C,KAAA;UAAOF;QAAU;MACtC;MAAA;MAAA;QAAAxE,cAAA,GAAAe,CAAA;MAAA;IACF;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,OAAOiB,MAAA;EACT;EAEOwD,cAAA,EAAsB;IAAA;IAAA3E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IAC3B,IAAI,CAACO,KAAA,EAAO;MAAA;MAAAT,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAEZ,MAAM6D,WAAA;IAAA;IAAA,CAAA5E,cAAA,GAAAE,CAAA,SAAc,IAAI,CAACuE,kBAAkB;IAAA;IAAAzE,cAAA,GAAAE,CAAA;IAC3C,IAAI0E,WAAA,CAAYZ,MAAM,KAAK,GAAG;MAAA;MAAAhE,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MAAA;IAAA;IAAA;IAAA;MAAAF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAE9BoB,OAAA,CAAQqB,KAAK,CAAC;IAAA;IAAA3C,cAAA,GAAAE,CAAA;IAEd,KAAK,MAAM;MAAE8B,GAAG;MAAE0C,KAAK;MAAEF;IAAS,CAAE,IAAII,WAAA,EAAa;MAAA;MAAA5E,cAAA,GAAAE,CAAA;MACnDoB,OAAA,CAAQ2C,IAAI,CACV,qCAAqCjC,GAAA,KAAQ0C,KAAA,wBAA6BF,SAAA,GAAY;IAE1F;IAAA;IAAAxE,cAAA,GAAAE,CAAA;IAEAoB,OAAA,CAAQsB,QAAQ;EAClB;EAEOiC,YAAA,EAAoB;IAAA;IAAA7E,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACzB,IAAI,CAACkE,WAAW,GAAG,CAAC;EACtB;AACF;AAEO,MAAM9D,oBAAA;AAAA;AAAA,CAAAN,cAAA,GAAAE,CAAA,SAAuBiE,oBAAA,CAAqBtC,WAAW;AAQ7D,SAASzB,0BAAA;EAAA;EAAAJ,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACd,IAAI,CAACO,KAAA,EAAO;IAAA;IAAAT,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAE,CAAA;IAAA;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAe,CAAA;EAAA;EAAAf,cAAA,GAAAE,CAAA;EAEZoB,OAAA,CAAQqB,KAAK,CAAC;EAEd;EAAA;EAAA3C,cAAA,GAAAE,CAAA;EACAH,YAAA,CAAa2C,YAAY;EAEzB;EAAA;EAAA1C,cAAA,GAAAE,CAAA;EACAK,iBAAA,CAAkBwD,eAAe;EAEjC;EAAA;EAAA/D,cAAA,GAAAE,CAAA;EACAI,oBAAA,CAAqBqE,aAAa;EAAA;EAAA3E,cAAA,GAAAE,CAAA;EAElCoB,OAAA,CAAQsB,QAAQ;AAClB;AAOO,SAASzC,wBAAA;EAAA;EAAAH,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACdH,YAAA,CAAa8C,YAAY;EAAA;EAAA7C,cAAA,GAAAE,CAAA;EACzBK,iBAAA,CAAkB2D,eAAe;EAAA;EAAAlE,cAAA,GAAAE,CAAA;EACjCI,oBAAA,CAAqBuE,WAAW;AAClC;AAGO,SAASrE,wBACdsE,SAA2B,EAC3BC,OAIC;EAAA;EAAA/E,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAED,IAAI,CAACO,KAAA,EAAO;IAAA;IAAAT,cAAA,GAAAe,CAAA;IAAAf,cAAA,GAAAE,CAAA;IACV,OAAO4E,SAAA;EACT;EAAA;EAAA;IAAA9E,cAAA,GAAAe,CAAA;EAAA;EAAAf,cAAA,GAAAE,CAAA;EAEA,OAAO;IAAA;IAAAF,cAAA,GAAAC,CAAA;IACL,MAAM;MAAEY,IAAI;MAAEuC,MAAM;MAAE4B;IAAQ,CAAE;IAAA;IAAA,CAAAhF,cAAA,GAAAE,CAAA,SAAG6E,OAAA;IAAA;IAAA/E,cAAA,GAAAE,CAAA;IAEnC,IAAIkD,MAAA,EAAQ;MAAA;MAAApD,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACVK,iBAAA,CAAkB2C,YAAY,CAACrC,IAAA,EAAMuC,MAAA;IACvC;IAAA;IAAA;MAAApD,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,IAAI8E,QAAA,EAAU;MAAA;MAAAhF,cAAA,GAAAe,CAAA;MAAAf,cAAA,GAAAE,CAAA;MACZI,oBAAA,CAAqBgE,WAAW,CAACU,QAAA;IACnC;IAAA;IAAA;MAAAhF,cAAA,GAAAe,CAAA;IAAA;IAAAf,cAAA,GAAAE,CAAA;IAEA,IAAI;MACF,MAAMiB,MAAA;MAAA;MAAA,CAAAnB,cAAA,GAAAE,CAAA,SAAS,MAAMG,kBAAA,CAAmBQ,IAAA,EAAMiE,SAAA;MAAA;MAAA9E,cAAA,GAAAE,CAAA;MAC9C,OAAOiB,MAAA;IACT,UAAU;MAAA;MAAAnB,cAAA,GAAAE,CAAA;MACR,IAAIkD,MAAA,EAAQ;QAAA;QAAApD,cAAA,GAAAe,CAAA;QAAAf,cAAA,GAAAE,CAAA;QACVK,iBAAA,CAAkB+C,UAAU,CAACzC,IAAA;MAC/B;MAAA;MAAA;QAAAb,cAAA,GAAAe,CAAA;MAAA;IACF;EACF;AACF","ignoreList":[]}