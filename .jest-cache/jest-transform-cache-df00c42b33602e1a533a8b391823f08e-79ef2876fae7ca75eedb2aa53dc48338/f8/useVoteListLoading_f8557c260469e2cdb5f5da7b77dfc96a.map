{"version":3,"names":["cov_28592ln9h2","actualCoverage","s","useVoteListLoading","minLoadingTime","b","maxLoadingTime","f","searchParams","_navigation","useSearchParams","isLoading","setIsLoading","_react","useState","loadingStartTime","setLoadingStartTime","currentFilters","status","get","area","useEffect","timeoutId","startLoading","Date","now","setTimeout","clearTimeout","triggerLoading","useCallback","completeLoading","startTime","elapsed","remainingTime"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteListLoading.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { VoteStatus, VoteArea } from '@/stores/voteFilterStore';\n\ninterface UseVoteListLoadingOptions {\n  /** 로딩 지연 시간 (ms) - 너무 빨리 끝나는 경우 깜빡임 방지 */\n  minLoadingTime?: number;\n  /** 실제 데이터 로딩 완료까지의 최대 대기 시간 (ms) */\n  maxLoadingTime?: number;\n}\n\ninterface UseVoteListLoadingReturn {\n  /** 현재 로딩 상태 */\n  isLoading: boolean;\n  /** 필터 변화를 수동으로 트리거 */\n  triggerLoading: () => void;\n  /** 로딩 완료 수동 트리거 */\n  completeLoading: () => void;\n  /** 현재 필터 상태 */\n  currentFilters: {\n    status: VoteStatus;\n    area: VoteArea;\n  };\n}\n\n/**\n * 투표 리스트의 필터 변화 시 로딩 상태를 관리하는 훅\n * \n * @example\n * ```tsx\n * const { isLoading, currentFilters } = useVoteListLoading();\n * \n * return (\n *   <div>\n *     {isLoading ? <VoteListSkeleton /> : <VoteList />}\n *   </div>\n * );\n * ```\n */\nexport function useVoteListLoading({\n  minLoadingTime = 500,\n  maxLoadingTime = 2000,\n}: UseVoteListLoadingOptions = {}): UseVoteListLoadingReturn {\n  const searchParams = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingStartTime, setLoadingStartTime] = useState<number | null>(null);\n\n  // URL 파라미터에서 현재 필터 상태 추출\n  const currentFilters = {\n    status: (searchParams.get('status') as VoteStatus) || 'ongoing',\n    area: (searchParams.get('area') as VoteArea) || 'all',\n  };\n\n  // 필터 변화 감지\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n\n    const startLoading = () => {\n      setIsLoading(true);\n      setLoadingStartTime(Date.now());\n\n      // 최대 대기 시간 후 자동 완료\n      timeoutId = setTimeout(() => {\n        setIsLoading(false);\n        setLoadingStartTime(null);\n      }, maxLoadingTime);\n    };\n\n    // 필터 변화가 있으면 로딩 시작\n    startLoading();\n\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [currentFilters.status, currentFilters.area, maxLoadingTime]);\n\n  // 수동 로딩 트리거\n  const triggerLoading = useCallback(() => {\n    setIsLoading(true);\n    setLoadingStartTime(Date.now());\n\n    const timeoutId = setTimeout(() => {\n      setIsLoading(false);\n      setLoadingStartTime(null);\n    }, maxLoadingTime);\n\n    return () => clearTimeout(timeoutId);\n  }, [maxLoadingTime]);\n\n  // 수동 로딩 완료\n  const completeLoading = useCallback(() => {\n    const now = Date.now();\n    const startTime = loadingStartTime;\n\n    if (!startTime) {\n      setIsLoading(false);\n      return;\n    }\n\n    const elapsed = now - startTime;\n    \n    if (elapsed >= minLoadingTime) {\n      // 최소 시간이 지났으면 즉시 완료\n      setIsLoading(false);\n      setLoadingStartTime(null);\n    } else {\n      // 최소 시간까지 대기 후 완료\n      const remainingTime = minLoadingTime - elapsed;\n      setTimeout(() => {\n        setIsLoading(false);\n        setLoadingStartTime(null);\n      }, remainingTime);\n    }\n  }, [loadingStartTime, minLoadingTime]);\n\n  return {\n    isLoading,\n    triggerLoading,\n    completeLoading,\n    currentFilters,\n  };\n} "],"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","ignoreList":[]}