{"version":3,"names":["cov_1z7hu2nlfb","actualCoverage","s","useBanner","f","banners","setBanners","_react","useState","isLoading","setIsLoading","error","setError","fetchBanners","useCallback","data","_queries","getBanners","err","console","useEffect","refetch"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useBanner.ts"],"sourcesContent":["'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Banner } from '@/types/interfaces';\nimport { getBanners } from '@/utils/api/queries';\n\ninterface UseBannerReturn {\n  banners: Banner[];\n  isLoading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * 배너 데이터를 관리하는 단순화된 훅\n */\nexport function useBanner(): UseBannerReturn {\n  const [banners, setBanners] = useState<Banner[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchBanners = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const data = await getBanners();\n      setBanners(data);\n    } catch (err) {\n      console.error('배너 데이터 로드 오류:', err);\n      setError('배너를 불러오는 중 오류가 발생했습니다.');\n      setBanners([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  // 초기 로드\n  useEffect(() => {\n    fetchBanners();\n  }, [fetchBanners]);\n\n  return {\n    banners,\n    isLoading,\n    error,\n    refetch: fetchBanners,\n  };\n} "],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBS;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAFO;;;;;;WAAAC,SAAA;;;;;kCAdiC;;;kCAEtB;AAYpB,SAASA,UAAA;EAAA;EAAAH,cAAA,GAAAI,CAAA;EACd,MAAM,CAACC,OAAA,EAASC,UAAA,CAAW;EAAA;EAAA,CAAAN,cAAA,GAAAE,CAAA,OAAG,IAAAK,MAAA,CAAAC,QAAQ,EAAW,EAAE;EACnD,MAAM,CAACC,SAAA,EAAWC,YAAA,CAAa;EAAA;EAAA,CAAAV,cAAA,GAAAE,CAAA,OAAG,IAAAK,MAAA,CAAAC,QAAQ,EAAC;EAC3C,MAAM,CAACG,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAZ,cAAA,GAAAE,CAAA,OAAG,IAAAK,MAAA,CAAAC,QAAQ,EAAgB;EAElD,MAAMK,YAAA;EAAA;EAAA,CAAAb,cAAA,GAAAE,CAAA,OAAe,IAAAK,MAAA,CAAAO,WAAW,EAAC;IAAA;IAAAd,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IAC/B,IAAI;MAAA;MAAAF,cAAA,GAAAE,CAAA;MACFQ,YAAA,CAAa;MAAA;MAAAV,cAAA,GAAAE,CAAA;MACbU,QAAA,CAAS;MAET,MAAMG,IAAA;MAAA;MAAA,CAAAf,cAAA,GAAAE,CAAA,QAAO,MAAM,IAAAc,QAAA,CAAAC,UAAU;MAAA;MAAAjB,cAAA,GAAAE,CAAA;MAC7BI,UAAA,CAAWS,IAAA;IACb,EAAE,OAAOG,GAAA,EAAK;MAAA;MAAAlB,cAAA,GAAAE,CAAA;MACZiB,OAAA,CAAQR,KAAK,CAAC,iBAAiBO,GAAA;MAAA;MAAAlB,cAAA,GAAAE,CAAA;MAC/BU,QAAA,CAAS;MAAA;MAAAZ,cAAA,GAAAE,CAAA;MACTI,UAAA,CAAW,EAAE;IACf,UAAU;MAAA;MAAAN,cAAA,GAAAE,CAAA;MACRQ,YAAA,CAAa;IACf;EACF,GAAG,EAAE;EAEL;EAAA;EAAAV,cAAA,GAAAE,CAAA;EACA,IAAAK,MAAA,CAAAa,SAAS,EAAC;IAAA;IAAApB,cAAA,GAAAI,CAAA;IAAAJ,cAAA,GAAAE,CAAA;IACRW,YAAA;EACF,GAAG,CAACA,YAAA,CAAa;EAAA;EAAAb,cAAA,GAAAE,CAAA;EAEjB,OAAO;IACLG,OAAA;IACAI,SAAA;IACAE,KAAA;IACAU,OAAA,EAASR;EACX;AACF","ignoreList":[]}