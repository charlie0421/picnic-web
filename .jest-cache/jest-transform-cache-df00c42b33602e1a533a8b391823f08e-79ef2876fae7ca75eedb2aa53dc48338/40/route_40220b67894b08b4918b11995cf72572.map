{"version":3,"names":["cov_2o7bo0xovv","actualCoverage","s","POST","PAYPAL_API_URL","process","env","PAYPAL_ENV","b","PAYPAL_CLIENT_ID","PAYPAL_CLIENT_SECRET","getPayPalAccessToken","f","auth","Buffer","from","toString","response","fetch","method","headers","body","data","json","ok","Error","access_token","request","supabase","_server1","createServerSupabaseClient","user","error","authError","getUser","_server","NextResponse","status","orderID","accessToken","captureData","console","purchaseUnit","purchase_units","customData","JSON","parse","custom_id","productId","starCandy","bonusAmount","existingReceipt","select","eq","single","receiptData","order_id","capture_id","id","amount","value","currency","currency_code","payer_email","payer","email_address","payment_details","receipt","receiptError","insert","user_id","product_id","receipt_data","stringify","receipt_hash","platform","environment","verification_data","currentProfile","profileError","update","star_candy","transactionId","historyError","type","transaction_id","expiryDate","Date","setMonth","getMonth","setDate","bonusError","remain_amount","expired_dt","toISOString","profileForBonus","bonusUpdateError","star_candy_bonus","success","receipt_id","message"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/payment/paypal/capture-order/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\n\nconst PAYPAL_API_URL = process.env.PAYPAL_ENV === 'production' \n  ? 'https://api-m.paypal.com' \n  : 'https://api-m.sandbox.paypal.com';\n\nconst PAYPAL_CLIENT_ID = process.env.PAYPAL_CLIENT_ID || '';\nconst PAYPAL_CLIENT_SECRET = process.env.PAYPAL_CLIENT_SECRET || '';\n\n// Get PayPal access token\nasync function getPayPalAccessToken(): Promise<string> {\n  const auth = Buffer.from(`${PAYPAL_CLIENT_ID}:${PAYPAL_CLIENT_SECRET}`).toString('base64');\n  \n  const response = await fetch(`${PAYPAL_API_URL}/v1/oauth2/token`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Basic ${auth}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: 'grant_type=client_credentials',\n  });\n\n  const data = await response.json();\n  \n  if (!response.ok) {\n    throw new Error('Failed to get PayPal access token');\n  }\n\n  return data.access_token;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createServerSupabaseClient();\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { orderID } = body;\n\n    if (!orderID) {\n      return NextResponse.json(\n        { error: 'Order ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Get PayPal access token\n    const accessToken = await getPayPalAccessToken();\n\n    // Capture the order\n    const response = await fetch(`${PAYPAL_API_URL}/v2/checkout/orders/${orderID}/capture`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${accessToken}`,\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const captureData = await response.json();\n\n    if (!response.ok) {\n      console.error('PayPal capture failed:', captureData);\n      return NextResponse.json(\n        { error: 'Failed to capture PayPal order' },\n        { status: 500 }\n      );\n    }\n\n    // Verify the payment was successful\n    if (captureData.status !== 'COMPLETED') {\n      return NextResponse.json(\n        { error: 'Payment not completed' },\n        { status: 400 }\n      );\n    }\n\n    // Extract custom data\n    const purchaseUnit = captureData.purchase_units[0];\n    const customData = JSON.parse(purchaseUnit.custom_id || '{}');\n    const { productId, starCandy, bonusAmount } = customData;\n\n    // Check if receipt already exists\n    const { data: existingReceipt } = await supabase\n      .from('receipts')\n      .select('id')\n      .eq('receipt_hash', orderID)\n      .single();\n\n    if (existingReceipt) {\n      return NextResponse.json(\n        { error: 'Payment already processed' },\n        { status: 400 }\n      );\n    }\n\n    // Create receipt data\n    const receiptData = {\n      order_id: orderID,\n      capture_id: captureData.id,\n      amount: purchaseUnit.amount.value,\n      currency: purchaseUnit.amount.currency_code,\n      status: captureData.status,\n      payer_email: captureData.payer?.email_address,\n      payment_details: captureData,\n    };\n\n    // Create receipt\n    const { data: receipt, error: receiptError } = await supabase\n      .from('receipts')\n      .insert({\n        user_id: user.id,\n        product_id: productId,\n        receipt_data: JSON.stringify(receiptData),\n        receipt_hash: orderID,\n        status: 'completed',\n        platform: 'web',\n        environment: process.env.PAYPAL_ENV === 'production' ? 'production' : 'sandbox',\n        verification_data: captureData,\n      })\n      .select()\n      .single();\n\n    if (receiptError) {\n      console.error('Failed to create receipt:', receiptError);\n      return NextResponse.json(\n        { error: 'Failed to record payment' },\n        { status: 500 }\n      );\n    }\n\n    // Update user profile star candy balance\n    const { data: currentProfile } = await supabase\n      .from('user_profiles')\n      .select('star_candy')\n      .eq('id', user.id)\n      .single();\n\n    if (currentProfile) {\n      const { error: profileError } = await supabase\n        .from('user_profiles')\n        .update({\n          star_candy: (currentProfile.star_candy || 0) + starCandy,\n        })\n        .eq('id', user.id);\n\n      if (profileError) {\n        console.error('Failed to update user profile:', profileError);\n      }\n    }\n\n    // Record star candy history\n    const transactionId = `PAYPAL_${orderID}`;\n    const { error: historyError } = await supabase\n      .from('star_candy_history')\n      .insert({\n        user_id: user.id,\n        amount: starCandy,\n        type: 'PURCHASE',\n        transaction_id: transactionId,\n      });\n\n    if (historyError) {\n      console.error('Failed to record star candy history:', historyError);\n    }\n\n    // Record bonus if applicable\n    if (bonusAmount > 0) {\n      const expiryDate = new Date();\n      expiryDate.setMonth(expiryDate.getMonth() + 1); // Next month\n      expiryDate.setDate(15); // 15th of next month\n\n      const { error: bonusError } = await supabase\n        .from('star_candy_bonus_history')\n        .insert({\n          user_id: user.id,\n          amount: bonusAmount,\n          remain_amount: bonusAmount,\n          type: 'PURCHASE',\n          transaction_id: transactionId,\n          expired_dt: expiryDate.toISOString(),\n        });\n\n      if (bonusError) {\n        console.error('Failed to record bonus:', bonusError);\n      }\n\n      // Also update user's bonus balance\n      const { data: profileForBonus } = await supabase\n        .from('user_profiles')\n        .select('star_candy_bonus')\n        .eq('id', user.id)\n        .single();\n\n      if (profileForBonus) {\n        const { error: bonusUpdateError } = await supabase\n          .from('user_profiles')\n          .update({\n            star_candy_bonus: (profileForBonus.star_candy_bonus || 0) + bonusAmount,\n          })\n          .eq('id', user.id);\n\n        if (bonusUpdateError) {\n          console.error('Failed to update bonus balance:', bonusUpdateError);\n        }\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      receipt_id: receipt.id,\n      message: 'Payment captured and processed successfully',\n    });\n\n  } catch (error) {\n    console.error('Capture order error:', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"mappingscAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BAsBsB;;;;;;WAAAC,IAAA;;;;;kCAhCoB;;;kCACC;AAE3C,MAAMC,cAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAE,CAAA,OAAiBG,OAAA,CAAQC,GAAG,CAACC,UAAU,KAAK;AAAA;AAAA,CAAAP,cAAA,GAAAQ,CAAA,UAC9C;AAAA;AAAA,CAAAR,cAAA,GAAAQ,CAAA,UACA;AAEJ,MAAMC,gBAAA;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA;AAAmB;AAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAH,OAAA,CAAQC,GAAG,CAACG,gBAAgB;AAAA;AAAA,CAAAT,cAAA,GAAAQ,CAAA,UAAI;AACzD,MAAME,oBAAA;AAAA;AAAA,CAAAV,cAAA,GAAAE,CAAA;AAAuB;AAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAH,OAAA,CAAQC,GAAG,CAACI,oBAAoB;AAAA;AAAA,CAAAV,cAAA,GAAAQ,CAAA,UAAI;AAEjE;AACA,eAAeG,qBAAA;EAAA;EAAAX,cAAA,GAAAY,CAAA;EACb,MAAMC,IAAA;EAAA;EAAA,CAAAb,cAAA,GAAAE,CAAA,OAAOY,MAAA,CAAOC,IAAI,CAAC,GAAGN,gBAAA,IAAoBC,oBAAA,EAAsB,EAAEM,QAAQ,CAAC;EAEjF,MAAMC,QAAA;EAAA;EAAA,CAAAjB,cAAA,GAAAE,CAAA,OAAW,MAAMgB,KAAA,CAAM,GAAGd,cAAA,kBAAgC,EAAE;IAChEe,MAAA,EAAQ;IACRC,OAAA,EAAS;MACP,iBAAiB,SAASP,IAAA,EAAM;MAChC,gBAAgB;IAClB;IACAQ,IAAA,EAAM;EACR;EAEA,MAAMC,IAAA;EAAA;EAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAO,MAAMe,QAAA,CAASM,IAAI;EAAA;EAAAvB,cAAA,GAAAE,CAAA;EAEhC,IAAI,CAACe,QAAA,CAASO,EAAE,EAAE;IAAA;IAAAxB,cAAA,GAAAQ,CAAA;IAAAR,cAAA,GAAAE,CAAA;IAChB,MAAM,IAAIuB,KAAA,CAAM;EAClB;EAAA;EAAA;IAAAzB,cAAA,GAAAQ,CAAA;EAAA;EAAAR,cAAA,GAAAE,CAAA;EAEA,OAAOoB,IAAA,CAAKI,YAAY;AAC1B;AAEO,eAAevB,KAAKwB,OAAoB;EAAA;EAAA3B,cAAA,GAAAY,CAAA;EAAAZ,cAAA,GAAAE,CAAA;EAC7C,IAAI;IACF,MAAM0B,QAAA;IAAA;IAAA,CAAA5B,cAAA,GAAAE,CAAA,QAAW,MAAM,IAAA2B,QAAA,CAAAC,0BAA0B;IAEjD;IACA,MAAM;MAAER,IAAA,EAAM;QAAES;MAAI,CAAE;MAAEC,KAAA,EAAOC;IAAS,CAAE;IAAA;IAAA,CAAAjC,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CAASf,IAAI,CAACqB,OAAO;IAAA;IAAAlC,cAAA,GAAAE,CAAA;IACxE;IAAI;IAAA,CAAAF,cAAA,GAAAQ,CAAA,UAAAyB,SAAA;IAAA;IAAA,CAAAjC,cAAA,GAAAQ,CAAA,UAAa,CAACuB,IAAA,GAAM;MAAA;MAAA/B,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACtB,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAAe,GACxB;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA,MAAMa,IAAA;IAAA;IAAA,CAAArB,cAAA,GAAAE,CAAA,QAAO,MAAMyB,OAAA,CAAQJ,IAAI;IAC/B,MAAM;MAAEe;IAAO,CAAE;IAAA;IAAA,CAAAtC,cAAA,GAAAE,CAAA,QAAGmB,IAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAEpB,IAAI,CAACoC,OAAA,EAAS;MAAA;MAAAtC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACZ,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAAuB,GAChC;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAM+B,WAAA;IAAA;IAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAc,MAAMS,oBAAA;IAE1B;IACA,MAAMM,QAAA;IAAA;IAAA,CAAAjB,cAAA,GAAAE,CAAA,QAAW,MAAMgB,KAAA,CAAM,GAAGd,cAAA,uBAAqCkC,OAAA,UAAiB,EAAE;MACtFnB,MAAA,EAAQ;MACRC,OAAA,EAAS;QACP,iBAAiB,UAAUmB,WAAA,EAAa;QACxC,gBAAgB;MAClB;IACF;IAEA,MAAMC,WAAA;IAAA;IAAA,CAAAxC,cAAA,GAAAE,CAAA,QAAc,MAAMe,QAAA,CAASM,IAAI;IAAA;IAAAvB,cAAA,GAAAE,CAAA;IAEvC,IAAI,CAACe,QAAA,CAASO,EAAE,EAAE;MAAA;MAAAxB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAChBuC,OAAA,CAAQT,KAAK,CAAC,0BAA0BQ,WAAA;MAAA;MAAAxC,cAAA,GAAAE,CAAA;MACxC,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAAiC,GAC1C;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IAAAR,cAAA,GAAAE,CAAA;IACA,IAAIsC,WAAA,CAAYH,MAAM,KAAK,aAAa;MAAA;MAAArC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACtC,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAAwB,GACjC;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAMkC,YAAA;IAAA;IAAA,CAAA1C,cAAA,GAAAE,CAAA,QAAesC,WAAA,CAAYG,cAAc,CAAC,EAAE;IAClD,MAAMC,UAAA;IAAA;IAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAa2C,IAAA,CAAKC,KAAK;IAAC;IAAA,CAAA9C,cAAA,GAAAQ,CAAA,UAAAkC,YAAA,CAAaK,SAAS;IAAA;IAAA,CAAA/C,cAAA,GAAAQ,CAAA,UAAI;IACxD,MAAM;MAAEwC,SAAS;MAAEC,SAAS;MAAEC;IAAW,CAAE;IAAA;IAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAG0C,UAAA;IAE9C;IACA,MAAM;MAAEtB,IAAA,EAAM6B;IAAe,CAAE;IAAA;IAAA,CAAAnD,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACrCb,IAAI,CAAC,YACLqC,MAAM,CAAC,MACPC,EAAE,CAAC,gBAAgBf,OAAA,EACnBgB,MAAM;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IAET,IAAIiD,eAAA,EAAiB;MAAA;MAAAnD,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACnB,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAA4B,GACrC;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAM+C,WAAA;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAc;MAClBsD,QAAA,EAAUlB,OAAA;MACVmB,UAAA,EAAYjB,WAAA,CAAYkB,EAAE;MAC1BC,MAAA,EAAQjB,YAAA,CAAaiB,MAAM,CAACC,KAAK;MACjCC,QAAA,EAAUnB,YAAA,CAAaiB,MAAM,CAACG,aAAa;MAC3CzB,MAAA,EAAQG,WAAA,CAAYH,MAAM;MAC1B0B,WAAA,EAAavB,WAAA,CAAYwB,KAAK,EAAEC,aAAA;MAChCC,eAAA,EAAiB1B;IACnB;IAEA;IACA,MAAM;MAAElB,IAAA,EAAM6C,OAAO;MAAEnC,KAAA,EAAOoC;IAAY,CAAE;IAAA;IAAA,CAAApE,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CAClDb,IAAI,CAAC,YACLsD,MAAM,CAAC;MACNC,OAAA,EAASvC,IAAA,CAAK2B,EAAE;MAChBa,UAAA,EAAYvB,SAAA;MACZwB,YAAA,EAAc3B,IAAA,CAAK4B,SAAS,CAAClB,WAAA;MAC7BmB,YAAA,EAAcpC,OAAA;MACdD,MAAA,EAAQ;MACRsC,QAAA,EAAU;MACVC,WAAA,EAAavE,OAAA,CAAQC,GAAG,CAACC,UAAU,KAAK;MAAA;MAAA,CAAAP,cAAA,GAAAQ,CAAA,WAAe;MAAA;MAAA,CAAAR,cAAA,GAAAQ,CAAA,WAAe;MACtEqE,iBAAA,EAAmBrC;IACrB,GACCY,MAAM,GACNE,MAAM;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IAET,IAAIkE,YAAA,EAAc;MAAA;MAAApE,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAChBuC,OAAA,CAAQT,KAAK,CAAC,6BAA6BoC,YAAA;MAAA;MAAApE,cAAA,GAAAE,CAAA;MAC3C,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;QAAES,KAAA,EAAO;MAA2B,GACpC;QAAEK,MAAA,EAAQ;MAAI;IAElB;IAAA;IAAA;MAAArC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAM;MAAEc,IAAA,EAAMwD;IAAc,CAAE;IAAA;IAAA,CAAA9E,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACpCb,IAAI,CAAC,iBACLqC,MAAM,CAAC,cACPC,EAAE,CAAC,MAAMtB,IAAA,CAAK2B,EAAE,EAChBJ,MAAM;IAAA;IAAAtD,cAAA,GAAAE,CAAA;IAET,IAAI4E,cAAA,EAAgB;MAAA;MAAA9E,cAAA,GAAAQ,CAAA;MAClB,MAAM;QAAEwB,KAAA,EAAO+C;MAAY,CAAE;MAAA;MAAA,CAAA/E,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACnCb,IAAI,CAAC,iBACLiE,MAAM,CAAC;QACNC,UAAA,EAAY;QAAC;QAAA,CAAAjF,cAAA,GAAAQ,CAAA,WAAAsE,cAAA,CAAeG,UAAU;QAAA;QAAA,CAAAjF,cAAA,GAAAQ,CAAA,WAAI,MAAKyC;MACjD,GACCI,EAAE,CAAC,MAAMtB,IAAA,CAAK2B,EAAE;MAAA;MAAA1D,cAAA,GAAAE,CAAA;MAEnB,IAAI6E,YAAA,EAAc;QAAA;QAAA/E,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAChBuC,OAAA,CAAQT,KAAK,CAAC,kCAAkC+C,YAAA;MAClD;MAAA;MAAA;QAAA/E,cAAA,GAAAQ,CAAA;MAAA;IACF;IAAA;IAAA;MAAAR,cAAA,GAAAQ,CAAA;IAAA;IAEA;IACA,MAAM0E,aAAA;IAAA;IAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAgB,UAAUoC,OAAA,EAAS;IACzC,MAAM;MAAEN,KAAA,EAAOmD;IAAY,CAAE;IAAA;IAAA,CAAAnF,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACnCb,IAAI,CAAC,sBACLsD,MAAM,CAAC;MACNC,OAAA,EAASvC,IAAA,CAAK2B,EAAE;MAChBC,MAAA,EAAQV,SAAA;MACRmC,IAAA,EAAM;MACNC,cAAA,EAAgBH;IAClB;IAAA;IAAAlF,cAAA,GAAAE,CAAA;IAEF,IAAIiF,YAAA,EAAc;MAAA;MAAAnF,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAChBuC,OAAA,CAAQT,KAAK,CAAC,wCAAwCmD,YAAA;IACxD;IAAA;IAAA;MAAAnF,cAAA,GAAAQ,CAAA;IAAA;IAEA;IAAAR,cAAA,GAAAE,CAAA;IACA,IAAIgD,WAAA,GAAc,GAAG;MAAA;MAAAlD,cAAA,GAAAQ,CAAA;MACnB,MAAM8E,UAAA;MAAA;MAAA,CAAAtF,cAAA,GAAAE,CAAA,QAAa,IAAIqF,IAAA;MAAA;MAAAvF,cAAA,GAAAE,CAAA;MACvBoF,UAAA,CAAWE,QAAQ,CAACF,UAAA,CAAWG,QAAQ,KAAK,IAAI;MAAA;MAAAzF,cAAA,GAAAE,CAAA;MAChDoF,UAAA,CAAWI,OAAO,CAAC,KAAK;MAExB,MAAM;QAAE1D,KAAA,EAAO2D;MAAU,CAAE;MAAA;MAAA,CAAA3F,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACjCb,IAAI,CAAC,4BACLsD,MAAM,CAAC;QACNC,OAAA,EAASvC,IAAA,CAAK2B,EAAE;QAChBC,MAAA,EAAQT,WAAA;QACR0C,aAAA,EAAe1C,WAAA;QACfkC,IAAA,EAAM;QACNC,cAAA,EAAgBH,aAAA;QAChBW,UAAA,EAAYP,UAAA,CAAWQ,WAAW;MACpC;MAAA;MAAA9F,cAAA,GAAAE,CAAA;MAEF,IAAIyF,UAAA,EAAY;QAAA;QAAA3F,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACduC,OAAA,CAAQT,KAAK,CAAC,2BAA2B2D,UAAA;MAC3C;MAAA;MAAA;QAAA3F,cAAA,GAAAQ,CAAA;MAAA;MAEA;MACA,MAAM;QAAEc,IAAA,EAAMyE;MAAe,CAAE;MAAA;MAAA,CAAA/F,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACrCb,IAAI,CAAC,iBACLqC,MAAM,CAAC,oBACPC,EAAE,CAAC,MAAMtB,IAAA,CAAK2B,EAAE,EAChBJ,MAAM;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MAET,IAAI6F,eAAA,EAAiB;QAAA;QAAA/F,cAAA,GAAAQ,CAAA;QACnB,MAAM;UAAEwB,KAAA,EAAOgE;QAAgB,CAAE;QAAA;QAAA,CAAAhG,cAAA,GAAAE,CAAA,QAAG,MAAM0B,QAAA,CACvCb,IAAI,CAAC,iBACLiE,MAAM,CAAC;UACNiB,gBAAA,EAAkB;UAAC;UAAA,CAAAjG,cAAA,GAAAQ,CAAA,WAAAuF,eAAA,CAAgBE,gBAAgB;UAAA;UAAA,CAAAjG,cAAA,GAAAQ,CAAA,WAAI,MAAK0C;QAC9D,GACCG,EAAE,CAAC,MAAMtB,IAAA,CAAK2B,EAAE;QAAA;QAAA1D,cAAA,GAAAE,CAAA;QAEnB,IAAI8F,gBAAA,EAAkB;UAAA;UAAAhG,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAE,CAAA;UACpBuC,OAAA,CAAQT,KAAK,CAAC,mCAAmCgE,gBAAA;QACnD;QAAA;QAAA;UAAAhG,cAAA,GAAAQ,CAAA;QAAA;MACF;MAAA;MAAA;QAAAR,cAAA,GAAAQ,CAAA;MAAA;IACF;IAAA;IAAA;MAAAR,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAEA,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CAAC;MACvB2E,OAAA,EAAS;MACTC,UAAA,EAAYhC,OAAA,CAAQT,EAAE;MACtB0C,OAAA,EAAS;IACX;EAEF,EAAE,OAAOpE,KAAA,EAAO;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IACduC,OAAA,CAAQT,KAAK,CAAC,wBAAwBA,KAAA;IAAA;IAAAhC,cAAA,GAAAE,CAAA;IACtC,OAAOiC,OAAA,CAAAC,YAAY,CAACb,IAAI,CACtB;MAAES,KAAA,EAAOA,KAAA,YAAiBP,KAAA;MAAA;MAAA,CAAAzB,cAAA,GAAAQ,CAAA,WAAQwB,KAAA,CAAMoE,OAAO;MAAA;MAAA,CAAApG,cAAA,GAAAQ,CAAA,WAAG;IAAwB,GAC1E;MAAE6B,MAAA,EAAQ;IAAI;EAElB;AACF","ignoreList":[]}