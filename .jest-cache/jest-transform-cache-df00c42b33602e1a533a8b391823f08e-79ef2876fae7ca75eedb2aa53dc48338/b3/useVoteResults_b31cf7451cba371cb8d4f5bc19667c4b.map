{"version":3,"names":["cov_4gy4vcbhp","actualCoverage","s","useVoteResults","voteId","f","data","isLoading","error","refetch","retryCount","canRetry","retry","_useRetryableQuery","useNetworkQuery","enabled","fallbackData","retryConfig","maxAttempts","baseDelay","retryableCategories","_error","ErrorCategory","NETWORK","SERVER","EXTERNAL_SERVICE","onError","console","onRetry","attempt","log","message","clearError","_react","useCallback","b","manualRefetch","errorDetails"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteResults.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { useNetworkQuery } from './useRetryableQuery';\nimport { AppError, ErrorCategory } from '@/utils/error';\n\nexport interface VoteResultItem {\n    id: number;\n    voteId: number;\n    artistId: number | null;\n    groupId: number;\n    voteTotal: number | null;\n    artist: {\n        id: number;\n        name: string;\n        image: string | null;\n        artistGroup: {\n            id: number;\n            name: string;\n        } | null;\n    } | null;\n    percentage: number;\n    rank: number;\n}\n\nexport interface VoteResultsData {\n    voteId: number;\n    title: string;\n    status: \"upcoming\" | \"ongoing\" | \"ended\";\n    totalVotes: number;\n    results: VoteResultItem[];\n}\n\nexport interface VoteResultsResponse {\n    success: boolean;\n    data?: VoteResultsData;\n    error?: string;\n    details?: string;\n}\n\n/**\n * 투표 결과를 조회하는 훅 (재시도 로직 포함)\n * \n * 새로운 재시도 가능한 쿼리 시스템을 사용하여 네트워크 오류나 일시적인 서버 오류에 대해\n * 자동으로 재시도를 수행합니다.\n */\nexport function useVoteResults(voteId: number | null) {\n    // 새로운 재시도 시스템 사용\n    const {\n        data,\n        isLoading,\n        error,\n        refetch,\n        retryCount,\n        canRetry,\n        retry\n    } = useNetworkQuery<VoteResultsData>(\n        ['vote-results', voteId],\n        `/api/vote/results?voteId=${voteId}`,\n        {\n            enabled: !!voteId,\n            fallbackData: null,\n            retryConfig: {\n                maxAttempts: 3,\n                baseDelay: 1000,\n                retryableCategories: [\n                    ErrorCategory.NETWORK,\n                    ErrorCategory.SERVER,\n                    ErrorCategory.EXTERNAL_SERVICE\n                ],\n            },\n            onError: (error) => {\n                console.error('[useVoteResults] 에러:', error);\n            },\n            onRetry: (attempt, error) => {\n                console.log(`[useVoteResults] 재시도 ${attempt}회:`, error.message);\n            },\n        }\n    );\n\n    // 레거시 호환성을 위한 추가 메서드들\n    const clearError = useCallback(() => {\n        // 새로운 시스템에서는 refetch를 통해 에러를 클리어할 수 있음\n        if (error && canRetry) {\n            retry();\n        }\n    }, [error, canRetry, retry]);\n\n    // 수동 재시도 함수\n    const manualRefetch = useCallback(async () => {\n        if (voteId) {\n            return await refetch();\n        }\n        return null;\n    }, [voteId, refetch]);\n\n    return {\n        data,\n        isLoading,\n        error: error?.message || null,\n        refetch: manualRefetch,\n        clearError,\n        // 새로운 재시도 시스템의 추가 정보\n        retryCount,\n        canRetry,\n        retry,\n        // 에러 객체 (더 상세한 정보가 필요한 경우)\n        errorDetails: error,\n    };\n}\n"],"mappingsaAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAAAA,aAAA,GAAAE,CAAA;;;;;;+BADY;;;;;;WAAAC,cAAA;;;;;iCA5CiC;;;iCACjB;;;iCACQ;AA0CjC,SAASA,eAAeC,MAAqB;EAAA;EAAAJ,aAAA,GAAAK,CAAA;EAChD;EACA,MAAM;IACFC,IAAI;IACJC,SAAS;IACTC,KAAK;IACLC,OAAO;IACPC,UAAU;IACVC,QAAQ;IACRC;EAAK,CACR;EAAA;EAAA,CAAAZ,aAAA,GAAAE,CAAA,OAAG,IAAAW,kBAAA,CAAAC,eAAe,EACf,CAAC,gBAAgBV,MAAA,CAAO,EACxB,4BAA4BA,MAAA,EAAQ,EACpC;IACIW,OAAA,EAAS,CAAC,CAACX,MAAA;IACXY,YAAA,EAAc;IACdC,WAAA,EAAa;MACTC,WAAA,EAAa;MACbC,SAAA,EAAW;MACXC,mBAAA,EAAqB,CACjBC,MAAA,CAAAC,aAAa,CAACC,OAAO,EACrBF,MAAA,CAAAC,aAAa,CAACE,MAAM,EACpBH,MAAA,CAAAC,aAAa,CAACG,gBAAgB;IAEtC;IACAC,OAAA,EAAUlB,KAAA;MAAA;MAAAR,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACNyB,OAAA,CAAQnB,KAAK,CAAC,wBAAwBA,KAAA;IAC1C;IACAoB,OAAA,EAASA,CAACC,OAAA,EAASrB,KAAA;MAAA;MAAAR,aAAA,GAAAK,CAAA;MAAAL,aAAA,GAAAE,CAAA;MACfyB,OAAA,CAAQG,GAAG,CAAC,wBAAwBD,OAAA,IAAW,EAAErB,KAAA,CAAMuB,OAAO;IAClE;EACJ;EAGJ;EACA,MAAMC,UAAA;EAAA;EAAA,CAAAhC,aAAA,GAAAE,CAAA,OAAa,IAAA+B,MAAA,CAAAC,WAAW,EAAC;IAAA;IAAAlC,aAAA,GAAAK,CAAA;IAAAL,aAAA,GAAAE,CAAA;IAC3B;IACA;IAAI;IAAA,CAAAF,aAAA,GAAAmC,CAAA,UAAA3B,KAAA;IAAA;IAAA,CAAAR,aAAA,GAAAmC,CAAA,UAASxB,QAAA,GAAU;MAAA;MAAAX,aAAA,GAAAmC,CAAA;MAAAnC,aAAA,GAAAE,CAAA;MACnBU,KAAA;IACJ;IAAA;IAAA;MAAAZ,aAAA,GAAAmC,CAAA;IAAA;EACJ,GAAG,CAAC3B,KAAA,EAAOG,QAAA,EAAUC,KAAA,CAAM;EAE3B;EACA,MAAMwB,aAAA;EAAA;EAAA,CAAApC,aAAA,GAAAE,CAAA,QAAgB,IAAA+B,MAAA,CAAAC,WAAW,EAAC;IAAA;IAAAlC,aAAA,GAAAK,CAAA;IAAAL,aAAA,GAAAE,CAAA;IAC9B,IAAIE,MAAA,EAAQ;MAAA;MAAAJ,aAAA,GAAAmC,CAAA;MAAAnC,aAAA,GAAAE,CAAA;MACR,OAAO,MAAMO,OAAA;IACjB;IAAA;IAAA;MAAAT,aAAA,GAAAmC,CAAA;IAAA;IAAAnC,aAAA,GAAAE,CAAA;IACA,OAAO;EACX,GAAG,CAACE,MAAA,EAAQK,OAAA,CAAQ;EAAA;EAAAT,aAAA,GAAAE,CAAA;EAEpB,OAAO;IACHI,IAAA;IACAC,SAAA;IACAC,KAAA;IAAO;IAAA,CAAAR,aAAA,GAAAmC,CAAA,UAAA3B,KAAA,EAAOuB,OAAA;IAAA;IAAA,CAAA/B,aAAA,GAAAmC,CAAA,UAAW;IACzB1B,OAAA,EAAS2B,aAAA;IACTJ,UAAA;IACA;IACAtB,UAAA;IACAC,QAAA;IACAC,KAAA;IACA;IACAyB,YAAA,EAAc7B;EAClB;AACJ","ignoreList":[]}