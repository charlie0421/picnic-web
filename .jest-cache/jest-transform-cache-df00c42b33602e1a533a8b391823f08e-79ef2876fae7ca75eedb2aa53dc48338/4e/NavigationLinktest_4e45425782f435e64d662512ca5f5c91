f23b21542939ec68be628d9e0caaa574
/**
 * NavigationLink 컴포넌트 테스트
 */ "use strict";
jest.mock('next/navigation', ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn()
            }),
        usePathname: ()=>mockPathname
    }));
jest.mock('@/hooks/useLocaleRouter', ()=>({
        useLocaleRouter: ()=>({
                extractLocaleFromPath: mockExtractLocaleFromPath,
                getLocalizedPath: mockGetLocalizedPath,
                currentLocale: 'ko'
            })
    }));
jest.mock('@/contexts/GlobalLoadingContext', ()=>({
        useGlobalLoading: ()=>({
                setIsLoading: mockSetIsLoading
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _testutils = require("../../utils/test-utils");
const _NavigationLink = /*#__PURE__*/ _interop_require_default(require("../../../components/client/NavigationLink"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Next.js navigation hooks 모킹
const mockPush = jest.fn();
const mockPathname = '/ko/vote';
// useLocaleRouter 모킹
const mockExtractLocaleFromPath = jest.fn();
const mockGetLocalizedPath = jest.fn();
// GlobalLoadingContext 모킹
const mockSetIsLoading = jest.fn();
describe('NavigationLink', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // 기본 모킹 설정
        mockExtractLocaleFromPath.mockImplementation((path)=>{
            if (path.startsWith('/ko/')) {
                return {
                    locale: 'ko',
                    path: path.replace('/ko', '') || '/'
                };
            }
            if (path.startsWith('/en/')) {
                return {
                    locale: 'en',
                    path: path.replace('/en', '') || '/'
                };
            }
            return {
                locale: 'ko',
                path: path
            };
        });
        mockGetLocalizedPath.mockImplementation((path, locale)=>{
            return `/${locale}${path === '/' ? '' : path}`;
        });
    });
    it('renders the navigation link correctly', ()=>{
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/test-page",
            children: "Test Link"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'Test Link'
        });
        expect(link).toBeInTheDocument();
        expect(link).toHaveTextContent('Test Link');
    });
    it('applies custom className correctly', ()=>{
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/test",
            className: "custom-class",
            children: "Custom Link"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'Custom Link'
        });
        expect(link).toHaveClass('custom-class');
        expect(link).toHaveClass('opacity-100');
    });
    it('navigates to different page when clicked', ()=>{
        // 현재 경로와 다른 경로 설정
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/mypage'
        }); // target path
        mockGetLocalizedPath.mockReturnValue('/ko/mypage');
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/mypage",
            children: "My Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'My Page'
        });
        _react1.fireEvent.click(link);
        expect(mockSetIsLoading).toHaveBeenCalledWith(true);
        expect(mockPush).toHaveBeenCalledWith('/ko/mypage');
    });
    it('cancels navigation when clicking same page', ()=>{
        // 현재 경로와 같은 경로 설정
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }); // target path
        const mockOnClick = jest.fn();
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/vote",
            onClick: mockOnClick,
            children: "Vote Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'Vote Page'
        });
        _react1.fireEvent.click(link);
        // 네비게이션은 취소되어야 함
        expect(mockSetIsLoading).not.toHaveBeenCalled();
        expect(mockPush).not.toHaveBeenCalled();
        // onClick 콜백은 실행되어야 함 (메뉴 닫기 등을 위해)
        expect(mockOnClick).toHaveBeenCalled();
    });
    it('handles localized paths correctly', ()=>{
        // 로케일화되지 않은 href가 전달된 경우
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/mypage'
        }); // target path
        mockGetLocalizedPath.mockReturnValue('/ko/mypage');
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/mypage",
            children: "My Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'My Page'
        });
        _react1.fireEvent.click(link);
        expect(mockGetLocalizedPath).toHaveBeenCalledWith('/mypage', 'ko');
        expect(mockPush).toHaveBeenCalledWith('/ko/mypage');
    });
    it('handles already localized paths correctly', ()=>{
        // 이미 로케일화된 href가 전달된 경우
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/mypage'
        }); // target path
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/ko/mypage",
            children: "My Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'My Page'
        });
        _react1.fireEvent.click(link);
        // 이미 로케일화된 경우 getLocalizedPath가 호출되지 않아야 함
        expect(mockPush).toHaveBeenCalledWith('/ko/mypage');
    });
    it('supports keyboard navigation', ()=>{
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/mypage'
        }); // target path
        mockGetLocalizedPath.mockReturnValue('/ko/mypage');
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/mypage",
            children: "My Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'My Page'
        });
        // Enter 키 테스트
        _react1.fireEvent.keyDown(link, {
            key: 'Enter'
        });
        expect(mockPush).toHaveBeenCalledWith('/ko/mypage');
        jest.clearAllMocks();
        // Space 키 테스트
        _react1.fireEvent.keyDown(link, {
            key: ' '
        });
        expect(mockPush).toHaveBeenCalledWith('/ko/mypage');
    });
    it('maintains accessibility with proper button semantics', ()=>{
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/accessible-page",
            children: "Accessible Link"
        }));
        const link = _react1.screen.getByRole('button');
        expect(link).toBeInTheDocument();
        expect(link).toHaveAttribute('tabindex', '0');
        expect(link).toHaveAttribute('role', 'button');
    });
    it('passes through additional accessibility props', ()=>{
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/test",
            "aria-label": "Custom navigation link",
            title: "Custom title",
            children: "Props Test"
        }));
        const link = _react1.screen.getByRole('button');
        expect(link).toHaveAttribute('aria-label', 'Custom navigation link');
        expect(link).toHaveAttribute('title', 'Custom title');
    });
    it('renders children correctly', ()=>{
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_NavigationLink.default, {
            href: "/children-test",
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    children: "Child Element"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("strong", {
                    children: "Bold Text"
                })
            ]
        }));
        expect(_react1.screen.getByText('Child Element')).toBeInTheDocument();
        expect(_react1.screen.getByText('Bold Text')).toBeInTheDocument();
    });
    it('shows navigating state correctly', ()=>{
        mockExtractLocaleFromPath.mockReturnValueOnce({
            locale: 'ko',
            path: '/vote'
        }) // current path
        .mockReturnValueOnce({
            locale: 'ko',
            path: '/mypage'
        }); // target path
        mockGetLocalizedPath.mockReturnValue('/ko/mypage');
        (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_NavigationLink.default, {
            href: "/mypage",
            children: "My Page"
        }));
        const link = _react1.screen.getByRole('button', {
            name: 'My Page'
        });
        // 초기 상태는 opacity-100
        expect(link).toHaveClass('opacity-100');
        _react1.fireEvent.click(link);
        // 클릭 후에는 opacity-90 (navigating 상태)
        expect(link).toHaveClass('opacity-90');
    });
});

//# sourceMappingURL=data:application/json;base64,