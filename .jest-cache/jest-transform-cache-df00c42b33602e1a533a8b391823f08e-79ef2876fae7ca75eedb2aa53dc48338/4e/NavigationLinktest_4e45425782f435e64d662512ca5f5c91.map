{"version":3,"sources":["/Users/cheolhyun/Repositories/picnic-web/__tests__/components/client/NavigationLink.test.tsx"],"sourcesContent":["/**\n * NavigationLink 컴포넌트 테스트\n */\n\nimport React from 'react';\nimport { screen, fireEvent } from '@testing-library/react';\nimport { renderWithProviders } from '../../utils/test-utils';\nimport NavigationLink from '../../../components/client/NavigationLink';\n\n// Next.js navigation hooks 모킹\nconst mockPush = jest.fn();\nconst mockPathname = '/ko/vote';\n\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: jest.fn(),\n    back: jest.fn(),\n    forward: jest.fn(),\n    refresh: jest.fn(),\n  }),\n  usePathname: () => mockPathname,\n}));\n\n// useLocaleRouter 모킹\nconst mockExtractLocaleFromPath = jest.fn();\nconst mockGetLocalizedPath = jest.fn();\n\njest.mock('@/hooks/useLocaleRouter', () => ({\n  useLocaleRouter: () => ({\n    extractLocaleFromPath: mockExtractLocaleFromPath,\n    getLocalizedPath: mockGetLocalizedPath,\n    currentLocale: 'ko',\n  }),\n}));\n\n// GlobalLoadingContext 모킹\nconst mockSetIsLoading = jest.fn();\n\njest.mock('@/contexts/GlobalLoadingContext', () => ({\n  useGlobalLoading: () => ({\n    setIsLoading: mockSetIsLoading,\n  }),\n}));\n\ndescribe('NavigationLink', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 기본 모킹 설정\n    mockExtractLocaleFromPath.mockImplementation((path: string) => {\n      if (path.startsWith('/ko/')) {\n        return { locale: 'ko', path: path.replace('/ko', '') || '/' };\n      }\n      if (path.startsWith('/en/')) {\n        return { locale: 'en', path: path.replace('/en', '') || '/' };\n      }\n      return { locale: 'ko', path: path };\n    });\n    \n    mockGetLocalizedPath.mockImplementation((path: string, locale: string) => {\n      return `/${locale}${path === '/' ? '' : path}`;\n    });\n  });\n\n  it('renders the navigation link correctly', () => {\n    renderWithProviders(\n      <NavigationLink href=\"/test-page\">\n        Test Link\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'Test Link' });\n    expect(link).toBeInTheDocument();\n    expect(link).toHaveTextContent('Test Link');\n  });\n\n  it('applies custom className correctly', () => {\n    renderWithProviders(\n      <NavigationLink href=\"/test\" className=\"custom-class\">\n        Custom Link\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'Custom Link' });\n    expect(link).toHaveClass('custom-class');\n    expect(link).toHaveClass('opacity-100');\n  });\n\n  it('navigates to different page when clicked', () => {\n    // 현재 경로와 다른 경로 설정\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/mypage' }); // target path\n    \n    mockGetLocalizedPath.mockReturnValue('/ko/mypage');\n\n    renderWithProviders(\n      <NavigationLink href=\"/mypage\">\n        My Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'My Page' });\n    fireEvent.click(link);\n    \n    expect(mockSetIsLoading).toHaveBeenCalledWith(true);\n    expect(mockPush).toHaveBeenCalledWith('/ko/mypage');\n  });\n\n  it('cancels navigation when clicking same page', () => {\n    // 현재 경로와 같은 경로 설정\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }); // target path\n\n    const mockOnClick = jest.fn();\n\n    renderWithProviders(\n      <NavigationLink href=\"/vote\" onClick={mockOnClick}>\n        Vote Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'Vote Page' });\n    fireEvent.click(link);\n    \n    // 네비게이션은 취소되어야 함\n    expect(mockSetIsLoading).not.toHaveBeenCalled();\n    expect(mockPush).not.toHaveBeenCalled();\n    \n    // onClick 콜백은 실행되어야 함 (메뉴 닫기 등을 위해)\n    expect(mockOnClick).toHaveBeenCalled();\n  });\n\n  it('handles localized paths correctly', () => {\n    // 로케일화되지 않은 href가 전달된 경우\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/mypage' }); // target path\n    \n    mockGetLocalizedPath.mockReturnValue('/ko/mypage');\n\n    renderWithProviders(\n      <NavigationLink href=\"/mypage\">\n        My Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'My Page' });\n    fireEvent.click(link);\n    \n    expect(mockGetLocalizedPath).toHaveBeenCalledWith('/mypage', 'ko');\n    expect(mockPush).toHaveBeenCalledWith('/ko/mypage');\n  });\n\n  it('handles already localized paths correctly', () => {\n    // 이미 로케일화된 href가 전달된 경우\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/mypage' }); // target path\n\n    renderWithProviders(\n      <NavigationLink href=\"/ko/mypage\">\n        My Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'My Page' });\n    fireEvent.click(link);\n    \n    // 이미 로케일화된 경우 getLocalizedPath가 호출되지 않아야 함\n    expect(mockPush).toHaveBeenCalledWith('/ko/mypage');\n  });\n\n  it('supports keyboard navigation', () => {\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/mypage' }); // target path\n    \n    mockGetLocalizedPath.mockReturnValue('/ko/mypage');\n\n    renderWithProviders(\n      <NavigationLink href=\"/mypage\">\n        My Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'My Page' });\n    \n    // Enter 키 테스트\n    fireEvent.keyDown(link, { key: 'Enter' });\n    expect(mockPush).toHaveBeenCalledWith('/ko/mypage');\n    \n    jest.clearAllMocks();\n    \n    // Space 키 테스트\n    fireEvent.keyDown(link, { key: ' ' });\n    expect(mockPush).toHaveBeenCalledWith('/ko/mypage');\n  });\n\n  it('maintains accessibility with proper button semantics', () => {\n    renderWithProviders(\n      <NavigationLink href=\"/accessible-page\">\n        Accessible Link\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button');\n    expect(link).toBeInTheDocument();\n    expect(link).toHaveAttribute('tabindex', '0');\n    expect(link).toHaveAttribute('role', 'button');\n  });\n\n  it('passes through additional accessibility props', () => {\n    renderWithProviders(\n      <NavigationLink \n        href=\"/test\" \n        aria-label=\"Custom navigation link\"\n        title=\"Custom title\"\n      >\n        Props Test\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button');\n    expect(link).toHaveAttribute('aria-label', 'Custom navigation link');\n    expect(link).toHaveAttribute('title', 'Custom title');\n  });\n\n  it('renders children correctly', () => {\n    renderWithProviders(\n      <NavigationLink href=\"/children-test\">\n        <span>Child Element</span>\n        <strong>Bold Text</strong>\n      </NavigationLink>\n    );\n    \n    expect(screen.getByText('Child Element')).toBeInTheDocument();\n    expect(screen.getByText('Bold Text')).toBeInTheDocument();\n  });\n\n  it('shows navigating state correctly', () => {\n    mockExtractLocaleFromPath\n      .mockReturnValueOnce({ locale: 'ko', path: '/vote' }) // current path\n      .mockReturnValueOnce({ locale: 'ko', path: '/mypage' }); // target path\n    \n    mockGetLocalizedPath.mockReturnValue('/ko/mypage');\n\n    renderWithProviders(\n      <NavigationLink href=\"/mypage\">\n        My Page\n      </NavigationLink>\n    );\n    \n    const link = screen.getByRole('button', { name: 'My Page' });\n    \n    // 초기 상태는 opacity-100\n    expect(link).toHaveClass('opacity-100');\n    \n    fireEvent.click(link);\n    \n    // 클릭 후에는 opacity-90 (navigating 상태)\n    expect(link).toHaveClass('opacity-90');\n  });\n}); "],"names":["jest","mock","useRouter","push","mockPush","replace","fn","back","forward","refresh","usePathname","mockPathname","useLocaleRouter","extractLocaleFromPath","mockExtractLocaleFromPath","getLocalizedPath","mockGetLocalizedPath","currentLocale","useGlobalLoading","setIsLoading","mockSetIsLoading","describe","beforeEach","clearAllMocks","mockImplementation","path","startsWith","locale","it","renderWithProviders","NavigationLink","href","link","screen","getByRole","name","expect","toBeInTheDocument","toHaveTextContent","className","toHaveClass","mockReturnValueOnce","mockReturnValue","fireEvent","click","toHaveBeenCalledWith","mockOnClick","onClick","not","toHaveBeenCalled","keyDown","key","toHaveAttribute","aria-label","title","span","strong","getByText"],"mappings":"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"}