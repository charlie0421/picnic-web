{"version":3,"names":["GET","cov_ofd8rk7kk","f","s","OPTIONS","request","console","log","cookieStore","_headers","cookies","supabase","_server","createServerSupabaseClientWithCookies","get","name","cookie","b","value","undefined","set","data","userData","error","userError","auth","getUser","hasUser","user","userId","id","message","warn","_server1","NextResponse","json","valid","status","profile","profileError","from","select","eq","single","code","deleted_at","provider","app_metadata","email","headers"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/auth/verify/route.ts"],"sourcesContent":["import { createServerSupabaseClientWithCookies } from '@/lib/supabase/server';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { headers, cookies } from 'next/headers';\n\n/**\n * Ïù∏Ï¶ù ÏÉÅÌÉú Í≤ÄÏ¶ù API ÏóîÎìúÌè¨Ïù∏Ìä∏\n * AuthRedirectHandlerÏóêÏÑú ÏÇ¨Ïö©ÏûêÏùò Ïù∏Ï¶ù ÏÉÅÌÉúÎ•º Í≤ÄÏ¶ùÌïòÎäî Îç∞ ÏÇ¨Ïö©Îê©ÎãàÎã§.\n */\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üîç [Auth Verify API] Ïù∏Ï¶ù ÏÉÅÌÉú Í≤ÄÏ¶ù ÏöîÏ≤≠ Î∞õÏùå');\n\n    // App RouterÏóêÏÑú Ïø†ÌÇ§Î•º ÏùΩÏùÑ Ïàò ÏûàÎäî ÏÑúÎ≤ÑÏÇ¨Ïù¥Îìú Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ±\n    const cookieStore = await cookies();\n    \n    const supabase = createServerSupabaseClientWithCookies({\n      get: (name: string) => {\n        const cookie = cookieStore.get(name);\n        return cookie ? { name: cookie.name, value: cookie.value } : undefined;\n      },\n      set: (cookie: { name: string; value: string; [key: string]: any }) => {\n        cookieStore.set(cookie.name, cookie.value, cookie);\n      }\n    });\n\n    console.log('üîç [Auth Verify API] Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å');\n\n    // Î®ºÏ†Ä Îπ†Î•∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏ (getUserÎäî getSessionÎ≥¥Îã§ Îπ†Î•¥Í≥† ÏïàÏ†ïÏ†Å)\n    const { data: userData, error: userError } = await supabase.auth.getUser();\n    \n    console.log('üîç [Auth Verify API] ÏÇ¨Ïö©Ïûê Ï°∞Ìöå Í≤∞Í≥º:', {\n      hasUser: !!userData?.user,\n      userId: userData?.user?.id,\n      userError: userError?.message,\n    });\n    \n    if (userError || !userData?.user) {\n      console.warn('‚ö†Ô∏è [Auth Verify API] ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïò§Î•ò ÎòêÎäî ÏÇ¨Ïö©Ïûê ÏóÜÏùå:', userError);\n      return NextResponse.json(\n        { \n          valid: false, \n          error: 'User authentication failed',\n          message: 'ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.'\n        }, \n        { status: 401 }\n      );\n    }\n\n    // Ï£ºÏùò: getUser()Í∞Ä ÏÑ±Í≥µÌñàÎã§Î©¥ ÌÜ†ÌÅ∞Ïù¥ Ïú†Ìö®Ìï®ÏùÑ ÏùòÎØ∏\n    // Î≥ÑÎèÑÏùò ÏÑ∏ÏÖò ÎßåÎ£å Ï≤¥ÌÅ¨Îäî getUser() Ìò∏Ï∂ú ÏûêÏ≤¥ÏóêÏÑú Ï≤òÎ¶¨Îê®\n\n\n    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Ï°¥Ïû¨ ÌôïÏù∏ (ÏÑ†ÌÉùÏ†Å)\n    try {\n      const { data: profile, error: profileError } = await supabase\n        .from('user_profiles')\n        .select('id, email, deleted_at')\n        .eq('id', userData.user.id)\n        .single();\n\n      if (profileError && profileError.code !== 'PGRST116') { // PGRST116 = row not found\n        console.warn('‚ö†Ô∏è [Auth Verify API] ÌîÑÎ°úÌïÑ Ï°∞Ìöå Ïò§Î•ò:', profileError);\n      }\n\n      // ÏÇ≠Ï†úÎêú ÏÇ¨Ïö©Ïûê Ï≤¥ÌÅ¨\n      if (profile?.deleted_at) {\n        console.warn('üóëÔ∏è [Auth Verify API] ÏÇ≠Ï†úÎêú ÏÇ¨Ïö©Ïûê Í≥ÑÏ†ï');\n        return NextResponse.json(\n          { \n            valid: false, \n            error: 'Account deleted',\n            message: 'ÏÇ≠Ï†úÎêú Í≥ÑÏ†ïÏûÖÎãàÎã§.'\n          }, \n          { status: 401 }\n        );\n      }\n    } catch (profileError) {\n      console.warn('‚ö†Ô∏è [Auth Verify API] ÌîÑÎ°úÌïÑ Ï≤¥ÌÅ¨ Ï§ë Ïò§Î•ò (ÏßÑÌñâ Í≥ÑÏÜç):', profileError);\n      // ÌîÑÎ°úÌïÑ Ï≤¥ÌÅ¨ Ïã§Ìå®Îäî Ïù∏Ï¶ù Ïã§Ìå®Î°ú Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå\n    }\n\n    // WeChat Î°úÍ∑∏Ïù∏ ÌäπÎ≥Ñ Í≤ÄÏ¶ù\n    const provider = userData.user.app_metadata?.provider;\n    if (provider === 'wechat') {\n      console.log('üîÑ [Auth Verify API] WeChat Î°úÍ∑∏Ïù∏ ÌäπÎ≥Ñ Í≤ÄÏ¶ù');\n      \n      // WeChat ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Ï∂îÍ∞Ä Í≤ÄÏ¶ù (ÌïÑÏöîÏãú Íµ¨ÌòÑ)\n      // ÌòÑÏû¨Îäî Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ùÏúºÎ°ú Ï∂©Î∂Ñ\n    }\n\n    console.log('‚úÖ [Auth Verify API] Ïù∏Ï¶ù ÏÉÅÌÉú Í≤ÄÏ¶ù ÏÑ±Í≥µ:', {\n      userId: userData.user.id,\n      email: userData.user.email,\n      provider: provider || 'email',\n    });\n\n    return NextResponse.json({\n      valid: true,\n      user: {\n        id: userData.user.id,\n        email: userData.user.email,\n        provider: provider || 'email',\n      },\n    });\n  } catch (error) {\n    console.error('üí• [Auth Verify API] Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò:', error);\n    \n    return NextResponse.json(\n      { \n        valid: false, \n        error: 'Internal server error',\n        message: 'ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'\n      }, \n      { status: 500 }\n    );\n  }\n}\n\n/**\n * OPTIONS ÏöîÏ≤≠ Ï≤òÎ¶¨ (CORS ÏßÄÏõê)\n */\nexport async function OPTIONS(request: NextRequest) {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}"],"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","ignoreList":[]}