{"version":3,"names":["cov_1ixy62sna0","actualCoverage","s","useAuthGuard","f","useOptionalAuth","useRequireAuth","options","b","isAuthenticated","isLoading","user","_authprovider","useAuth","router","_navigation","useRouter","pathname","usePathname","showLoginRequired","_Dialog","useLoginRequired","hasLoggedInitRef","_react","useRef","current","process","env","NODE_ENV","console","log","hasShowLoginRequired","timestamp","Date","toISOString","redirectUrl","requireAuth","onAuthRequired","onAuthSuccess","onError","customLoginMessage","checkAuth","useCallback","userId","id","_authredirect","securityUtils","validateUserAgent","error","Error","hasValidAuth","hasUser","authKeys","forEach","key","localStorage","getItem","removeItem","e","warn","targetUrl","isValidRedirectUrl","withAuth","action","customRedirectUrl","isAuthorized","saveRedirectUrl","hasCustomMessage","loginDialogResult","title","description","loginText","cancelText","onLogin","push","navigateWithAuth","path","replace"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useAuthGuard.ts"],"sourcesContent":["\"use client\";\n\nimport { useCallback, useRef } from \"react\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { useAuth } from \"@/lib/supabase/auth-provider\";\nimport { useLoginRequired } from \"@/components/ui/Dialog\";\nimport { saveRedirectUrl, securityUtils } from \"@/utils/auth-redirect\";\n\nexport interface AuthGuardOptions {\n    redirectUrl?: string;\n    requireAuth?: boolean;\n    onAuthRequired?: (redirectUrl?: string) => void;\n    onAuthSuccess?: () => void;\n    onError?: (error: Error) => void;\n    customLoginMessage?: {\n        title?: string;\n        description?: string;\n        loginText?: string;\n        cancelText?: string;\n    };\n}\n\nexport function useAuthGuard(options: AuthGuardOptions = {}) {\n    const { isAuthenticated, isLoading, user } = useAuth();\n    const router = useRouter();\n    const pathname = usePathname();\n    const showLoginRequired = useLoginRequired();\n    const hasLoggedInitRef = useRef(false);\n\n    // useLoginRequired 훅이 제대로 가져와졌는지 확인 (한 번만)\n    if (!hasLoggedInitRef.current && process.env.NODE_ENV === 'development') {\n        console.log('🔍 [useAuthGuard] 초기화:', {\n            hasShowLoginRequired: typeof showLoginRequired === 'function',\n            pathname,\n            timestamp: new Date().toISOString()\n        });\n        hasLoggedInitRef.current = true;\n    }\n\n    const {\n        redirectUrl,\n        requireAuth = true,\n        onAuthRequired,\n        onAuthSuccess,\n        onError,\n        customLoginMessage,\n    } = options;\n\n    // 인증 체크 함수\n    const checkAuth = useCallback(async (): Promise<boolean> => {\n        try {\n            console.log(\"🔍 checkAuth 시작:\", {\n                isLoading,\n                requireAuth,\n                isAuthenticated,\n                userId: user?.id,\n                timestamp: new Date().toISOString(),\n            });\n\n            // 로딩 중이면 대기\n            if (isLoading) {\n                console.log(\"⏳ 로딩 중 - 인증 체크 대기\");\n                return false;\n            }\n\n            // 인증이 필요하지 않은 경우\n            if (!requireAuth) {\n                console.log(\"✅ 인증 불필요 - 통과\");\n                return true;\n            }\n\n            // 보안 검증\n            if (!securityUtils.validateUserAgent()) {\n                console.log(\"🚫 보안 검증 실패 - 의심스러운 사용자 에이전트\");\n                const error = new Error(\n                    \"보안 검증 실패: 의심스러운 사용자 에이전트\",\n                );\n                onError?.(error);\n                return false;\n            }\n\n            // 인증 상태 엄격 체크\n            const hasValidAuth = isAuthenticated && user && user.id;\n\n            console.log(\"🔐 인증 상태 체크:\", {\n                isAuthenticated,\n                hasUser: !!user,\n                userId: user?.id,\n                hasValidAuth,\n            });\n\n            // 로컬 스토리지의 잘못된 인증 데이터 정리\n            if (!hasValidAuth) {\n                console.log(\"🧹 잘못된 인증 데이터 정리 시작\");\n                try {\n                    // 인증되지 않았는데 남아있는 인증 관련 데이터 정리\n                    const authKeys = [\n                        \"auth_success\",\n                        \"auth_provider\",\n                        \"auth_timestamp\",\n                    ];\n                    authKeys.forEach((key) => {\n                        if (localStorage.getItem(key)) {\n                            localStorage.removeItem(key);\n                            console.log(`🗑️ 잘못된 인증 데이터 정리: ${key}`);\n                        }\n                    });\n                } catch (e) {\n                    console.warn(\"로컬 스토리지 정리 중 오류:\", e);\n                }\n            }\n\n            // 인증된 경우\n            if (hasValidAuth) {\n                console.log(\"✅ 인증 성공\");\n                onAuthSuccess?.();\n                return true;\n            }\n\n            // 인증되지 않은 경우\n            console.log(\"❌ 인증 실패 - 로그인 필요\");\n            const targetUrl = redirectUrl || pathname;\n\n            // URL 보안 검증\n            if (targetUrl && !securityUtils.isValidRedirectUrl(targetUrl)) {\n                console.warn(\"유효하지 않은 리다이렉트 URL:\", targetUrl);\n                onAuthRequired?.();\n                return false;\n            }\n\n            onAuthRequired?.(targetUrl);\n            return false;\n        } catch (error) {\n            console.error(\"인증 체크 중 오류:\", error);\n            onError?.(\n                error instanceof Error ? error : new Error(\"인증 체크 실패\"),\n            );\n            return false;\n        }\n    }, [\n        isLoading,\n        requireAuth,\n        isAuthenticated,\n        user,\n        redirectUrl,\n        pathname,\n        onAuthRequired,\n        onAuthSuccess,\n        onError,\n    ]);\n\n    // 인증이 필요한 액션을 실행하는 함수\n    const withAuth = useCallback(async <T>(\n        action: () => Promise<T> | T,\n        customRedirectUrl?: string,\n    ): Promise<T | null> => {\n        try {\n            console.log(\"🔐 withAuth 시작:\", {\n                isLoading,\n                isAuthenticated,\n                userId: user?.id,\n                requireAuth,\n                timestamp: new Date().toISOString(),\n            });\n\n            const isAuthorized = await checkAuth();\n\n            console.log(\"🔍 checkAuth 결과:\", isAuthorized);\n\n            if (!isAuthorized) {\n                console.log(\"❌ 인증 실패 - 로그인 다이얼로그 표시\");\n                const targetUrl = customRedirectUrl || redirectUrl || pathname;\n\n                // URL 보안 검증 및 저장\n                if (targetUrl && securityUtils.isValidRedirectUrl(targetUrl)) {\n                    console.log(\"리다이렉트 URL 저장:\", targetUrl);\n                    saveRedirectUrl(targetUrl);\n                }\n\n                // 로그인 다이얼로그 표시\n                console.log(\"🔄 showLoginRequired 호출 시작:\", {\n                    targetUrl,\n                    hasCustomMessage: !!customLoginMessage,\n                    timestamp: new Date().toISOString()\n                });\n                \n                const loginDialogResult = await showLoginRequired({\n                    redirectUrl: targetUrl,\n                    title: customLoginMessage?.title,\n                    description: customLoginMessage?.description,\n                    loginText: customLoginMessage?.loginText,\n                    cancelText: customLoginMessage?.cancelText,\n                    onLogin: () => {\n                        // URL은 이미 저장되었으므로 중복 저장하지 않음\n                        console.log(\"🔄 로그인 페이지로 이동\");\n                        router.push(\"/login\");\n                    },\n                });\n\n                console.log(\"🔄 showLoginRequired 결과:\", loginDialogResult);\n\n                return null;\n            }\n\n            console.log(\"✅ 인증 성공 - 액션 실행\");\n            // 인증된 경우 액션 실행\n            return await action();\n        } catch (error) {\n            console.error(\"인증 액션 실행 중 오류:\", error);\n            onError?.(\n                error instanceof Error ? error : new Error(\"액션 실행 실패\"),\n            );\n            return null;\n        }\n    }, [\n        checkAuth,\n        redirectUrl,\n        pathname,\n        showLoginRequired,\n        router,\n        onError,\n        customLoginMessage,\n        isLoading,\n        isAuthenticated,\n        user,\n        requireAuth,\n    ]);\n\n    // 인증이 필요한 네비게이션\n    const navigateWithAuth = useCallback(async (\n        path: string,\n        options?: { replace?: boolean },\n    ): Promise<boolean> => {\n        try {\n            // 경로 보안 검증\n            if (!securityUtils.isValidRedirectUrl(path)) {\n                console.warn(\"유효하지 않은 네비게이션 경로:\", path);\n                onError?.(new Error(\"유효하지 않은 경로\"));\n                return false;\n            }\n\n            const isAuthorized = await checkAuth();\n\n            if (!isAuthorized) {\n                console.log(\"네비게이션 리다이렉트 URL 저장:\", path);\n                saveRedirectUrl(path);\n\n                // 로그인 다이얼로그 표시\n                console.log(\"🔄 showLoginRequired 호출 시작:\", {\n                    path,\n                    hasCustomMessage: !!customLoginMessage,\n                    timestamp: new Date().toISOString()\n                });\n                \n                const loginDialogResult = await showLoginRequired({\n                    redirectUrl: path,\n                    title: customLoginMessage?.title,\n                    description: customLoginMessage?.description,\n                    loginText: customLoginMessage?.loginText,\n                    cancelText: customLoginMessage?.cancelText,\n                    onLogin: () => {\n                        // URL은 이미 저장되었으므로 중복 저장하지 않음\n                        console.log(\"🔄 로그인 페이지로 이동\");\n                        router.push(\"/login\");\n                    },\n                });\n\n                console.log(\"🔄 showLoginRequired 결과:\", loginDialogResult);\n\n                return false;\n            }\n\n            // 인증된 경우 네비게이션 실행\n            if (options?.replace) {\n                router.replace(path);\n            } else {\n                router.push(path);\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"인증 네비게이션 중 오류:\", error);\n            onError?.(\n                error instanceof Error ? error : new Error(\"네비게이션 실패\"),\n            );\n            return false;\n        }\n    }, [checkAuth, showLoginRequired, router, onError, customLoginMessage]);\n\n    return {\n        // 상태\n        isAuthenticated,\n        isLoading,\n        user,\n\n        // 메서드\n        checkAuth,\n        withAuth,\n        navigateWithAuth,\n    };\n}\n\n// 편의 훅들\nexport function useRequireAuth(\n    options?: Omit<AuthGuardOptions, \"requireAuth\">,\n) {\n    return useAuthGuard({ ...options, requireAuth: true });\n}\n\nexport function useOptionalAuth(\n    options?: Omit<AuthGuardOptions, \"requireAuth\">,\n) {\n    return useAuthGuard({ ...options, requireAuth: false });\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqTgB;IAAAA,cAAA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","ignoreList":[]}