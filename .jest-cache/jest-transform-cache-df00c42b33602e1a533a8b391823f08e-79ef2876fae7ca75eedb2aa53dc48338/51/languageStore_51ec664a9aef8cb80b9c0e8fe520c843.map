{"version":3,"names":["cov_252gvfu07d","actualCoverage","s","useLanguageStore","loadingPromises","Map","getCurrentLanguageFromPath","f","window","b","_settings","settings","languages","default","pathSegments","location","pathname","split","urlLang","supported","includes","initialLanguage","loadLocalTranslations","lang","url","console","log","response","fetch","status","ok","Error","translations","json","Object","keys","length","error","warn","_zustand","create","_middleware","persist","set","get","currentLanguage","reduce","acc","isLoading","isHydrated","isTranslationLoaded","setLanguage","_translationLogger","translationLogger","logLanguageSync","loadTranslations","syncLanguageWithPath","langFromPath","setHydrated","hydrated","t","key","args","currentTranslations","translation","defaultTranslations","logMissingTranslation","process","env","NODE_ENV","entries","forEach","argKey","value","replace","has","hasTranslations","isMarkedAsLoaded","loadingPromise","translationsData","localTranslations","logTranslationSuccess","logLoadingError","state","message","delete","setCurrentLang","name","partialize","onRehydrateStorage","setTimeout"],"sources":["/Users/cheolhyun/Repositories/picnic-web/stores/languageStore.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { type Language, settings } from \"@/config/settings\";\nimport { translationLogger } from \"@/utils/translationLogger\";\n\n// 진행 중인 번역 로딩 Promise들을 추적하는 맵\nconst loadingPromises = new Map<Language, Promise<void>>();\n\n// URL에서 현재 언어 가져오기\nconst getCurrentLanguageFromPath = (): Language => {\n  if (typeof window === \"undefined\") return settings.languages.default;\n\n  const pathSegments = window.location.pathname.split(\"/\");\n  const urlLang = pathSegments[1] as Language;\n\n  if (urlLang && settings.languages.supported.includes(urlLang)) {\n    return urlLang;\n  }\n\n  return settings.languages.default;\n};\n\n// 초기 언어 설정은 항상 URL 경로에서 가져옴 (클라이언트에서만)\nconst initialLanguage: Language = (() => {\n  if (typeof window === \"undefined\") return settings.languages.default;\n  return getCurrentLanguageFromPath();\n})();\n\ninterface LanguageState {\n  currentLanguage: Language;\n  translations: Record<Language, Record<string, string>>;\n  isLoading: boolean;\n  error: string | null;\n  isTranslationLoaded: Record<Language, boolean>;\n  isHydrated: boolean;\n  t: (key: string, args?: Record<string, string>) => string;\n  setLanguage: (lang: Language) => Promise<void>;\n  syncLanguageWithPath: () => Promise<void>;\n  loadTranslations: (lang: Language) => Promise<void>;\n  setCurrentLang: (lang: Language) => void;\n  setHydrated: (hydrated: boolean) => void;\n}\n\n/**\n * 로컬 번역 파일 로드\n */\nasync function loadLocalTranslations(\n  lang: Language,\n): Promise<Record<string, string> | null> {\n  if (typeof window === \"undefined\") return null;\n  \n  try {\n    const url = `/locales/${lang}.json`;\n    console.log(`🔄 Loading local translations from: ${url}`);\n    \n    const response = await fetch(url);\n    console.log(`📥 Response status for ${lang}:`, response.status, response.ok);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load local translations for ${lang}: ${response.status}`);\n    }\n    \n    const translations: Record<string, string> = await response.json();\n    console.log(`✅ Loaded ${Object.keys(translations).length} translation keys for ${lang}`);\n    \n    return translations;\n  } catch (error) {\n    console.warn(`❌ Local translations not found for ${lang}:`, error);\n    return null;\n  }\n}\n\nexport const useLanguageStore = create<LanguageState>()(\n  persist(\n    (set, get) => ({\n      currentLanguage: initialLanguage,\n      translations: settings.languages.supported.reduce((acc, lang) => {\n        acc[lang] = {};\n        return acc;\n      }, {} as Record<Language, Record<string, string>>),\n      isLoading: false,\n      error: null,\n      isHydrated: false,\n      isTranslationLoaded: settings.languages.supported.reduce((acc, lang) => {\n        acc[lang] = false;\n        return acc;\n      }, {} as Record<Language, boolean>),\n      setLanguage: async (lang: Language) => {\n        if (!settings.languages.supported.includes(lang)) {\n          console.warn(`Unsupported language: ${lang}`);\n          return;\n        }\n\n        const { currentLanguage } = get();\n        console.log(`🔄 setLanguage called: ${lang}`);\n        translationLogger.logLanguageSync(currentLanguage, lang, 'setLanguage');\n        \n        set({ currentLanguage: lang });\n\n        // 번역이 로드되지 않은 경우 로드\n        const { isTranslationLoaded } = get();\n        if (!isTranslationLoaded[lang]) {\n          await get().loadTranslations(lang);\n        }\n      },\n      syncLanguageWithPath: async () => {\n        if (typeof window === \"undefined\") return;\n        \n        const { isHydrated } = get();\n        \n        // hydration이 완료되지 않은 경우 대기\n        if (!isHydrated) {\n          console.log('🔄 [syncLanguageWithPath] Waiting for hydration to complete...');\n          return;\n        }\n        \n        const langFromPath = getCurrentLanguageFromPath();\n        const { currentLanguage, isTranslationLoaded } = get();\n        \n        console.log(`🔄 [syncLanguageWithPath] Current: ${currentLanguage}, Path: ${langFromPath}`);\n        \n        if (langFromPath !== currentLanguage) {\n          console.log(`🔄 [syncLanguageWithPath] Language mismatch detected, updating store from ${currentLanguage} to ${langFromPath}`);\n          translationLogger.logLanguageSync(currentLanguage, langFromPath, 'syncLanguageWithPath');\n          \n          // 언어 상태 즉시 업데이트\n          set({ currentLanguage: langFromPath });\n          \n          // 번역이 로드되지 않은 경우에만 로드\n          if (!isTranslationLoaded[langFromPath]) {\n            console.log(`🔄 [syncLanguageWithPath] Loading translations for ${langFromPath}`);\n            await get().loadTranslations(langFromPath);\n          } else {\n            console.log(`✅ [syncLanguageWithPath] Translations for ${langFromPath} already loaded`);\n          }\n        } else {\n          console.log(`✅ [syncLanguageWithPath] Language already synchronized: ${currentLanguage}`);\n          \n          // 언어는 맞지만 번역이 로드되지 않은 경우\n          if (!isTranslationLoaded[currentLanguage]) {\n            console.log(`🔄 [syncLanguageWithPath] Loading missing translations for ${currentLanguage}`);\n            await get().loadTranslations(currentLanguage);\n          }\n        }\n      },\n      setHydrated: (hydrated: boolean) => {\n        console.log(`🔄 Setting hydration status: ${hydrated}`);\n        set({ isHydrated: hydrated });\n      },\n      t: (key: string, args?: Record<string, string>) => {\n        const { translations, currentLanguage, isHydrated, isTranslationLoaded, isLoading } = get();\n\n        // hydration이 완료되지 않았거나 번역 로딩 중인 경우 빈 문자열 반환\n        if (!isHydrated || isLoading) {\n          return '';\n        }\n\n        // 현재 언어의 번역이 아직 로드되지 않은 경우 빈 문자열 반환\n        if (!isTranslationLoaded[currentLanguage]) {\n          return '';\n        }\n\n        // 현재 언어의 번역 찾기\n        const currentTranslations = translations[currentLanguage] || {};\n        let translation = currentTranslations[key];\n\n        // 번역이 없는 경우 기본 언어에서 찾기\n        if (!translation && currentLanguage !== settings.languages.default) {\n          const defaultTranslations = translations[settings.languages.default] || {};\n          translation = defaultTranslations[key];\n          \n          if (translation) {\n            // 기본 언어에서 찾은 경우 로깅\n            translationLogger.logMissingTranslation(\n              key, \n              currentLanguage, \n              'fallback_to_default', \n              translation\n            );\n          }\n        }\n\n        // 여전히 번역이 없는 경우 처리\n        if (!translation) {\n          translationLogger.logMissingTranslation(key, currentLanguage, 'no_translation_found');\n          \n          // 번역이 완전히 로드된 상태에서 키가 없는 경우에만 키 반환 (개발용)\n          // 프로덕션에서는 빈 문자열 반환\n          if (process.env.NODE_ENV === 'development') {\n            return `[${key}]`; // 개발 환경에서는 키를 대괄호로 감싸서 표시\n          }\n          return ''; // 프로덕션에서는 빈 문자열\n        }\n\n        // 변수 치환\n        if (args && typeof translation === \"string\") {\n          Object.entries(args).forEach(([argKey, value]) => {\n            translation = translation.replace(`{${argKey}}`, value);\n          });\n        }\n\n        return translation;\n      },\n      loadTranslations: async (lang: Language) => {\n        // 서버 사이드에서는 로딩하지 않음\n        if (typeof window === \"undefined\") {\n          return;\n        }\n\n        const { isTranslationLoaded, translations } = get();\n\n        // 이미 진행 중인 로딩이 있는지 확인\n        if (loadingPromises.has(lang)) {\n          console.log(`🔄 Translation loading already in progress for ${lang}, waiting...`);\n          return loadingPromises.get(lang);\n        }\n\n        // 강제로 다시 로드하거나 이미 로드된 경우 체크\n        const hasTranslations = translations[lang] && Object.keys(translations[lang]).length > 0;\n        const isMarkedAsLoaded = isTranslationLoaded[lang];\n        \n        if (isMarkedAsLoaded && hasTranslations) {\n          console.log(`✅ Translations for ${lang} already loaded with ${Object.keys(translations[lang]).length} keys, skipping`);\n          return;\n        }\n        \n        if (isMarkedAsLoaded && !hasTranslations) {\n          console.log(`⚠️ ${lang} marked as loaded but has no translations, force reloading...`);\n        }\n\n        console.log(`🔄 Starting to load translations for ${lang}`);\n        \n        // Promise 생성 및 캐싱\n        const loadingPromise = (async () => {\n          try {\n            set({ isLoading: true, error: null });\n\n            let translationsData: Record<string, string> = {};\n\n            // 로컬 번역 파일 로드\n            try {\n              const localTranslations = await loadLocalTranslations(lang);\n              if (localTranslations) {\n                translationsData = { ...translationsData, ...localTranslations };\n                console.log(`✅ Local translations loaded for ${lang}:`, Object.keys(localTranslations).length, 'keys');\n                translationLogger.logTranslationSuccess(lang, Object.keys(localTranslations).length, 'local');\n              }\n            } catch (error) {\n              translationLogger.logLoadingError(lang, error as Error, 'local');\n            }\n\n            // 번역이 없는 경우 기본 언어로 fallback\n            if (Object.keys(translationsData).length === 0 && lang !== settings.languages.default) {\n              console.warn(\n                `No translations found for ${lang}, falling back to ${settings.languages.default}`,\n              );\n              try {\n                const defaultTranslations = await loadLocalTranslations(settings.languages.default);\n                if (defaultTranslations) {\n                  translationsData = defaultTranslations;\n                  translationLogger.logTranslationSuccess(lang, Object.keys(defaultTranslations).length, 'local');\n                }\n              } catch (error) {\n                translationLogger.logLoadingError(settings.languages.default, error as Error, 'local');\n              }\n            }\n\n            console.log(`🎉 Final translations for ${lang}:`, Object.keys(translationsData).length, 'keys');\n\n            set((state) => ({\n              translations: {\n                ...state.translations,\n                [lang]: translationsData,\n              },\n              isLoading: false,\n              isTranslationLoaded: {\n                ...state.isTranslationLoaded,\n                [lang]: true,\n              },\n            }));\n\n            console.log(`✅ Translation loading completed for ${lang}`);\n          } catch (error) {\n            console.error(`Failed to load translations for ${lang}:`, error);\n            translationLogger.logLoadingError(lang, error as Error, 'local');\n            \n            set({\n              error: error instanceof Error\n                ? error.message\n                : \"Failed to load translations\",\n              isLoading: false,\n            });\n          } finally {\n            // Promise 캐시에서 제거\n            loadingPromises.delete(lang);\n          }\n        })();\n\n        // Promise 캐싱\n        loadingPromises.set(lang, loadingPromise);\n        \n        return loadingPromise;\n      },\n      setCurrentLang: (lang) => set({ currentLanguage: lang }),\n    }),\n    {\n      name: \"language-storage\",\n      partialize: (state) => ({\n        currentLanguage: state.currentLanguage,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state && typeof window !== \"undefined\") {\n          console.log('🔄 Rehydrating language store:', state.currentLanguage);\n          \n          // hydration 완료 표시\n          state.setHydrated(true);\n          \n          // 리하이드레이션 후 현재 언어의 번역이 로드되지 않았다면 로드\n          // setTimeout을 사용하여 렌더링 사이클과 분리\n          if (!state.isTranslationLoaded[state.currentLanguage]) {\n            console.log('🔄 Loading translations after rehydration');\n            setTimeout(() => {\n              state.loadTranslations(state.currentLanguage);\n            }, 0);\n          }\n        }\n      },\n    },\n  ),\n);\n"],"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","ignoreList":[]}