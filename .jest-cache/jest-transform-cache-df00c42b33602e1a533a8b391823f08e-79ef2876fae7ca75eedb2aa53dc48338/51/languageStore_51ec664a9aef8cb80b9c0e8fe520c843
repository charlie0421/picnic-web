bcb82229d00bbcd462e4536586b4027b
"use strict";

/* istanbul ignore next */
function cov_252gvfu07d() {
  var path = "/Users/cheolhyun/Repositories/picnic-web/stores/languageStore.ts";
  var hash = "9e0ab44d1b7a4165be60637976cdbb4a250f8fb9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cheolhyun/Repositories/picnic-web/stores/languageStore.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 32
        }
      },
      "3": {
        start: {
          line: 11,
          column: 17
        },
        end: {
          line: 11,
          column: 35
        }
      },
      "4": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 49
        }
      },
      "5": {
        start: {
          line: 13,
          column: 18
        },
        end: {
          line: 13,
          column: 47
        }
      },
      "6": {
        start: {
          line: 14,
          column: 27
        },
        end: {
          line: 14,
          column: 64
        }
      },
      "7": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 33
        }
      },
      "8": {
        start: {
          line: 18,
          column: 35
        },
        end: {
          line: 26,
          column: 1
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 83
        }
      },
      "10": {
        start: {
          line: 19,
          column: 39
        },
        end: {
          line: 19,
          column: 83
        }
      },
      "11": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 60
        }
      },
      "12": {
        start: {
          line: 21,
          column: 20
        },
        end: {
          line: 21,
          column: 35
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "15": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "16": {
        start: {
          line: 28,
          column: 24
        },
        end: {
          line: 31,
          column: 4
        }
      },
      "17": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 83
        }
      },
      "18": {
        start: {
          line: 29,
          column: 39
        },
        end: {
          line: 29,
          column: 83
        }
      },
      "19": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 40
        }
      },
      "20": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 51
        }
      },
      "21": {
        start: {
          line: 35,
          column: 39
        },
        end: {
          line: 35,
          column: 51
        }
      },
      "22": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "23": {
        start: {
          line: 37,
          column: 20
        },
        end: {
          line: 37,
          column: 43
        }
      },
      "24": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 66
        }
      },
      "25": {
        start: {
          line: 39,
          column: 25
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "26": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 85
        }
      },
      "27": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "28": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 97
        }
      },
      "29": {
        start: {
          line: 44,
          column: 29
        },
        end: {
          line: 44,
          column: 50
        }
      },
      "30": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 97
        }
      },
      "31": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 28
        }
      },
      "32": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 75
        }
      },
      "33": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 20
        }
      },
      "34": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 271,
          column: 3
        }
      },
      "35": {
        start: {
          line: 52,
          column: 86
        },
        end: {
          line: 251,
          column: 5
        }
      },
      "36": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 27
        }
      },
      "37": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 23
        }
      },
      "38": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 30
        }
      },
      "39": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 23
        }
      },
      "40": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "41": {
        start: {
          line: 67,
          column: 16
        },
        end: {
          line: 67,
          column: 62
        }
      },
      "42": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 23
        }
      },
      "43": {
        start: {
          line: 70,
          column: 40
        },
        end: {
          line: 70,
          column: 45
        }
      },
      "44": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 58
        }
      },
      "45": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 103
        }
      },
      "46": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "47": {
        start: {
          line: 77,
          column: 44
        },
        end: {
          line: 77,
          column: 49
        }
      },
      "48": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "49": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 51
        }
      },
      "50": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "51": {
        start: {
          line: 83,
          column: 47
        },
        end: {
          line: 83,
          column: 54
        }
      },
      "52": {
        start: {
          line: 84,
          column: 35
        },
        end: {
          line: 84,
          column: 40
        }
      },
      "53": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "54": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 94
        }
      },
      "55": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 23
        }
      },
      "56": {
        start: {
          line: 90,
          column: 33
        },
        end: {
          line: 90,
          column: 61
        }
      },
      "57": {
        start: {
          line: 91,
          column: 61
        },
        end: {
          line: 91,
          column: 66
        }
      },
      "58": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 104
        }
      },
      "59": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "60": {
        start: {
          line: 94,
          column: 16
        },
        end: {
          line: 94,
          column: 143
        }
      },
      "61": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 124
        }
      },
      "62": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 99,
          column: 19
        }
      },
      "63": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "64": {
        start: {
          line: 102,
          column: 20
        },
        end: {
          line: 102,
          column: 102
        }
      },
      "65": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "66": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 108
        }
      },
      "67": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 106
        }
      },
      "68": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "69": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 113
        }
      },
      "70": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 66
        }
      },
      "71": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 117,
          column: 68
        }
      },
      "72": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 120,
          column: 15
        }
      },
      "73": {
        start: {
          line: 123,
          column: 98
        },
        end: {
          line: 123,
          column: 103
        }
      },
      "74": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "75": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 26
        }
      },
      "76": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "77": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 26
        }
      },
      "78": {
        start: {
          line: 133,
          column: 40
        },
        end: {
          line: 133,
          column: 75
        }
      },
      "79": {
        start: {
          line: 134,
          column: 30
        },
        end: {
          line: 134,
          column: 54
        }
      },
      "80": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 143,
          column: 13
        }
      },
      "81": {
        start: {
          line: 137,
          column: 44
        },
        end: {
          line: 137,
          column: 100
        }
      },
      "82": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 55
        }
      },
      "83": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 142,
          column: 17
        }
      },
      "84": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 137
        }
      },
      "85": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "86": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 121
        }
      },
      "87": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "88": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 38
        }
      },
      "89": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 26
        }
      },
      "90": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "91": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 158,
          column: 19
        }
      },
      "92": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 76
        }
      },
      "93": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 160,
          column: 31
        }
      },
      "94": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "95": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 23
        }
      },
      "96": {
        start: {
          line: 167,
          column: 58
        },
        end: {
          line: 167,
          column: 63
        }
      },
      "97": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "98": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 98
        }
      },
      "99": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 49
        }
      },
      "100": {
        start: {
          line: 174,
          column: 36
        },
        end: {
          line: 174,
          column: 100
        }
      },
      "101": {
        start: {
          line: 175,
          column: 37
        },
        end: {
          line: 175,
          column: 62
        }
      },
      "102": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "103": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 135
        }
      },
      "104": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 23
        }
      },
      "105": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "106": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 103
        }
      },
      "107": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 72
        }
      },
      "108": {
        start: {
          line: 185,
          column: 35
        },
        end: {
          line: 243,
          column: 16
        }
      },
      "109": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 242,
          column: 17
        }
      },
      "110": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 190,
          column: 23
        }
      },
      "111": {
        start: {
          line: 191,
          column: 43
        },
        end: {
          line: 191,
          column: 45
        }
      },
      "112": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "113": {
        start: {
          line: 194,
          column: 50
        },
        end: {
          line: 194,
          column: 83
        }
      },
      "114": {
        start: {
          line: 195,
          column: 24
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "115": {
        start: {
          line: 196,
          column: 28
        },
        end: {
          line: 199,
          column: 30
        }
      },
      "116": {
        start: {
          line: 200,
          column: 28
        },
        end: {
          line: 200,
          column: 131
        }
      },
      "117": {
        start: {
          line: 201,
          column: 28
        },
        end: {
          line: 201,
          column: 141
        }
      },
      "118": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 99
        }
      },
      "119": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "120": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 131
        }
      },
      "121": {
        start: {
          line: 209,
          column: 24
        },
        end: {
          line: 217,
          column: 25
        }
      },
      "122": {
        start: {
          line: 210,
          column: 56
        },
        end: {
          line: 210,
          column: 121
        }
      },
      "123": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 214,
          column: 29
        }
      },
      "124": {
        start: {
          line: 212,
          column: 32
        },
        end: {
          line: 212,
          column: 71
        }
      },
      "125": {
        start: {
          line: 213,
          column: 32
        },
        end: {
          line: 213,
          column: 147
        }
      },
      "126": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 135
        }
      },
      "127": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 116
        }
      },
      "128": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 230,
          column: 28
        }
      },
      "129": {
        start: {
          line: 220,
          column: 34
        },
        end: {
          line: 230,
          column: 25
        }
      },
      "130": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 79
        }
      },
      "131": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 85
        }
      },
      "132": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 95
        }
      },
      "133": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 238,
          column: 23
        }
      },
      "134": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 49
        }
      },
      "135": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 54
        }
      },
      "136": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 34
        }
      },
      "137": {
        start: {
          line: 248,
          column: 32
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "138": {
        start: {
          line: 253,
          column: 26
        },
        end: {
          line: 255,
          column: 9
        }
      },
      "139": {
        start: {
          line: 256,
          column: 28
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "140": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "141": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 85
        }
      },
      "142": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 40
        }
      },
      "143": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "144": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 264,
          column: 77
        }
      },
      "145": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 267,
          column: 26
        }
      },
      "146": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 70
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 18,
            column: 36
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 26,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 28,
            column: 25
          },
          end: {
            line: 28,
            column: 26
          }
        },
        loc: {
          start: {
            line: 28,
            column: 29
          },
          end: {
            line: 31,
            column: 1
          }
        },
        line: 28
      },
      "3": {
        name: "loadLocalTranslations",
        decl: {
          start: {
            line: 34,
            column: 19
          },
          end: {
            line: 34,
            column: 40
          }
        },
        loc: {
          start: {
            line: 34,
            column: 47
          },
          end: {
            line: 51,
            column: 1
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 73
          },
          end: {
            line: 52,
            column: 74
          }
        },
        loc: {
          start: {
            line: 52,
            column: 86
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 52
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 68
          },
          end: {
            line: 54,
            column: 69
          }
        },
        loc: {
          start: {
            line: 54,
            column: 81
          },
          end: {
            line: 57,
            column: 9
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 61,
            column: 75
          },
          end: {
            line: 61,
            column: 76
          }
        },
        loc: {
          start: {
            line: 61,
            column: 88
          },
          end: {
            line: 64,
            column: 9
          }
        },
        line: 61
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 21
          },
          end: {
            line: 65,
            column: 22
          }
        },
        loc: {
          start: {
            line: 65,
            column: 35
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 65
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 82,
            column: 31
          }
        },
        loc: {
          start: {
            line: 82,
            column: 40
          },
          end: {
            line: 115,
            column: 9
          }
        },
        line: 82
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 116,
            column: 21
          },
          end: {
            line: 116,
            column: 22
          }
        },
        loc: {
          start: {
            line: 116,
            column: 33
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 116
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 122,
            column: 11
          },
          end: {
            line: 122,
            column: 12
          }
        },
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 122
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 156,
            column: 45
          },
          end: {
            line: 156,
            column: 46
          }
        },
        loc: {
          start: {
            line: 156,
            column: 64
          },
          end: {
            line: 158,
            column: 17
          }
        },
        line: 156
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 162,
            column: 26
          },
          end: {
            line: 162,
            column: 27
          }
        },
        loc: {
          start: {
            line: 162,
            column: 40
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 162
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 185,
            column: 36
          },
          end: {
            line: 185,
            column: 37
          }
        },
        loc: {
          start: {
            line: 185,
            column: 46
          },
          end: {
            line: 243,
            column: 13
          }
        },
        line: 185
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 220,
            column: 25
          }
        },
        loc: {
          start: {
            line: 220,
            column: 34
          },
          end: {
            line: 230,
            column: 25
          }
        },
        line: 220
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 248,
            column: 24
          },
          end: {
            line: 248,
            column: 25
          }
        },
        loc: {
          start: {
            line: 248,
            column: 32
          },
          end: {
            line: 250,
            column: 14
          }
        },
        line: 248
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 17
          }
        },
        loc: {
          start: {
            line: 253,
            column: 26
          },
          end: {
            line: 255,
            column: 9
          }
        },
        line: 253
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 256,
            column: 24
          },
          end: {
            line: 256,
            column: 25
          }
        },
        loc: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 270,
            column: 9
          }
        },
        line: 256
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 29
          }
        },
        loc: {
          start: {
            line: 256,
            column: 37
          },
          end: {
            line: 270,
            column: 9
          }
        },
        line: 256
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 265,
            column: 31
          },
          end: {
            line: 265,
            column: 32
          }
        },
        loc: {
          start: {
            line: 265,
            column: 35
          },
          end: {
            line: 267,
            column: 21
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 15
          }
        }, {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 75
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 83
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 83
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "6": {
        loc: {
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 54
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 83,
            column: 54
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "10": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 114,
            column: 13
          }
        }, {
          start: {
            line: 107,
            column: 19
          },
          end: {
            line: 114,
            column: 13
          }
        }],
        line: 93
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        }, {
          start: {
            line: 104,
            column: 23
          },
          end: {
            line: 106,
            column: 17
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 127,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "14": {
        loc: {
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 27
          }
        }, {
          start: {
            line: 125,
            column: 31
          },
          end: {
            line: 125,
            column: 40
          }
        }],
        line: 125
      },
      "15": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "16": {
        loc: {
          start: {
            line: 133,
            column: 40
          },
          end: {
            line: 133,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 40
          },
          end: {
            line: 133,
            column: 69
          }
        }, {
          start: {
            line: 133,
            column: 73
          },
          end: {
            line: 133,
            column: 75
          }
        }],
        line: 133
      },
      "17": {
        loc: {
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 12
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "18": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 136,
            column: 28
          }
        }, {
          start: {
            line: 136,
            column: 32
          },
          end: {
            line: 136,
            column: 88
          }
        }],
        line: 136
      },
      "19": {
        loc: {
          start: {
            line: 137,
            column: 44
          },
          end: {
            line: 137,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 44
          },
          end: {
            line: 137,
            column: 94
          }
        }, {
          start: {
            line: 137,
            column: 98
          },
          end: {
            line: 137,
            column: 100
          }
        }],
        line: 137
      },
      "20": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 142,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 142,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "21": {
        loc: {
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 145,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 145
      },
      "22": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "23": {
        loc: {
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 155,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 155
      },
      "24": {
        loc: {
          start: {
            line: 155,
            column: 16
          },
          end: {
            line: 155,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 16
          },
          end: {
            line: 155,
            column: 20
          }
        }, {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 155,
            column: 55
          }
        }],
        line: 155
      },
      "25": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "26": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "27": {
        loc: {
          start: {
            line: 174,
            column: 36
          },
          end: {
            line: 174,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 174,
            column: 36
          },
          end: {
            line: 174,
            column: 54
          }
        }, {
          start: {
            line: 174,
            column: 58
          },
          end: {
            line: 174,
            column: 100
          }
        }],
        line: 174
      },
      "28": {
        loc: {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "29": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 176,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 176,
            column: 32
          }
        }, {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 176,
            column: 51
          }
        }],
        line: 176
      },
      "30": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "31": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 180,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 180,
            column: 32
          }
        }, {
          start: {
            line: 180,
            column: 36
          },
          end: {
            line: 180,
            column: 52
          }
        }],
        line: 180
      },
      "32": {
        loc: {
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 202,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 24
          },
          end: {
            line: 202,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "33": {
        loc: {
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "34": {
        loc: {
          start: {
            line: 207,
            column: 24
          },
          end: {
            line: 207,
            column: 115
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 24
          },
          end: {
            line: 207,
            column: 66
          }
        }, {
          start: {
            line: 207,
            column: 70
          },
          end: {
            line: 207,
            column: 115
          }
        }],
        line: 207
      },
      "35": {
        loc: {
          start: {
            line: 211,
            column: 28
          },
          end: {
            line: 214,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 28
          },
          end: {
            line: 214,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "36": {
        loc: {
          start: {
            line: 236,
            column: 31
          },
          end: {
            line: 236,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 56
          },
          end: {
            line: 236,
            column: 69
          }
        }, {
          start: {
            line: 236,
            column: 72
          },
          end: {
            line: 236,
            column: 101
          }
        }],
        line: 236
      },
      "37": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "38": {
        loc: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 21
          }
        }, {
          start: {
            line: 257,
            column: 25
          },
          end: {
            line: 257,
            column: 54
          }
        }],
        line: 257
      },
      "39": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/cheolhyun/Repositories/picnic-web/stores/languageStore.ts"],
      sourcesContent: ["import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { type Language, settings } from \"@/config/settings\";\nimport { translationLogger } from \"@/utils/translationLogger\";\n\n// \uC9C4\uD589 \uC911\uC778 \uBC88\uC5ED \uB85C\uB529 Promise\uB4E4\uC744 \uCD94\uC801\uD558\uB294 \uB9F5\nconst loadingPromises = new Map<Language, Promise<void>>();\n\n// URL\uC5D0\uC11C \uD604\uC7AC \uC5B8\uC5B4 \uAC00\uC838\uC624\uAE30\nconst getCurrentLanguageFromPath = (): Language => {\n  if (typeof window === \"undefined\") return settings.languages.default;\n\n  const pathSegments = window.location.pathname.split(\"/\");\n  const urlLang = pathSegments[1] as Language;\n\n  if (urlLang && settings.languages.supported.includes(urlLang)) {\n    return urlLang;\n  }\n\n  return settings.languages.default;\n};\n\n// \uCD08\uAE30 \uC5B8\uC5B4 \uC124\uC815\uC740 \uD56D\uC0C1 URL \uACBD\uB85C\uC5D0\uC11C \uAC00\uC838\uC634 (\uD074\uB77C\uC774\uC5B8\uD2B8\uC5D0\uC11C\uB9CC)\nconst initialLanguage: Language = (() => {\n  if (typeof window === \"undefined\") return settings.languages.default;\n  return getCurrentLanguageFromPath();\n})();\n\ninterface LanguageState {\n  currentLanguage: Language;\n  translations: Record<Language, Record<string, string>>;\n  isLoading: boolean;\n  error: string | null;\n  isTranslationLoaded: Record<Language, boolean>;\n  isHydrated: boolean;\n  t: (key: string, args?: Record<string, string>) => string;\n  setLanguage: (lang: Language) => Promise<void>;\n  syncLanguageWithPath: () => Promise<void>;\n  loadTranslations: (lang: Language) => Promise<void>;\n  setCurrentLang: (lang: Language) => void;\n  setHydrated: (hydrated: boolean) => void;\n}\n\n/**\n * \uB85C\uCEEC \uBC88\uC5ED \uD30C\uC77C \uB85C\uB4DC\n */\nasync function loadLocalTranslations(\n  lang: Language,\n): Promise<Record<string, string> | null> {\n  if (typeof window === \"undefined\") return null;\n  \n  try {\n    const url = `/locales/${lang}.json`;\n    console.log(`\uD83D\uDD04 Loading local translations from: ${url}`);\n    \n    const response = await fetch(url);\n    console.log(`\uD83D\uDCE5 Response status for ${lang}:`, response.status, response.ok);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to load local translations for ${lang}: ${response.status}`);\n    }\n    \n    const translations: Record<string, string> = await response.json();\n    console.log(`\u2705 Loaded ${Object.keys(translations).length} translation keys for ${lang}`);\n    \n    return translations;\n  } catch (error) {\n    console.warn(`\u274C Local translations not found for ${lang}:`, error);\n    return null;\n  }\n}\n\nexport const useLanguageStore = create<LanguageState>()(\n  persist(\n    (set, get) => ({\n      currentLanguage: initialLanguage,\n      translations: settings.languages.supported.reduce((acc, lang) => {\n        acc[lang] = {};\n        return acc;\n      }, {} as Record<Language, Record<string, string>>),\n      isLoading: false,\n      error: null,\n      isHydrated: false,\n      isTranslationLoaded: settings.languages.supported.reduce((acc, lang) => {\n        acc[lang] = false;\n        return acc;\n      }, {} as Record<Language, boolean>),\n      setLanguage: async (lang: Language) => {\n        if (!settings.languages.supported.includes(lang)) {\n          console.warn(`Unsupported language: ${lang}`);\n          return;\n        }\n\n        const { currentLanguage } = get();\n        console.log(`\uD83D\uDD04 setLanguage called: ${lang}`);\n        translationLogger.logLanguageSync(currentLanguage, lang, 'setLanguage');\n        \n        set({ currentLanguage: lang });\n\n        // \uBC88\uC5ED\uC774 \uB85C\uB4DC\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0 \uB85C\uB4DC\n        const { isTranslationLoaded } = get();\n        if (!isTranslationLoaded[lang]) {\n          await get().loadTranslations(lang);\n        }\n      },\n      syncLanguageWithPath: async () => {\n        if (typeof window === \"undefined\") return;\n        \n        const { isHydrated } = get();\n        \n        // hydration\uC774 \uC644\uB8CC\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0 \uB300\uAE30\n        if (!isHydrated) {\n          console.log('\uD83D\uDD04 [syncLanguageWithPath] Waiting for hydration to complete...');\n          return;\n        }\n        \n        const langFromPath = getCurrentLanguageFromPath();\n        const { currentLanguage, isTranslationLoaded } = get();\n        \n        console.log(`\uD83D\uDD04 [syncLanguageWithPath] Current: ${currentLanguage}, Path: ${langFromPath}`);\n        \n        if (langFromPath !== currentLanguage) {\n          console.log(`\uD83D\uDD04 [syncLanguageWithPath] Language mismatch detected, updating store from ${currentLanguage} to ${langFromPath}`);\n          translationLogger.logLanguageSync(currentLanguage, langFromPath, 'syncLanguageWithPath');\n          \n          // \uC5B8\uC5B4 \uC0C1\uD0DC \uC989\uC2DC \uC5C5\uB370\uC774\uD2B8\n          set({ currentLanguage: langFromPath });\n          \n          // \uBC88\uC5ED\uC774 \uB85C\uB4DC\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0\uC5D0\uB9CC \uB85C\uB4DC\n          if (!isTranslationLoaded[langFromPath]) {\n            console.log(`\uD83D\uDD04 [syncLanguageWithPath] Loading translations for ${langFromPath}`);\n            await get().loadTranslations(langFromPath);\n          } else {\n            console.log(`\u2705 [syncLanguageWithPath] Translations for ${langFromPath} already loaded`);\n          }\n        } else {\n          console.log(`\u2705 [syncLanguageWithPath] Language already synchronized: ${currentLanguage}`);\n          \n          // \uC5B8\uC5B4\uB294 \uB9DE\uC9C0\uB9CC \uBC88\uC5ED\uC774 \uB85C\uB4DC\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0\n          if (!isTranslationLoaded[currentLanguage]) {\n            console.log(`\uD83D\uDD04 [syncLanguageWithPath] Loading missing translations for ${currentLanguage}`);\n            await get().loadTranslations(currentLanguage);\n          }\n        }\n      },\n      setHydrated: (hydrated: boolean) => {\n        console.log(`\uD83D\uDD04 Setting hydration status: ${hydrated}`);\n        set({ isHydrated: hydrated });\n      },\n      t: (key: string, args?: Record<string, string>) => {\n        const { translations, currentLanguage, isHydrated, isTranslationLoaded, isLoading } = get();\n\n        // hydration\uC774 \uC644\uB8CC\uB418\uC9C0 \uC54A\uC558\uAC70\uB098 \uBC88\uC5ED \uB85C\uB529 \uC911\uC778 \uACBD\uC6B0 \uBE48 \uBB38\uC790\uC5F4 \uBC18\uD658\n        if (!isHydrated || isLoading) {\n          return '';\n        }\n\n        // \uD604\uC7AC \uC5B8\uC5B4\uC758 \uBC88\uC5ED\uC774 \uC544\uC9C1 \uB85C\uB4DC\uB418\uC9C0 \uC54A\uC740 \uACBD\uC6B0 \uBE48 \uBB38\uC790\uC5F4 \uBC18\uD658\n        if (!isTranslationLoaded[currentLanguage]) {\n          return '';\n        }\n\n        // \uD604\uC7AC \uC5B8\uC5B4\uC758 \uBC88\uC5ED \uCC3E\uAE30\n        const currentTranslations = translations[currentLanguage] || {};\n        let translation = currentTranslations[key];\n\n        // \uBC88\uC5ED\uC774 \uC5C6\uB294 \uACBD\uC6B0 \uAE30\uBCF8 \uC5B8\uC5B4\uC5D0\uC11C \uCC3E\uAE30\n        if (!translation && currentLanguage !== settings.languages.default) {\n          const defaultTranslations = translations[settings.languages.default] || {};\n          translation = defaultTranslations[key];\n          \n          if (translation) {\n            // \uAE30\uBCF8 \uC5B8\uC5B4\uC5D0\uC11C \uCC3E\uC740 \uACBD\uC6B0 \uB85C\uAE45\n            translationLogger.logMissingTranslation(\n              key, \n              currentLanguage, \n              'fallback_to_default', \n              translation\n            );\n          }\n        }\n\n        // \uC5EC\uC804\uD788 \uBC88\uC5ED\uC774 \uC5C6\uB294 \uACBD\uC6B0 \uCC98\uB9AC\n        if (!translation) {\n          translationLogger.logMissingTranslation(key, currentLanguage, 'no_translation_found');\n          \n          // \uBC88\uC5ED\uC774 \uC644\uC804\uD788 \uB85C\uB4DC\uB41C \uC0C1\uD0DC\uC5D0\uC11C \uD0A4\uAC00 \uC5C6\uB294 \uACBD\uC6B0\uC5D0\uB9CC \uD0A4 \uBC18\uD658 (\uAC1C\uBC1C\uC6A9)\n          // \uD504\uB85C\uB355\uC158\uC5D0\uC11C\uB294 \uBE48 \uBB38\uC790\uC5F4 \uBC18\uD658\n          if (process.env.NODE_ENV === 'development') {\n            return `[${key}]`; // \uAC1C\uBC1C \uD658\uACBD\uC5D0\uC11C\uB294 \uD0A4\uB97C \uB300\uAD04\uD638\uB85C \uAC10\uC2F8\uC11C \uD45C\uC2DC\n          }\n          return ''; // \uD504\uB85C\uB355\uC158\uC5D0\uC11C\uB294 \uBE48 \uBB38\uC790\uC5F4\n        }\n\n        // \uBCC0\uC218 \uCE58\uD658\n        if (args && typeof translation === \"string\") {\n          Object.entries(args).forEach(([argKey, value]) => {\n            translation = translation.replace(`{${argKey}}`, value);\n          });\n        }\n\n        return translation;\n      },\n      loadTranslations: async (lang: Language) => {\n        // \uC11C\uBC84 \uC0AC\uC774\uB4DC\uC5D0\uC11C\uB294 \uB85C\uB529\uD558\uC9C0 \uC54A\uC74C\n        if (typeof window === \"undefined\") {\n          return;\n        }\n\n        const { isTranslationLoaded, translations } = get();\n\n        // \uC774\uBBF8 \uC9C4\uD589 \uC911\uC778 \uB85C\uB529\uC774 \uC788\uB294\uC9C0 \uD655\uC778\n        if (loadingPromises.has(lang)) {\n          console.log(`\uD83D\uDD04 Translation loading already in progress for ${lang}, waiting...`);\n          return loadingPromises.get(lang);\n        }\n\n        // \uAC15\uC81C\uB85C \uB2E4\uC2DC \uB85C\uB4DC\uD558\uAC70\uB098 \uC774\uBBF8 \uB85C\uB4DC\uB41C \uACBD\uC6B0 \uCCB4\uD06C\n        const hasTranslations = translations[lang] && Object.keys(translations[lang]).length > 0;\n        const isMarkedAsLoaded = isTranslationLoaded[lang];\n        \n        if (isMarkedAsLoaded && hasTranslations) {\n          console.log(`\u2705 Translations for ${lang} already loaded with ${Object.keys(translations[lang]).length} keys, skipping`);\n          return;\n        }\n        \n        if (isMarkedAsLoaded && !hasTranslations) {\n          console.log(`\u26A0\uFE0F ${lang} marked as loaded but has no translations, force reloading...`);\n        }\n\n        console.log(`\uD83D\uDD04 Starting to load translations for ${lang}`);\n        \n        // Promise \uC0DD\uC131 \uBC0F \uCE90\uC2F1\n        const loadingPromise = (async () => {\n          try {\n            set({ isLoading: true, error: null });\n\n            let translationsData: Record<string, string> = {};\n\n            // \uB85C\uCEEC \uBC88\uC5ED \uD30C\uC77C \uB85C\uB4DC\n            try {\n              const localTranslations = await loadLocalTranslations(lang);\n              if (localTranslations) {\n                translationsData = { ...translationsData, ...localTranslations };\n                console.log(`\u2705 Local translations loaded for ${lang}:`, Object.keys(localTranslations).length, 'keys');\n                translationLogger.logTranslationSuccess(lang, Object.keys(localTranslations).length, 'local');\n              }\n            } catch (error) {\n              translationLogger.logLoadingError(lang, error as Error, 'local');\n            }\n\n            // \uBC88\uC5ED\uC774 \uC5C6\uB294 \uACBD\uC6B0 \uAE30\uBCF8 \uC5B8\uC5B4\uB85C fallback\n            if (Object.keys(translationsData).length === 0 && lang !== settings.languages.default) {\n              console.warn(\n                `No translations found for ${lang}, falling back to ${settings.languages.default}`,\n              );\n              try {\n                const defaultTranslations = await loadLocalTranslations(settings.languages.default);\n                if (defaultTranslations) {\n                  translationsData = defaultTranslations;\n                  translationLogger.logTranslationSuccess(lang, Object.keys(defaultTranslations).length, 'local');\n                }\n              } catch (error) {\n                translationLogger.logLoadingError(settings.languages.default, error as Error, 'local');\n              }\n            }\n\n            console.log(`\uD83C\uDF89 Final translations for ${lang}:`, Object.keys(translationsData).length, 'keys');\n\n            set((state) => ({\n              translations: {\n                ...state.translations,\n                [lang]: translationsData,\n              },\n              isLoading: false,\n              isTranslationLoaded: {\n                ...state.isTranslationLoaded,\n                [lang]: true,\n              },\n            }));\n\n            console.log(`\u2705 Translation loading completed for ${lang}`);\n          } catch (error) {\n            console.error(`Failed to load translations for ${lang}:`, error);\n            translationLogger.logLoadingError(lang, error as Error, 'local');\n            \n            set({\n              error: error instanceof Error\n                ? error.message\n                : \"Failed to load translations\",\n              isLoading: false,\n            });\n          } finally {\n            // Promise \uCE90\uC2DC\uC5D0\uC11C \uC81C\uAC70\n            loadingPromises.delete(lang);\n          }\n        })();\n\n        // Promise \uCE90\uC2F1\n        loadingPromises.set(lang, loadingPromise);\n        \n        return loadingPromise;\n      },\n      setCurrentLang: (lang) => set({ currentLanguage: lang }),\n    }),\n    {\n      name: \"language-storage\",\n      partialize: (state) => ({\n        currentLanguage: state.currentLanguage,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state && typeof window !== \"undefined\") {\n          console.log('\uD83D\uDD04 Rehydrating language store:', state.currentLanguage);\n          \n          // hydration \uC644\uB8CC \uD45C\uC2DC\n          state.setHydrated(true);\n          \n          // \uB9AC\uD558\uC774\uB4DC\uB808\uC774\uC158 \uD6C4 \uD604\uC7AC \uC5B8\uC5B4\uC758 \uBC88\uC5ED\uC774 \uB85C\uB4DC\uB418\uC9C0 \uC54A\uC558\uB2E4\uBA74 \uB85C\uB4DC\n          // setTimeout\uC744 \uC0AC\uC6A9\uD558\uC5EC \uB80C\uB354\uB9C1 \uC0AC\uC774\uD074\uACFC \uBD84\uB9AC\n          if (!state.isTranslationLoaded[state.currentLanguage]) {\n            console.log('\uD83D\uDD04 Loading translations after rehydration');\n            setTimeout(() => {\n              state.loadTranslations(state.currentLanguage);\n            }, 0);\n          }\n        }\n      },\n    },\n  ),\n);\n"],
      names: ["useLanguageStore", "loadingPromises", "Map", "getCurrentLanguageFromPath", "window", "settings", "languages", "default", "pathSegments", "location", "pathname", "split", "urlLang", "supported", "includes", "initialLanguage", "loadLocalTranslations", "lang", "url", "console", "log", "response", "fetch", "status", "ok", "Error", "translations", "json", "Object", "keys", "length", "error", "warn", "create", "persist", "set", "get", "currentLanguage", "reduce", "acc", "isLoading", "isHydrated", "isTranslationLoaded", "setLanguage", "translationLogger", "logLanguageSync", "loadTranslations", "syncLanguageWithPath", "langFromPath", "setHydrated", "hydrated", "t", "key", "args", "currentTranslations", "translation", "defaultTranslations", "logMissingTranslation", "process", "env", "NODE_ENV", "entries", "forEach", "argKey", "value", "replace", "has", "hasTranslations", "isMarkedAsLoaded", "loadingPromise", "translationsData", "localTranslations", "logTranslationSuccess", "logLoadingError", "state", "message", "delete", "setCurrentLang", "name", "partialize", "onRehydrateStorage", "setTimeout"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9e0ab44d1b7a4165be60637976cdbb4a250f8fb9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_252gvfu07d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_252gvfu07d();
cov_252gvfu07d().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_252gvfu07d().s[1]++;
Object.defineProperty(exports, "useLanguageStore", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_252gvfu07d().f[0]++;
    cov_252gvfu07d().s[2]++;
    return useLanguageStore;
  }
});
const _zustand =
/* istanbul ignore next */
(cov_252gvfu07d().s[3]++, require("zustand"));
const _middleware =
/* istanbul ignore next */
(cov_252gvfu07d().s[4]++, require("zustand/middleware"));
const _settings =
/* istanbul ignore next */
(cov_252gvfu07d().s[5]++, require("../config/settings"));
const _translationLogger =
/* istanbul ignore next */
(cov_252gvfu07d().s[6]++, require("../utils/translationLogger"));
// 진행 중인 번역 로딩 Promise들을 추적하는 맵
const loadingPromises =
/* istanbul ignore next */
(cov_252gvfu07d().s[7]++, new Map());
// URL에서 현재 언어 가져오기
/* istanbul ignore next */
cov_252gvfu07d().s[8]++;
const getCurrentLanguageFromPath = () => {
  /* istanbul ignore next */
  cov_252gvfu07d().f[1]++;
  cov_252gvfu07d().s[9]++;
  if (typeof window === "undefined") {
    /* istanbul ignore next */
    cov_252gvfu07d().b[0][0]++;
    cov_252gvfu07d().s[10]++;
    return _settings.settings.languages.default;
  } else
  /* istanbul ignore next */
  {
    cov_252gvfu07d().b[0][1]++;
  }
  const pathSegments =
  /* istanbul ignore next */
  (cov_252gvfu07d().s[11]++, window.location.pathname.split("/"));
  const urlLang =
  /* istanbul ignore next */
  (cov_252gvfu07d().s[12]++, pathSegments[1]);
  /* istanbul ignore next */
  cov_252gvfu07d().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_252gvfu07d().b[2][0]++, urlLang) &&
  /* istanbul ignore next */
  (cov_252gvfu07d().b[2][1]++, _settings.settings.languages.supported.includes(urlLang))) {
    /* istanbul ignore next */
    cov_252gvfu07d().b[1][0]++;
    cov_252gvfu07d().s[14]++;
    return urlLang;
  } else
  /* istanbul ignore next */
  {
    cov_252gvfu07d().b[1][1]++;
  }
  cov_252gvfu07d().s[15]++;
  return _settings.settings.languages.default;
};
// 초기 언어 설정은 항상 URL 경로에서 가져옴 (클라이언트에서만)
const initialLanguage =
/* istanbul ignore next */
(cov_252gvfu07d().s[16]++, (() => {
  /* istanbul ignore next */
  cov_252gvfu07d().f[2]++;
  cov_252gvfu07d().s[17]++;
  if (typeof window === "undefined") {
    /* istanbul ignore next */
    cov_252gvfu07d().b[3][0]++;
    cov_252gvfu07d().s[18]++;
    return _settings.settings.languages.default;
  } else
  /* istanbul ignore next */
  {
    cov_252gvfu07d().b[3][1]++;
  }
  cov_252gvfu07d().s[19]++;
  return getCurrentLanguageFromPath();
})());
/**
 * 로컬 번역 파일 로드
 */
async function loadLocalTranslations(lang) {
  /* istanbul ignore next */
  cov_252gvfu07d().f[3]++;
  cov_252gvfu07d().s[20]++;
  if (typeof window === "undefined") {
    /* istanbul ignore next */
    cov_252gvfu07d().b[4][0]++;
    cov_252gvfu07d().s[21]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_252gvfu07d().b[4][1]++;
  }
  cov_252gvfu07d().s[22]++;
  try {
    const url =
    /* istanbul ignore next */
    (cov_252gvfu07d().s[23]++, `/locales/${lang}.json`);
    /* istanbul ignore next */
    cov_252gvfu07d().s[24]++;
    console.log(`🔄 Loading local translations from: ${url}`);
    const response =
    /* istanbul ignore next */
    (cov_252gvfu07d().s[25]++, await fetch(url));
    /* istanbul ignore next */
    cov_252gvfu07d().s[26]++;
    console.log(`📥 Response status for ${lang}:`, response.status, response.ok);
    /* istanbul ignore next */
    cov_252gvfu07d().s[27]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_252gvfu07d().b[5][0]++;
      cov_252gvfu07d().s[28]++;
      throw new Error(`Failed to load local translations for ${lang}: ${response.status}`);
    } else
    /* istanbul ignore next */
    {
      cov_252gvfu07d().b[5][1]++;
    }
    const translations =
    /* istanbul ignore next */
    (cov_252gvfu07d().s[29]++, await response.json());
    /* istanbul ignore next */
    cov_252gvfu07d().s[30]++;
    console.log(`✅ Loaded ${Object.keys(translations).length} translation keys for ${lang}`);
    /* istanbul ignore next */
    cov_252gvfu07d().s[31]++;
    return translations;
  } catch (error) {
    /* istanbul ignore next */
    cov_252gvfu07d().s[32]++;
    console.warn(`❌ Local translations not found for ${lang}:`, error);
    /* istanbul ignore next */
    cov_252gvfu07d().s[33]++;
    return null;
  }
}
const useLanguageStore =
/* istanbul ignore next */
(cov_252gvfu07d().s[34]++, (0, _zustand.create)()((0, _middleware.persist)((set, get) => {
  /* istanbul ignore next */
  cov_252gvfu07d().f[4]++;
  cov_252gvfu07d().s[35]++;
  return {
    currentLanguage: initialLanguage,
    translations: _settings.settings.languages.supported.reduce((acc, lang) => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[5]++;
      cov_252gvfu07d().s[36]++;
      acc[lang] = {};
      /* istanbul ignore next */
      cov_252gvfu07d().s[37]++;
      return acc;
    }, {}),
    isLoading: false,
    error: null,
    isHydrated: false,
    isTranslationLoaded: _settings.settings.languages.supported.reduce((acc, lang) => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[6]++;
      cov_252gvfu07d().s[38]++;
      acc[lang] = false;
      /* istanbul ignore next */
      cov_252gvfu07d().s[39]++;
      return acc;
    }, {}),
    setLanguage: async lang => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[7]++;
      cov_252gvfu07d().s[40]++;
      if (!_settings.settings.languages.supported.includes(lang)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[6][0]++;
        cov_252gvfu07d().s[41]++;
        console.warn(`Unsupported language: ${lang}`);
        /* istanbul ignore next */
        cov_252gvfu07d().s[42]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[6][1]++;
      }
      const {
        currentLanguage
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[43]++, get());
      /* istanbul ignore next */
      cov_252gvfu07d().s[44]++;
      console.log(`🔄 setLanguage called: ${lang}`);
      /* istanbul ignore next */
      cov_252gvfu07d().s[45]++;
      _translationLogger.translationLogger.logLanguageSync(currentLanguage, lang, 'setLanguage');
      /* istanbul ignore next */
      cov_252gvfu07d().s[46]++;
      set({
        currentLanguage: lang
      });
      // 번역이 로드되지 않은 경우 로드
      const {
        isTranslationLoaded
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[47]++, get());
      /* istanbul ignore next */
      cov_252gvfu07d().s[48]++;
      if (!isTranslationLoaded[lang]) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[7][0]++;
        cov_252gvfu07d().s[49]++;
        await get().loadTranslations(lang);
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[7][1]++;
      }
    },
    syncLanguageWithPath: async () => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[8]++;
      cov_252gvfu07d().s[50]++;
      if (typeof window === "undefined") {
        /* istanbul ignore next */
        cov_252gvfu07d().b[8][0]++;
        cov_252gvfu07d().s[51]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[8][1]++;
      }
      const {
        isHydrated
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[52]++, get());
      // hydration이 완료되지 않은 경우 대기
      /* istanbul ignore next */
      cov_252gvfu07d().s[53]++;
      if (!isHydrated) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[9][0]++;
        cov_252gvfu07d().s[54]++;
        console.log('🔄 [syncLanguageWithPath] Waiting for hydration to complete...');
        /* istanbul ignore next */
        cov_252gvfu07d().s[55]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[9][1]++;
      }
      const langFromPath =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[56]++, getCurrentLanguageFromPath());
      const {
        currentLanguage,
        isTranslationLoaded
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[57]++, get());
      /* istanbul ignore next */
      cov_252gvfu07d().s[58]++;
      console.log(`🔄 [syncLanguageWithPath] Current: ${currentLanguage}, Path: ${langFromPath}`);
      /* istanbul ignore next */
      cov_252gvfu07d().s[59]++;
      if (langFromPath !== currentLanguage) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[10][0]++;
        cov_252gvfu07d().s[60]++;
        console.log(`🔄 [syncLanguageWithPath] Language mismatch detected, updating store from ${currentLanguage} to ${langFromPath}`);
        /* istanbul ignore next */
        cov_252gvfu07d().s[61]++;
        _translationLogger.translationLogger.logLanguageSync(currentLanguage, langFromPath, 'syncLanguageWithPath');
        // 언어 상태 즉시 업데이트
        /* istanbul ignore next */
        cov_252gvfu07d().s[62]++;
        set({
          currentLanguage: langFromPath
        });
        // 번역이 로드되지 않은 경우에만 로드
        /* istanbul ignore next */
        cov_252gvfu07d().s[63]++;
        if (!isTranslationLoaded[langFromPath]) {
          /* istanbul ignore next */
          cov_252gvfu07d().b[11][0]++;
          cov_252gvfu07d().s[64]++;
          console.log(`🔄 [syncLanguageWithPath] Loading translations for ${langFromPath}`);
          /* istanbul ignore next */
          cov_252gvfu07d().s[65]++;
          await get().loadTranslations(langFromPath);
        } else {
          /* istanbul ignore next */
          cov_252gvfu07d().b[11][1]++;
          cov_252gvfu07d().s[66]++;
          console.log(`✅ [syncLanguageWithPath] Translations for ${langFromPath} already loaded`);
        }
      } else {
        /* istanbul ignore next */
        cov_252gvfu07d().b[10][1]++;
        cov_252gvfu07d().s[67]++;
        console.log(`✅ [syncLanguageWithPath] Language already synchronized: ${currentLanguage}`);
        // 언어는 맞지만 번역이 로드되지 않은 경우
        /* istanbul ignore next */
        cov_252gvfu07d().s[68]++;
        if (!isTranslationLoaded[currentLanguage]) {
          /* istanbul ignore next */
          cov_252gvfu07d().b[12][0]++;
          cov_252gvfu07d().s[69]++;
          console.log(`🔄 [syncLanguageWithPath] Loading missing translations for ${currentLanguage}`);
          /* istanbul ignore next */
          cov_252gvfu07d().s[70]++;
          await get().loadTranslations(currentLanguage);
        } else
        /* istanbul ignore next */
        {
          cov_252gvfu07d().b[12][1]++;
        }
      }
    },
    setHydrated: hydrated => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[9]++;
      cov_252gvfu07d().s[71]++;
      console.log(`🔄 Setting hydration status: ${hydrated}`);
      /* istanbul ignore next */
      cov_252gvfu07d().s[72]++;
      set({
        isHydrated: hydrated
      });
    },
    t: (key, args) => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[10]++;
      const {
        translations,
        currentLanguage,
        isHydrated,
        isTranslationLoaded,
        isLoading
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[73]++, get());
      // hydration이 완료되지 않았거나 번역 로딩 중인 경우 빈 문자열 반환
      /* istanbul ignore next */
      cov_252gvfu07d().s[74]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[14][0]++, !isHydrated) ||
      /* istanbul ignore next */
      (cov_252gvfu07d().b[14][1]++, isLoading)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[13][0]++;
        cov_252gvfu07d().s[75]++;
        return '';
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[13][1]++;
      }
      // 현재 언어의 번역이 아직 로드되지 않은 경우 빈 문자열 반환
      cov_252gvfu07d().s[76]++;
      if (!isTranslationLoaded[currentLanguage]) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[15][0]++;
        cov_252gvfu07d().s[77]++;
        return '';
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[15][1]++;
      }
      // 현재 언어의 번역 찾기
      const currentTranslations =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[78]++,
      /* istanbul ignore next */
      (cov_252gvfu07d().b[16][0]++, translations[currentLanguage]) ||
      /* istanbul ignore next */
      (cov_252gvfu07d().b[16][1]++, {}));
      let translation =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[79]++, currentTranslations[key]);
      // 번역이 없는 경우 기본 언어에서 찾기
      /* istanbul ignore next */
      cov_252gvfu07d().s[80]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[18][0]++, !translation) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[18][1]++, currentLanguage !== _settings.settings.languages.default)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[17][0]++;
        const defaultTranslations =
        /* istanbul ignore next */
        (cov_252gvfu07d().s[81]++,
        /* istanbul ignore next */
        (cov_252gvfu07d().b[19][0]++, translations[_settings.settings.languages.default]) ||
        /* istanbul ignore next */
        (cov_252gvfu07d().b[19][1]++, {}));
        /* istanbul ignore next */
        cov_252gvfu07d().s[82]++;
        translation = defaultTranslations[key];
        /* istanbul ignore next */
        cov_252gvfu07d().s[83]++;
        if (translation) {
          /* istanbul ignore next */
          cov_252gvfu07d().b[20][0]++;
          cov_252gvfu07d().s[84]++;
          // 기본 언어에서 찾은 경우 로깅
          _translationLogger.translationLogger.logMissingTranslation(key, currentLanguage, 'fallback_to_default', translation);
        } else
        /* istanbul ignore next */
        {
          cov_252gvfu07d().b[20][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[17][1]++;
      }
      // 여전히 번역이 없는 경우 처리
      cov_252gvfu07d().s[85]++;
      if (!translation) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[21][0]++;
        cov_252gvfu07d().s[86]++;
        _translationLogger.translationLogger.logMissingTranslation(key, currentLanguage, 'no_translation_found');
        // 번역이 완전히 로드된 상태에서 키가 없는 경우에만 키 반환 (개발용)
        // 프로덕션에서는 빈 문자열 반환
        /* istanbul ignore next */
        cov_252gvfu07d().s[87]++;
        if (process.env.NODE_ENV === 'development') {
          /* istanbul ignore next */
          cov_252gvfu07d().b[22][0]++;
          cov_252gvfu07d().s[88]++;
          return `[${key}]`; // 개발 환경에서는 키를 대괄호로 감싸서 표시
        } else
        /* istanbul ignore next */
        {
          cov_252gvfu07d().b[22][1]++;
        }
        cov_252gvfu07d().s[89]++;
        return ''; // 프로덕션에서는 빈 문자열
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[21][1]++;
      }
      // 변수 치환
      cov_252gvfu07d().s[90]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[24][0]++, args) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[24][1]++, typeof translation === "string")) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[23][0]++;
        cov_252gvfu07d().s[91]++;
        Object.entries(args).forEach(([argKey, value]) => {
          /* istanbul ignore next */
          cov_252gvfu07d().f[11]++;
          cov_252gvfu07d().s[92]++;
          translation = translation.replace(`{${argKey}}`, value);
        });
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[23][1]++;
      }
      cov_252gvfu07d().s[93]++;
      return translation;
    },
    loadTranslations: async lang => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[12]++;
      cov_252gvfu07d().s[94]++;
      // 서버 사이드에서는 로딩하지 않음
      if (typeof window === "undefined") {
        /* istanbul ignore next */
        cov_252gvfu07d().b[25][0]++;
        cov_252gvfu07d().s[95]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[25][1]++;
      }
      const {
        isTranslationLoaded,
        translations
      } =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[96]++, get());
      // 이미 진행 중인 로딩이 있는지 확인
      /* istanbul ignore next */
      cov_252gvfu07d().s[97]++;
      if (loadingPromises.has(lang)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[26][0]++;
        cov_252gvfu07d().s[98]++;
        console.log(`🔄 Translation loading already in progress for ${lang}, waiting...`);
        /* istanbul ignore next */
        cov_252gvfu07d().s[99]++;
        return loadingPromises.get(lang);
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[26][1]++;
      }
      // 강제로 다시 로드하거나 이미 로드된 경우 체크
      const hasTranslations =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[100]++,
      /* istanbul ignore next */
      (cov_252gvfu07d().b[27][0]++, translations[lang]) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[27][1]++, Object.keys(translations[lang]).length > 0));
      const isMarkedAsLoaded =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[101]++, isTranslationLoaded[lang]);
      /* istanbul ignore next */
      cov_252gvfu07d().s[102]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[29][0]++, isMarkedAsLoaded) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[29][1]++, hasTranslations)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[28][0]++;
        cov_252gvfu07d().s[103]++;
        console.log(`✅ Translations for ${lang} already loaded with ${Object.keys(translations[lang]).length} keys, skipping`);
        /* istanbul ignore next */
        cov_252gvfu07d().s[104]++;
        return;
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[28][1]++;
      }
      cov_252gvfu07d().s[105]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[31][0]++, isMarkedAsLoaded) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[31][1]++, !hasTranslations)) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[30][0]++;
        cov_252gvfu07d().s[106]++;
        console.log(`⚠️ ${lang} marked as loaded but has no translations, force reloading...`);
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[30][1]++;
      }
      cov_252gvfu07d().s[107]++;
      console.log(`🔄 Starting to load translations for ${lang}`);
      // Promise 생성 및 캐싱
      const loadingPromise =
      /* istanbul ignore next */
      (cov_252gvfu07d().s[108]++, (async () => {
        /* istanbul ignore next */
        cov_252gvfu07d().f[13]++;
        cov_252gvfu07d().s[109]++;
        try {
          /* istanbul ignore next */
          cov_252gvfu07d().s[110]++;
          set({
            isLoading: true,
            error: null
          });
          let translationsData =
          /* istanbul ignore next */
          (cov_252gvfu07d().s[111]++, {});
          // 로컬 번역 파일 로드
          /* istanbul ignore next */
          cov_252gvfu07d().s[112]++;
          try {
            const localTranslations =
            /* istanbul ignore next */
            (cov_252gvfu07d().s[113]++, await loadLocalTranslations(lang));
            /* istanbul ignore next */
            cov_252gvfu07d().s[114]++;
            if (localTranslations) {
              /* istanbul ignore next */
              cov_252gvfu07d().b[32][0]++;
              cov_252gvfu07d().s[115]++;
              translationsData = {
                ...translationsData,
                ...localTranslations
              };
              /* istanbul ignore next */
              cov_252gvfu07d().s[116]++;
              console.log(`✅ Local translations loaded for ${lang}:`, Object.keys(localTranslations).length, 'keys');
              /* istanbul ignore next */
              cov_252gvfu07d().s[117]++;
              _translationLogger.translationLogger.logTranslationSuccess(lang, Object.keys(localTranslations).length, 'local');
            } else
            /* istanbul ignore next */
            {
              cov_252gvfu07d().b[32][1]++;
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_252gvfu07d().s[118]++;
            _translationLogger.translationLogger.logLoadingError(lang, error, 'local');
          }
          // 번역이 없는 경우 기본 언어로 fallback
          /* istanbul ignore next */
          cov_252gvfu07d().s[119]++;
          if (
          /* istanbul ignore next */
          (cov_252gvfu07d().b[34][0]++, Object.keys(translationsData).length === 0) &&
          /* istanbul ignore next */
          (cov_252gvfu07d().b[34][1]++, lang !== _settings.settings.languages.default)) {
            /* istanbul ignore next */
            cov_252gvfu07d().b[33][0]++;
            cov_252gvfu07d().s[120]++;
            console.warn(`No translations found for ${lang}, falling back to ${_settings.settings.languages.default}`);
            /* istanbul ignore next */
            cov_252gvfu07d().s[121]++;
            try {
              const defaultTranslations =
              /* istanbul ignore next */
              (cov_252gvfu07d().s[122]++, await loadLocalTranslations(_settings.settings.languages.default));
              /* istanbul ignore next */
              cov_252gvfu07d().s[123]++;
              if (defaultTranslations) {
                /* istanbul ignore next */
                cov_252gvfu07d().b[35][0]++;
                cov_252gvfu07d().s[124]++;
                translationsData = defaultTranslations;
                /* istanbul ignore next */
                cov_252gvfu07d().s[125]++;
                _translationLogger.translationLogger.logTranslationSuccess(lang, Object.keys(defaultTranslations).length, 'local');
              } else
              /* istanbul ignore next */
              {
                cov_252gvfu07d().b[35][1]++;
              }
            } catch (error) {
              /* istanbul ignore next */
              cov_252gvfu07d().s[126]++;
              _translationLogger.translationLogger.logLoadingError(_settings.settings.languages.default, error, 'local');
            }
          } else
          /* istanbul ignore next */
          {
            cov_252gvfu07d().b[33][1]++;
          }
          cov_252gvfu07d().s[127]++;
          console.log(`🎉 Final translations for ${lang}:`, Object.keys(translationsData).length, 'keys');
          /* istanbul ignore next */
          cov_252gvfu07d().s[128]++;
          set(state => {
            /* istanbul ignore next */
            cov_252gvfu07d().f[14]++;
            cov_252gvfu07d().s[129]++;
            return {
              translations: {
                ...state.translations,
                [lang]: translationsData
              },
              isLoading: false,
              isTranslationLoaded: {
                ...state.isTranslationLoaded,
                [lang]: true
              }
            };
          });
          /* istanbul ignore next */
          cov_252gvfu07d().s[130]++;
          console.log(`✅ Translation loading completed for ${lang}`);
        } catch (error) {
          /* istanbul ignore next */
          cov_252gvfu07d().s[131]++;
          console.error(`Failed to load translations for ${lang}:`, error);
          /* istanbul ignore next */
          cov_252gvfu07d().s[132]++;
          _translationLogger.translationLogger.logLoadingError(lang, error, 'local');
          /* istanbul ignore next */
          cov_252gvfu07d().s[133]++;
          set({
            error: error instanceof Error ?
            /* istanbul ignore next */
            (cov_252gvfu07d().b[36][0]++, error.message) :
            /* istanbul ignore next */
            (cov_252gvfu07d().b[36][1]++, "Failed to load translations"),
            isLoading: false
          });
        } finally {
          /* istanbul ignore next */
          cov_252gvfu07d().s[134]++;
          // Promise 캐시에서 제거
          loadingPromises.delete(lang);
        }
      })());
      // Promise 캐싱
      /* istanbul ignore next */
      cov_252gvfu07d().s[135]++;
      loadingPromises.set(lang, loadingPromise);
      /* istanbul ignore next */
      cov_252gvfu07d().s[136]++;
      return loadingPromise;
    },
    setCurrentLang: lang => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[15]++;
      cov_252gvfu07d().s[137]++;
      return set({
        currentLanguage: lang
      });
    }
  };
}, {
  name: "language-storage",
  partialize: state => {
    /* istanbul ignore next */
    cov_252gvfu07d().f[16]++;
    cov_252gvfu07d().s[138]++;
    return {
      currentLanguage: state.currentLanguage
    };
  },
  onRehydrateStorage: () => {
    /* istanbul ignore next */
    cov_252gvfu07d().f[17]++;
    cov_252gvfu07d().s[139]++;
    return state => {
      /* istanbul ignore next */
      cov_252gvfu07d().f[18]++;
      cov_252gvfu07d().s[140]++;
      if (
      /* istanbul ignore next */
      (cov_252gvfu07d().b[38][0]++, state) &&
      /* istanbul ignore next */
      (cov_252gvfu07d().b[38][1]++, typeof window !== "undefined")) {
        /* istanbul ignore next */
        cov_252gvfu07d().b[37][0]++;
        cov_252gvfu07d().s[141]++;
        console.log('🔄 Rehydrating language store:', state.currentLanguage);
        // hydration 완료 표시
        /* istanbul ignore next */
        cov_252gvfu07d().s[142]++;
        state.setHydrated(true);
        // 리하이드레이션 후 현재 언어의 번역이 로드되지 않았다면 로드
        // setTimeout을 사용하여 렌더링 사이클과 분리
        /* istanbul ignore next */
        cov_252gvfu07d().s[143]++;
        if (!state.isTranslationLoaded[state.currentLanguage]) {
          /* istanbul ignore next */
          cov_252gvfu07d().b[39][0]++;
          cov_252gvfu07d().s[144]++;
          console.log('🔄 Loading translations after rehydration');
          /* istanbul ignore next */
          cov_252gvfu07d().s[145]++;
          setTimeout(() => {
            /* istanbul ignore next */
            cov_252gvfu07d().f[19]++;
            cov_252gvfu07d().s[146]++;
            state.loadTranslations(state.currentLanguage);
          }, 0);
        } else
        /* istanbul ignore next */
        {
          cov_252gvfu07d().b[39][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_252gvfu07d().b[37][1]++;
      }
    };
  }
})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMjUyZ3ZmdTA3ZCIsImFjdHVhbENvdmVyYWdlIiwicyIsInVzZUxhbmd1YWdlU3RvcmUiLCJsb2FkaW5nUHJvbWlzZXMiLCJNYXAiLCJnZXRDdXJyZW50TGFuZ3VhZ2VGcm9tUGF0aCIsImYiLCJ3aW5kb3ciLCJiIiwiX3NldHRpbmdzIiwic2V0dGluZ3MiLCJsYW5ndWFnZXMiLCJkZWZhdWx0IiwicGF0aFNlZ21lbnRzIiwibG9jYXRpb24iLCJwYXRobmFtZSIsInNwbGl0IiwidXJsTGFuZyIsInN1cHBvcnRlZCIsImluY2x1ZGVzIiwiaW5pdGlhbExhbmd1YWdlIiwibG9hZExvY2FsVHJhbnNsYXRpb25zIiwibGFuZyIsInVybCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwic3RhdHVzIiwib2siLCJFcnJvciIsInRyYW5zbGF0aW9ucyIsImpzb24iLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZXJyb3IiLCJ3YXJuIiwiX3p1c3RhbmQiLCJjcmVhdGUiLCJfbWlkZGxld2FyZSIsInBlcnNpc3QiLCJzZXQiLCJnZXQiLCJjdXJyZW50TGFuZ3VhZ2UiLCJyZWR1Y2UiLCJhY2MiLCJpc0xvYWRpbmciLCJpc0h5ZHJhdGVkIiwiaXNUcmFuc2xhdGlvbkxvYWRlZCIsInNldExhbmd1YWdlIiwiX3RyYW5zbGF0aW9uTG9nZ2VyIiwidHJhbnNsYXRpb25Mb2dnZXIiLCJsb2dMYW5ndWFnZVN5bmMiLCJsb2FkVHJhbnNsYXRpb25zIiwic3luY0xhbmd1YWdlV2l0aFBhdGgiLCJsYW5nRnJvbVBhdGgiLCJzZXRIeWRyYXRlZCIsImh5ZHJhdGVkIiwidCIsImtleSIsImFyZ3MiLCJjdXJyZW50VHJhbnNsYXRpb25zIiwidHJhbnNsYXRpb24iLCJkZWZhdWx0VHJhbnNsYXRpb25zIiwibG9nTWlzc2luZ1RyYW5zbGF0aW9uIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZW50cmllcyIsImZvckVhY2giLCJhcmdLZXkiLCJ2YWx1ZSIsInJlcGxhY2UiLCJoYXMiLCJoYXNUcmFuc2xhdGlvbnMiLCJpc01hcmtlZEFzTG9hZGVkIiwibG9hZGluZ1Byb21pc2UiLCJ0cmFuc2xhdGlvbnNEYXRhIiwibG9jYWxUcmFuc2xhdGlvbnMiLCJsb2dUcmFuc2xhdGlvblN1Y2Nlc3MiLCJsb2dMb2FkaW5nRXJyb3IiLCJzdGF0ZSIsIm1lc3NhZ2UiLCJkZWxldGUiLCJzZXRDdXJyZW50TGFuZyIsIm5hbWUiLCJwYXJ0aWFsaXplIiwib25SZWh5ZHJhdGVTdG9yYWdlIiwic2V0VGltZW91dCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9jaGVvbGh5dW4vUmVwb3NpdG9yaWVzL3BpY25pYy13ZWIvc3RvcmVzL2xhbmd1YWdlU3RvcmUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSBcInp1c3RhbmRcIjtcbmltcG9ydCB7IHBlcnNpc3QgfSBmcm9tIFwienVzdGFuZC9taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyB0eXBlIExhbmd1YWdlLCBzZXR0aW5ncyB9IGZyb20gXCJAL2NvbmZpZy9zZXR0aW5nc1wiO1xuaW1wb3J0IHsgdHJhbnNsYXRpb25Mb2dnZXIgfSBmcm9tIFwiQC91dGlscy90cmFuc2xhdGlvbkxvZ2dlclwiO1xuXG4vLyDsp4Ttlokg7KSR7J24IOuyiOyXrSDroZzrlKkgUHJvbWlzZeuTpOydhCDstpTsoIHtlZjripQg66e1XG5jb25zdCBsb2FkaW5nUHJvbWlzZXMgPSBuZXcgTWFwPExhbmd1YWdlLCBQcm9taXNlPHZvaWQ+PigpO1xuXG4vLyBVUkzsl5DshJwg7ZiE7J6sIOyWuOyWtCDqsIDsoLjsmKTquLBcbmNvbnN0IGdldEN1cnJlbnRMYW5ndWFnZUZyb21QYXRoID0gKCk6IExhbmd1YWdlID0+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBzZXR0aW5ncy5sYW5ndWFnZXMuZGVmYXVsdDtcblxuICBjb25zdCBwYXRoU2VnbWVudHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICBjb25zdCB1cmxMYW5nID0gcGF0aFNlZ21lbnRzWzFdIGFzIExhbmd1YWdlO1xuXG4gIGlmICh1cmxMYW5nICYmIHNldHRpbmdzLmxhbmd1YWdlcy5zdXBwb3J0ZWQuaW5jbHVkZXModXJsTGFuZykpIHtcbiAgICByZXR1cm4gdXJsTGFuZztcbiAgfVxuXG4gIHJldHVybiBzZXR0aW5ncy5sYW5ndWFnZXMuZGVmYXVsdDtcbn07XG5cbi8vIOy0iOq4sCDslrjslrQg7ISk7KCV7J2AIO2VreyDgSBVUkwg6rK966Gc7JeQ7IScIOqwgOyguOyYtCAo7YG065287J207Ja47Yq47JeQ7ISc66eMKVxuY29uc3QgaW5pdGlhbExhbmd1YWdlOiBMYW5ndWFnZSA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gc2V0dGluZ3MubGFuZ3VhZ2VzLmRlZmF1bHQ7XG4gIHJldHVybiBnZXRDdXJyZW50TGFuZ3VhZ2VGcm9tUGF0aCgpO1xufSkoKTtcblxuaW50ZXJmYWNlIExhbmd1YWdlU3RhdGUge1xuICBjdXJyZW50TGFuZ3VhZ2U6IExhbmd1YWdlO1xuICB0cmFuc2xhdGlvbnM6IFJlY29yZDxMYW5ndWFnZSwgUmVjb3JkPHN0cmluZywgc3RyaW5nPj47XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I6IHN0cmluZyB8IG51bGw7XG4gIGlzVHJhbnNsYXRpb25Mb2FkZWQ6IFJlY29yZDxMYW5ndWFnZSwgYm9vbGVhbj47XG4gIGlzSHlkcmF0ZWQ6IGJvb2xlYW47XG4gIHQ6IChrZXk6IHN0cmluZywgYXJncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHN0cmluZztcbiAgc2V0TGFuZ3VhZ2U6IChsYW5nOiBMYW5ndWFnZSkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgc3luY0xhbmd1YWdlV2l0aFBhdGg6ICgpID0+IFByb21pc2U8dm9pZD47XG4gIGxvYWRUcmFuc2xhdGlvbnM6IChsYW5nOiBMYW5ndWFnZSkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgc2V0Q3VycmVudExhbmc6IChsYW5nOiBMYW5ndWFnZSkgPT4gdm9pZDtcbiAgc2V0SHlkcmF0ZWQ6IChoeWRyYXRlZDogYm9vbGVhbikgPT4gdm9pZDtcbn1cblxuLyoqXG4gKiDroZzsu6wg67KI7JetIO2MjOydvCDroZzrk5xcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZExvY2FsVHJhbnNsYXRpb25zKFxuICBsYW5nOiBMYW5ndWFnZSxcbik6IFByb21pc2U8UmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGw+IHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybiBudWxsO1xuICBcbiAgdHJ5IHtcbiAgICBjb25zdCB1cmwgPSBgL2xvY2FsZXMvJHtsYW5nfS5qc29uYDtcbiAgICBjb25zb2xlLmxvZyhg8J+UhCBMb2FkaW5nIGxvY2FsIHRyYW5zbGF0aW9ucyBmcm9tOiAke3VybH1gKTtcbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgY29uc29sZS5sb2coYPCfk6UgUmVzcG9uc2Ugc3RhdHVzIGZvciAke2xhbmd9OmAsIHJlc3BvbnNlLnN0YXR1cywgcmVzcG9uc2Uub2spO1xuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGxvYWQgbG9jYWwgdHJhbnNsYXRpb25zIGZvciAke2xhbmd9OiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdHJhbnNsYXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKGDinIUgTG9hZGVkICR7T2JqZWN0LmtleXModHJhbnNsYXRpb25zKS5sZW5ndGh9IHRyYW5zbGF0aW9uIGtleXMgZm9yICR7bGFuZ31gKTtcbiAgICBcbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUud2Fybihg4p2MIExvY2FsIHRyYW5zbGF0aW9ucyBub3QgZm91bmQgZm9yICR7bGFuZ306YCwgZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB1c2VMYW5ndWFnZVN0b3JlID0gY3JlYXRlPExhbmd1YWdlU3RhdGU+KCkoXG4gIHBlcnNpc3QoXG4gICAgKHNldCwgZ2V0KSA9PiAoe1xuICAgICAgY3VycmVudExhbmd1YWdlOiBpbml0aWFsTGFuZ3VhZ2UsXG4gICAgICB0cmFuc2xhdGlvbnM6IHNldHRpbmdzLmxhbmd1YWdlcy5zdXBwb3J0ZWQucmVkdWNlKChhY2MsIGxhbmcpID0+IHtcbiAgICAgICAgYWNjW2xhbmddID0ge307XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSBhcyBSZWNvcmQ8TGFuZ3VhZ2UsIFJlY29yZDxzdHJpbmcsIHN0cmluZz4+KSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIGlzSHlkcmF0ZWQ6IGZhbHNlLFxuICAgICAgaXNUcmFuc2xhdGlvbkxvYWRlZDogc2V0dGluZ3MubGFuZ3VhZ2VzLnN1cHBvcnRlZC5yZWR1Y2UoKGFjYywgbGFuZykgPT4ge1xuICAgICAgICBhY2NbbGFuZ10gPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9IGFzIFJlY29yZDxMYW5ndWFnZSwgYm9vbGVhbj4pLFxuICAgICAgc2V0TGFuZ3VhZ2U6IGFzeW5jIChsYW5nOiBMYW5ndWFnZSkgPT4ge1xuICAgICAgICBpZiAoIXNldHRpbmdzLmxhbmd1YWdlcy5zdXBwb3J0ZWQuaW5jbHVkZXMobGFuZykpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYFVuc3VwcG9ydGVkIGxhbmd1YWdlOiAke2xhbmd9YCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBjdXJyZW50TGFuZ3VhZ2UgfSA9IGdldCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBzZXRMYW5ndWFnZSBjYWxsZWQ6ICR7bGFuZ31gKTtcbiAgICAgICAgdHJhbnNsYXRpb25Mb2dnZXIubG9nTGFuZ3VhZ2VTeW5jKGN1cnJlbnRMYW5ndWFnZSwgbGFuZywgJ3NldExhbmd1YWdlJyk7XG4gICAgICAgIFxuICAgICAgICBzZXQoeyBjdXJyZW50TGFuZ3VhZ2U6IGxhbmcgfSk7XG5cbiAgICAgICAgLy8g67KI7Jet7J20IOuhnOuTnOuQmOyngCDslYrsnYAg6rK97JqwIOuhnOuTnFxuICAgICAgICBjb25zdCB7IGlzVHJhbnNsYXRpb25Mb2FkZWQgfSA9IGdldCgpO1xuICAgICAgICBpZiAoIWlzVHJhbnNsYXRpb25Mb2FkZWRbbGFuZ10pIHtcbiAgICAgICAgICBhd2FpdCBnZXQoKS5sb2FkVHJhbnNsYXRpb25zKGxhbmcpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3luY0xhbmd1YWdlV2l0aFBhdGg6IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHsgaXNIeWRyYXRlZCB9ID0gZ2V0KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBoeWRyYXRpb27snbQg7JmE66OM65CY7KeAIOyViuydgCDqsr3smrAg64yA6riwXG4gICAgICAgIGlmICghaXNIeWRyYXRlZCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFtzeW5jTGFuZ3VhZ2VXaXRoUGF0aF0gV2FpdGluZyBmb3IgaHlkcmF0aW9uIHRvIGNvbXBsZXRlLi4uJyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsYW5nRnJvbVBhdGggPSBnZXRDdXJyZW50TGFuZ3VhZ2VGcm9tUGF0aCgpO1xuICAgICAgICBjb25zdCB7IGN1cnJlbnRMYW5ndWFnZSwgaXNUcmFuc2xhdGlvbkxvYWRlZCB9ID0gZ2V0KCk7XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBbc3luY0xhbmd1YWdlV2l0aFBhdGhdIEN1cnJlbnQ6ICR7Y3VycmVudExhbmd1YWdlfSwgUGF0aDogJHtsYW5nRnJvbVBhdGh9YCk7XG4gICAgICAgIFxuICAgICAgICBpZiAobGFuZ0Zyb21QYXRoICE9PSBjdXJyZW50TGFuZ3VhZ2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBbc3luY0xhbmd1YWdlV2l0aFBhdGhdIExhbmd1YWdlIG1pc21hdGNoIGRldGVjdGVkLCB1cGRhdGluZyBzdG9yZSBmcm9tICR7Y3VycmVudExhbmd1YWdlfSB0byAke2xhbmdGcm9tUGF0aH1gKTtcbiAgICAgICAgICB0cmFuc2xhdGlvbkxvZ2dlci5sb2dMYW5ndWFnZVN5bmMoY3VycmVudExhbmd1YWdlLCBsYW5nRnJvbVBhdGgsICdzeW5jTGFuZ3VhZ2VXaXRoUGF0aCcpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIOyWuOyWtCDsg4Htg5wg7KaJ7IucIOyXheuNsOydtO2KuFxuICAgICAgICAgIHNldCh7IGN1cnJlbnRMYW5ndWFnZTogbGFuZ0Zyb21QYXRoIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIOuyiOyXreydtCDroZzrk5zrkJjsp4Ag7JWK7J2AIOqyveyasOyXkOunjCDroZzrk5xcbiAgICAgICAgICBpZiAoIWlzVHJhbnNsYXRpb25Mb2FkZWRbbGFuZ0Zyb21QYXRoXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYPCflIQgW3N5bmNMYW5ndWFnZVdpdGhQYXRoXSBMb2FkaW5nIHRyYW5zbGF0aW9ucyBmb3IgJHtsYW5nRnJvbVBhdGh9YCk7XG4gICAgICAgICAgICBhd2FpdCBnZXQoKS5sb2FkVHJhbnNsYXRpb25zKGxhbmdGcm9tUGF0aCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgW3N5bmNMYW5ndWFnZVdpdGhQYXRoXSBUcmFuc2xhdGlvbnMgZm9yICR7bGFuZ0Zyb21QYXRofSBhbHJlYWR5IGxvYWRlZGApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIFtzeW5jTGFuZ3VhZ2VXaXRoUGF0aF0gTGFuZ3VhZ2UgYWxyZWFkeSBzeW5jaHJvbml6ZWQ6ICR7Y3VycmVudExhbmd1YWdlfWApO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIOyWuOyWtOuKlCDrp57sp4Drp4wg67KI7Jet7J20IOuhnOuTnOuQmOyngCDslYrsnYAg6rK97JqwXG4gICAgICAgICAgaWYgKCFpc1RyYW5zbGF0aW9uTG9hZGVkW2N1cnJlbnRMYW5ndWFnZV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5SEIFtzeW5jTGFuZ3VhZ2VXaXRoUGF0aF0gTG9hZGluZyBtaXNzaW5nIHRyYW5zbGF0aW9ucyBmb3IgJHtjdXJyZW50TGFuZ3VhZ2V9YCk7XG4gICAgICAgICAgICBhd2FpdCBnZXQoKS5sb2FkVHJhbnNsYXRpb25zKGN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0SHlkcmF0ZWQ6IChoeWRyYXRlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBTZXR0aW5nIGh5ZHJhdGlvbiBzdGF0dXM6ICR7aHlkcmF0ZWR9YCk7XG4gICAgICAgIHNldCh7IGlzSHlkcmF0ZWQ6IGh5ZHJhdGVkIH0pO1xuICAgICAgfSxcbiAgICAgIHQ6IChrZXk6IHN0cmluZywgYXJncz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pID0+IHtcbiAgICAgICAgY29uc3QgeyB0cmFuc2xhdGlvbnMsIGN1cnJlbnRMYW5ndWFnZSwgaXNIeWRyYXRlZCwgaXNUcmFuc2xhdGlvbkxvYWRlZCwgaXNMb2FkaW5nIH0gPSBnZXQoKTtcblxuICAgICAgICAvLyBoeWRyYXRpb27snbQg7JmE66OM65CY7KeAIOyViuyVmOqxsOuCmCDrsojsl60g66Gc65SpIOykkeyduCDqsr3smrAg67mIIOusuOyekOyXtCDrsJjtmZhcbiAgICAgICAgaWYgKCFpc0h5ZHJhdGVkIHx8IGlzTG9hZGluZykge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIO2YhOyerCDslrjslrTsnZgg67KI7Jet7J20IOyVhOyngSDroZzrk5zrkJjsp4Ag7JWK7J2AIOqyveyasCDruYgg66y47J6Q7Je0IOuwmO2ZmFxuICAgICAgICBpZiAoIWlzVHJhbnNsYXRpb25Mb2FkZWRbY3VycmVudExhbmd1YWdlXSkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIO2YhOyerCDslrjslrTsnZgg67KI7JetIOywvuq4sFxuICAgICAgICBjb25zdCBjdXJyZW50VHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zW2N1cnJlbnRMYW5ndWFnZV0gfHwge307XG4gICAgICAgIGxldCB0cmFuc2xhdGlvbiA9IGN1cnJlbnRUcmFuc2xhdGlvbnNba2V5XTtcblxuICAgICAgICAvLyDrsojsl63snbQg7JeG64qUIOqyveyasCDquLDrs7gg7Ja47Ja07JeQ7IScIOywvuq4sFxuICAgICAgICBpZiAoIXRyYW5zbGF0aW9uICYmIGN1cnJlbnRMYW5ndWFnZSAhPT0gc2V0dGluZ3MubGFuZ3VhZ2VzLmRlZmF1bHQpIHtcbiAgICAgICAgICBjb25zdCBkZWZhdWx0VHJhbnNsYXRpb25zID0gdHJhbnNsYXRpb25zW3NldHRpbmdzLmxhbmd1YWdlcy5kZWZhdWx0XSB8fCB7fTtcbiAgICAgICAgICB0cmFuc2xhdGlvbiA9IGRlZmF1bHRUcmFuc2xhdGlvbnNba2V5XTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIC8vIOq4sOuzuCDslrjslrTsl5DshJwg7LC+7J2AIOqyveyasCDroZzquYVcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uTG9nZ2VyLmxvZ01pc3NpbmdUcmFuc2xhdGlvbihcbiAgICAgICAgICAgICAga2V5LCBcbiAgICAgICAgICAgICAgY3VycmVudExhbmd1YWdlLCBcbiAgICAgICAgICAgICAgJ2ZhbGxiYWNrX3RvX2RlZmF1bHQnLCBcbiAgICAgICAgICAgICAgdHJhbnNsYXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g7Jes7KCE7Z6IIOuyiOyXreydtCDsl4bripQg6rK97JqwIOyymOumrFxuICAgICAgICBpZiAoIXRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgdHJhbnNsYXRpb25Mb2dnZXIubG9nTWlzc2luZ1RyYW5zbGF0aW9uKGtleSwgY3VycmVudExhbmd1YWdlLCAnbm9fdHJhbnNsYXRpb25fZm91bmQnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyDrsojsl63snbQg7JmE7KCE7Z6IIOuhnOuTnOuQnCDsg4Htg5zsl5DshJwg7YKk6rCAIOyXhuuKlCDqsr3smrDsl5Drp4wg7YKkIOuwmO2ZmCAo6rCc67Cc7JqpKVxuICAgICAgICAgIC8vIO2UhOuhnOuNleyFmOyXkOyEnOuKlCDruYgg66y47J6Q7Je0IOuwmO2ZmFxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIGBbJHtrZXl9XWA7IC8vIOqwnOuwnCDtmZjqsr3sl5DshJzripQg7YKk66W8IOuMgOq0hO2YuOuhnCDqsJDsi7jshJwg7ZGc7IucXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAnJzsgLy8g7ZSE66Gc642V7IWY7JeQ7ISc64qUIOu5iCDrrLjsnpDsl7RcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOuzgOyImCDsuZjtmZhcbiAgICAgICAgaWYgKGFyZ3MgJiYgdHlwZW9mIHRyYW5zbGF0aW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgT2JqZWN0LmVudHJpZXMoYXJncykuZm9yRWFjaCgoW2FyZ0tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uLnJlcGxhY2UoYHske2FyZ0tleX19YCwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgICAgfSxcbiAgICAgIGxvYWRUcmFuc2xhdGlvbnM6IGFzeW5jIChsYW5nOiBMYW5ndWFnZSkgPT4ge1xuICAgICAgICAvLyDshJzrsoQg7IKs7J2065Oc7JeQ7ISc64qUIOuhnOuUqe2VmOyngCDslYrsnYxcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IGlzVHJhbnNsYXRpb25Mb2FkZWQsIHRyYW5zbGF0aW9ucyB9ID0gZ2V0KCk7XG5cbiAgICAgICAgLy8g7J2066+4IOynhO2WiSDspJHsnbgg66Gc65Sp7J20IOyeiOuKlOyngCDtmZXsnbhcbiAgICAgICAgaWYgKGxvYWRpbmdQcm9taXNlcy5oYXMobGFuZykpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBUcmFuc2xhdGlvbiBsb2FkaW5nIGFscmVhZHkgaW4gcHJvZ3Jlc3MgZm9yICR7bGFuZ30sIHdhaXRpbmcuLi5gKTtcbiAgICAgICAgICByZXR1cm4gbG9hZGluZ1Byb21pc2VzLmdldChsYW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOqwleygnOuhnCDri6Tsi5wg66Gc65Oc7ZWY6rGw64KYIOydtOuvuCDroZzrk5zrkJwg6rK97JqwIOyytO2BrFxuICAgICAgICBjb25zdCBoYXNUcmFuc2xhdGlvbnMgPSB0cmFuc2xhdGlvbnNbbGFuZ10gJiYgT2JqZWN0LmtleXModHJhbnNsYXRpb25zW2xhbmddKS5sZW5ndGggPiAwO1xuICAgICAgICBjb25zdCBpc01hcmtlZEFzTG9hZGVkID0gaXNUcmFuc2xhdGlvbkxvYWRlZFtsYW5nXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpc01hcmtlZEFzTG9hZGVkICYmIGhhc1RyYW5zbGF0aW9ucykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgVHJhbnNsYXRpb25zIGZvciAke2xhbmd9IGFscmVhZHkgbG9hZGVkIHdpdGggJHtPYmplY3Qua2V5cyh0cmFuc2xhdGlvbnNbbGFuZ10pLmxlbmd0aH0ga2V5cywgc2tpcHBpbmdgKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChpc01hcmtlZEFzTG9hZGVkICYmICFoYXNUcmFuc2xhdGlvbnMpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg4pqg77iPICR7bGFuZ30gbWFya2VkIGFzIGxvYWRlZCBidXQgaGFzIG5vIHRyYW5zbGF0aW9ucywgZm9yY2UgcmVsb2FkaW5nLi4uYCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhg8J+UhCBTdGFydGluZyB0byBsb2FkIHRyYW5zbGF0aW9ucyBmb3IgJHtsYW5nfWApO1xuICAgICAgICBcbiAgICAgICAgLy8gUHJvbWlzZSDsg53shLEg67CPIOy6kOyLsVxuICAgICAgICBjb25zdCBsb2FkaW5nUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNldCh7IGlzTG9hZGluZzogdHJ1ZSwgZXJyb3I6IG51bGwgfSk7XG5cbiAgICAgICAgICAgIGxldCB0cmFuc2xhdGlvbnNEYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgICAgICAgICAgIC8vIOuhnOy7rCDrsojsl60g7YyM7J28IOuhnOuTnFxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgbG9jYWxUcmFuc2xhdGlvbnMgPSBhd2FpdCBsb2FkTG9jYWxUcmFuc2xhdGlvbnMobGFuZyk7XG4gICAgICAgICAgICAgIGlmIChsb2NhbFRyYW5zbGF0aW9ucykge1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uc0RhdGEgPSB7IC4uLnRyYW5zbGF0aW9uc0RhdGEsIC4uLmxvY2FsVHJhbnNsYXRpb25zIH07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYOKchSBMb2NhbCB0cmFuc2xhdGlvbnMgbG9hZGVkIGZvciAke2xhbmd9OmAsIE9iamVjdC5rZXlzKGxvY2FsVHJhbnNsYXRpb25zKS5sZW5ndGgsICdrZXlzJyk7XG4gICAgICAgICAgICAgICAgdHJhbnNsYXRpb25Mb2dnZXIubG9nVHJhbnNsYXRpb25TdWNjZXNzKGxhbmcsIE9iamVjdC5rZXlzKGxvY2FsVHJhbnNsYXRpb25zKS5sZW5ndGgsICdsb2NhbCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbkxvZ2dlci5sb2dMb2FkaW5nRXJyb3IobGFuZywgZXJyb3IgYXMgRXJyb3IsICdsb2NhbCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDrsojsl63snbQg7JeG64qUIOqyveyasCDquLDrs7gg7Ja47Ja066GcIGZhbGxiYWNrXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXModHJhbnNsYXRpb25zRGF0YSkubGVuZ3RoID09PSAwICYmIGxhbmcgIT09IHNldHRpbmdzLmxhbmd1YWdlcy5kZWZhdWx0KSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgTm8gdHJhbnNsYXRpb25zIGZvdW5kIGZvciAke2xhbmd9LCBmYWxsaW5nIGJhY2sgdG8gJHtzZXR0aW5ncy5sYW5ndWFnZXMuZGVmYXVsdH1gLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRUcmFuc2xhdGlvbnMgPSBhd2FpdCBsb2FkTG9jYWxUcmFuc2xhdGlvbnMoc2V0dGluZ3MubGFuZ3VhZ2VzLmRlZmF1bHQpO1xuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VHJhbnNsYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbnNEYXRhID0gZGVmYXVsdFRyYW5zbGF0aW9ucztcbiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uTG9nZ2VyLmxvZ1RyYW5zbGF0aW9uU3VjY2VzcyhsYW5nLCBPYmplY3Qua2V5cyhkZWZhdWx0VHJhbnNsYXRpb25zKS5sZW5ndGgsICdsb2NhbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbkxvZ2dlci5sb2dMb2FkaW5nRXJyb3Ioc2V0dGluZ3MubGFuZ3VhZ2VzLmRlZmF1bHQsIGVycm9yIGFzIEVycm9yLCAnbG9jYWwnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+OiSBGaW5hbCB0cmFuc2xhdGlvbnMgZm9yICR7bGFuZ306YCwgT2JqZWN0LmtleXModHJhbnNsYXRpb25zRGF0YSkubGVuZ3RoLCAna2V5cycpO1xuXG4gICAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS50cmFuc2xhdGlvbnMsXG4gICAgICAgICAgICAgICAgW2xhbmddOiB0cmFuc2xhdGlvbnNEYXRhLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBpc1RyYW5zbGF0aW9uTG9hZGVkOiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUuaXNUcmFuc2xhdGlvbkxvYWRlZCxcbiAgICAgICAgICAgICAgICBbbGFuZ106IHRydWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgVHJhbnNsYXRpb24gbG9hZGluZyBjb21wbGV0ZWQgZm9yICR7bGFuZ31gKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGxvYWQgdHJhbnNsYXRpb25zIGZvciAke2xhbmd9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uTG9nZ2VyLmxvZ0xvYWRpbmdFcnJvcihsYW5nLCBlcnJvciBhcyBFcnJvciwgJ2xvY2FsJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgICAgICAgICAgPyBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgOiBcIkZhaWxlZCB0byBsb2FkIHRyYW5zbGF0aW9uc1wiLFxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIC8vIFByb21pc2Ug7LqQ7Iuc7JeQ7IScIOygnOqxsFxuICAgICAgICAgICAgbG9hZGluZ1Byb21pc2VzLmRlbGV0ZShsYW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgLy8gUHJvbWlzZSDsupDsi7FcbiAgICAgICAgbG9hZGluZ1Byb21pc2VzLnNldChsYW5nLCBsb2FkaW5nUHJvbWlzZSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbG9hZGluZ1Byb21pc2U7XG4gICAgICB9LFxuICAgICAgc2V0Q3VycmVudExhbmc6IChsYW5nKSA9PiBzZXQoeyBjdXJyZW50TGFuZ3VhZ2U6IGxhbmcgfSksXG4gICAgfSksXG4gICAge1xuICAgICAgbmFtZTogXCJsYW5ndWFnZS1zdG9yYWdlXCIsXG4gICAgICBwYXJ0aWFsaXplOiAoc3RhdGUpID0+ICh7XG4gICAgICAgIGN1cnJlbnRMYW5ndWFnZTogc3RhdGUuY3VycmVudExhbmd1YWdlLFxuICAgICAgfSksXG4gICAgICBvblJlaHlkcmF0ZVN0b3JhZ2U6ICgpID0+IChzdGF0ZSkgPT4ge1xuICAgICAgICBpZiAoc3RhdGUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFJlaHlkcmF0aW5nIGxhbmd1YWdlIHN0b3JlOicsIHN0YXRlLmN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gaHlkcmF0aW9uIOyZhOujjCDtkZzsi5xcbiAgICAgICAgICBzdGF0ZS5zZXRIeWRyYXRlZCh0cnVlKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyDrpqztlZjsnbTrk5zroIjsnbTshZgg7ZuEIO2YhOyerCDslrjslrTsnZgg67KI7Jet7J20IOuhnOuTnOuQmOyngCDslYrslZjri6TrqbQg66Gc65OcXG4gICAgICAgICAgLy8gc2V0VGltZW91dOydhCDsgqzsmqntlZjsl6wg66CM642U66eBIOyCrOydtO2BtOqzvCDrtoTrpqxcbiAgICAgICAgICBpZiAoIXN0YXRlLmlzVHJhbnNsYXRpb25Mb2FkZWRbc3RhdGUuY3VycmVudExhbmd1YWdlXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ/CflIQgTG9hZGluZyB0cmFuc2xhdGlvbnMgYWZ0ZXIgcmVoeWRyYXRpb24nKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICBzdGF0ZS5sb2FkVHJhbnNsYXRpb25zKHN0YXRlLmN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgKSxcbik7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTU07SUFBQUEsY0FBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsY0FBQTtBQUFBQSxjQUFBLEdBQUFFLENBQUE7Ozs7OzsrQkFrRU87Ozs7OztXQUFBQyxnQkFBQTs7Ozs7a0NBeEVVOzs7a0NBQ0M7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dkIsY0FBQSxHQUFBTyxDQUFBO01BQUFQLGNBQUEsR0FBQUUsQ0FBQTtNQUFBLE9BQUF5QyxHQUFBLENBQUk7UUFBRUUsZUFBQSxFQUFpQnRCO01BQUs7SUFBQTtFQUN4RDtBQUFBLEdBQ0E7RUFDRWdFLElBQUEsRUFBTTtFQUNOQyxVQUFBLEVBQWFMLEtBQUEsSUFBVztJQUFBO0lBQUFuRixjQUFBLEdBQUFPLENBQUE7SUFBQVAsY0FBQSxHQUFBRSxDQUFBO0lBQUE7TUFDdEIyQyxlQUFBLEVBQWlCc0MsS0FBQSxDQUFNdEM7SUFDekI7RUFBQTtFQUNBNEMsa0JBQUEsRUFBb0JBLENBQUEsS0FBTTtJQUFBO0lBQUF6RixjQUFBLEdBQUFPLENBQUE7SUFBQVAsY0FBQSxHQUFBRSxDQUFBO0lBQUEsT0FBQ2lGLEtBQUE7TUFBQTtNQUFBbkYsY0FBQSxHQUFBTyxDQUFBO01BQUFQLGNBQUEsR0FBQUUsQ0FBQTtNQUN6QjtNQUFJO01BQUEsQ0FBQUYsY0FBQSxHQUFBUyxDQUFBLFdBQUEwRSxLQUFBO01BQUE7TUFBQSxDQUFBbkYsY0FBQSxHQUFBUyxDQUFBLFdBQVMsT0FBT0QsTUFBQSxLQUFXLGNBQWE7UUFBQTtRQUFBUixjQUFBLEdBQUFTLENBQUE7UUFBQVQsY0FBQSxHQUFBRSxDQUFBO1FBQzFDdUIsT0FBQSxDQUFRQyxHQUFHLENBQUMsa0NBQWtDeUQsS0FBQSxDQUFNdEMsZUFBZTtRQUVuRTtRQUFBO1FBQUE3QyxjQUFBLEdBQUFFLENBQUE7UUFDQWlGLEtBQUEsQ0FBTXpCLFdBQVcsQ0FBQztRQUVsQjtRQUNBO1FBQUE7UUFBQTFELGNBQUEsR0FBQUUsQ0FBQTtRQUNBLElBQUksQ0FBQ2lGLEtBQUEsQ0FBTWpDLG1CQUFtQixDQUFDaUMsS0FBQSxDQUFNdEMsZUFBZSxDQUFDLEVBQUU7VUFBQTtVQUFBN0MsY0FBQSxHQUFBUyxDQUFBO1VBQUFULGNBQUEsR0FBQUUsQ0FBQTtVQUNyRHVCLE9BQUEsQ0FBUUMsR0FBRyxDQUFDO1VBQUE7VUFBQTFCLGNBQUEsR0FBQUUsQ0FBQTtVQUNad0YsVUFBQSxDQUFXO1lBQUE7WUFBQTFGLGNBQUEsR0FBQU8sQ0FBQTtZQUFBUCxjQUFBLEdBQUFFLENBQUE7WUFDVGlGLEtBQUEsQ0FBTTVCLGdCQUFnQixDQUFDNEIsS0FBQSxDQUFNdEMsZUFBZTtVQUM5QyxHQUFHO1FBQ0w7UUFBQTtRQUFBO1VBQUE3QyxjQUFBLEdBQUFTLENBQUE7UUFBQTtNQUNGO01BQUE7TUFBQTtRQUFBVCxjQUFBLEdBQUFTLENBQUE7TUFBQTtJQUNGO0VBQUE7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==