{"version":3,"names":["useVoteRealtimeOptimized","useDebounce","callback","delay","cov_s7q29lme9","f","timeoutRef","s","_react","useRef","useCallback","args","current","b","clearTimeout","setTimeout","useThrottle","lastRunRef","now","Date","voteRealtimeReducer","state","action","type","isLoading","payload","error","voteItems","totalVotes","lastUpdated","connectionStatus","status","connectionInfo","info","lastEvent","eventCount","systemStatus","settings","smartReconnectEnabled","batterySaverEnabled","createInitialState","maxRetries","reconnectAttempts","maxReconnectAttempts","isOnline","window","navigator","onLine","isVisible","document","hidden","isSlowConnection","connectionType","isPageVisible","battery","isCharging","level","chargingTime","dischargingTime","options","voteId","artistVoteId","enabled","pollingInterval","enableDataSync","enableSmartReconnect","enableBatterySaver","onConnectionStatusChange","onVoteUpdate","onError","dispatch","useReducer","useMemo","renderCountRef","lastRenderTimeRef","useEffect","memoryUsage","setMemoryUsage","useState","updateMemoryUsage","performance","memory","usedJSHeapSize","serviceRef","eventListenerRef","statusListenerRef","pollingIntervalRef","reconnectTimeoutRef","loadVoteResults","_voteStore","useVoteStore","debouncedUpdateSystemStatus","updates","throttledEventHandler","event","updateNetworkStatus","connection","effectiveType","updateBatteryStatus","getBattery","charging","console","warn","updatePageVisibility","shouldReconnect","refreshData","currentResults","getState","results","err","Error","createEventListener","catch","createStatusListener","manualReconnect","initializeService","getVoteRealtimeService","Promise","resolve","then","_interop_require_wildcard","require","service","addEventListener","addStatusListener","addDataSyncCallback","subscribeToVote","subscribeToArtistVote","removeEventListener","removeStatusListener","removeDataSyncCallback","unsubscribeFromVote","unsubscribeFromArtistVote","clearInterval","handleOnline","handleOffline","handleConnectionChange","handleVisibilityChange","memoryCheckInterval","setInterval","currentStatus","isConnected","realtimeService","toggleSmartReconnect","toggleBatterySaver","performanceMetrics","renderCount","lastRenderTime"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteRealtimeOptimized.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, useCallback, useState, useReducer, useMemo } from 'react';\nimport { \n  VoteRealtimeService,\n  VoteRealtimeEvent, \n  ConnectionStatus,\n  ConnectionInfo,\n  VoteEventListener,\n  ConnectionStatusListener,\n  DataSyncCallback\n} from '@/lib/supabase/realtime';\nimport { VoteItem } from '@/types/interfaces';\nimport { useVoteStore } from '@/stores/voteStore';\n\n// 디바운싱 및 스로틀링 유틸리티\nfunction useDebounce<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number\n): T {\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  return useCallback((...args: Parameters<T>) => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => callback(...args), delay);\n  }, [callback, delay]) as T;\n}\n\nfunction useThrottle<T extends (...args: any[]) => any>(\n  callback: T,\n  delay: number\n): T {\n  const lastRunRef = useRef<number>(0);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  return useCallback((...args: Parameters<T>) => {\n    const now = Date.now();\n    \n    if (now - lastRunRef.current >= delay) {\n      lastRunRef.current = now;\n      callback(...args);\n    } else {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      timeoutRef.current = setTimeout(() => {\n        lastRunRef.current = Date.now();\n        callback(...args);\n      }, delay - (now - lastRunRef.current));\n    }\n  }, [callback, delay]) as T;\n}\n\n// 통합 상태 타입\ninterface VoteRealtimeState {\n  // 데이터 상태\n  voteItems: VoteItem[] | null;\n  totalVotes: number | null;\n  isLoading: boolean;\n  error: Error | null;\n  lastUpdated: Date | null;\n  lastEvent: VoteRealtimeEvent | null;\n  eventCount: number;\n  \n  // 연결 상태\n  connectionStatus: ConnectionStatus;\n  connectionInfo: ConnectionInfo;\n  \n  // 브라우저 상태 (통합)\n  systemStatus: {\n    isOnline: boolean;\n    isSlowConnection: boolean;\n    connectionType: string | null;\n    isPageVisible: boolean;\n    battery: {\n      isCharging: boolean | null;\n      level: number | null;\n      chargingTime: number | null;\n      dischargingTime: number | null;\n    };\n  };\n  \n  // 설정 상태\n  settings: {\n    smartReconnectEnabled: boolean;\n    batterySaverEnabled: boolean;\n  };\n}\n\n// 액션 타입\ntype VoteRealtimeAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: Error | null }\n  | { type: 'SET_VOTE_DATA'; payload: { voteItems: VoteItem[] | null; totalVotes: number | null } }\n  | { type: 'SET_CONNECTION_STATUS'; payload: { status: ConnectionStatus; info: ConnectionInfo } }\n  | { type: 'SET_EVENT'; payload: VoteRealtimeEvent }\n  | { type: 'UPDATE_SYSTEM_STATUS'; payload: Partial<VoteRealtimeState['systemStatus']> }\n  | { type: 'TOGGLE_SMART_RECONNECT' }\n  | { type: 'TOGGLE_BATTERY_SAVER' }\n  | { type: 'RESET_STATE' };\n\n// 상태 리듀서\nfunction voteRealtimeReducer(state: VoteRealtimeState, action: VoteRealtimeAction): VoteRealtimeState {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n      \n    case 'SET_ERROR':\n      return { ...state, error: action.payload };\n      \n    case 'SET_VOTE_DATA':\n      return {\n        ...state,\n        voteItems: action.payload.voteItems,\n        totalVotes: action.payload.totalVotes,\n        lastUpdated: new Date(),\n        isLoading: false,\n        error: null\n      };\n      \n    case 'SET_CONNECTION_STATUS':\n      return {\n        ...state,\n        connectionStatus: action.payload.status,\n        connectionInfo: {\n          ...state.connectionInfo,\n          ...action.payload.info\n        }\n      };\n      \n    case 'SET_EVENT':\n      return {\n        ...state,\n        lastEvent: action.payload,\n        eventCount: state.eventCount + 1,\n        lastUpdated: new Date()\n      };\n      \n    case 'UPDATE_SYSTEM_STATUS':\n      return {\n        ...state,\n        systemStatus: {\n          ...state.systemStatus,\n          ...action.payload\n        }\n      };\n      \n    case 'TOGGLE_SMART_RECONNECT':\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          smartReconnectEnabled: !state.settings.smartReconnectEnabled\n        }\n      };\n      \n    case 'TOGGLE_BATTERY_SAVER':\n      return {\n        ...state,\n        settings: {\n          ...state.settings,\n          batterySaverEnabled: !state.settings.batterySaverEnabled\n        }\n      };\n      \n    case 'RESET_STATE':\n      return {\n        ...state,\n        voteItems: null,\n        totalVotes: null,\n        isLoading: true,\n        error: null,\n        lastEvent: null,\n        eventCount: 0,\n        connectionStatus: 'disconnected'\n      };\n      \n    default:\n      return state;\n  }\n}\n\n// 초기 상태\nconst createInitialState = (maxRetries: number): VoteRealtimeState => ({\n  voteItems: null,\n  totalVotes: null,\n  isLoading: true,\n  error: null,\n  lastUpdated: null,\n  lastEvent: null,\n  eventCount: 0,\n  connectionStatus: 'disconnected',\n  connectionInfo: {\n    status: 'disconnected',\n    reconnectAttempts: 0,\n    maxReconnectAttempts: maxRetries,\n    isOnline: typeof window !== 'undefined' && typeof navigator !== 'undefined' ? navigator.onLine : true,\n    isVisible: typeof window !== 'undefined' && typeof document !== 'undefined' ? !document.hidden : true\n  },\n  systemStatus: {\n    isOnline: typeof window !== 'undefined' && navigator ? navigator.onLine : true,\n    isSlowConnection: false,\n    connectionType: null,\n    isPageVisible: typeof window !== 'undefined' && typeof document !== 'undefined' ? !document.hidden : true,\n    battery: {\n      isCharging: null,\n      level: null,\n      chargingTime: null,\n      dischargingTime: null\n    }\n  },\n  settings: {\n    smartReconnectEnabled: true,\n    batterySaverEnabled: true\n  }\n});\n\n// 훅 옵션 (기존과 동일)\nexport interface UseVoteRealtimeOptimizedOptions {\n  voteId?: number;\n  artistVoteId?: number;\n  enabled?: boolean;\n  pollingInterval?: number;\n  enableDataSync?: boolean;\n  maxRetries?: number;\n  enableSmartReconnect?: boolean;\n  enableBatterySaver?: boolean;\n  onConnectionStatusChange?: (status: ConnectionStatus, info: ConnectionInfo) => void;\n  onVoteUpdate?: (event: VoteRealtimeEvent) => void;\n  onError?: (error: Error) => void;\n}\n\n// 훅 반환 타입\nexport interface UseVoteRealtimeOptimizedReturn {\n  // 데이터\n  voteItems: VoteItem[] | null;\n  totalVotes: number | null;\n  isLoading: boolean;\n  connectionStatus: ConnectionStatus;\n  isConnected: boolean;\n  connectionInfo: ConnectionInfo;\n  realtimeService: VoteRealtimeService | null;\n  lastUpdated: Date | null;\n  error: Error | null;\n  lastEvent: VoteRealtimeEvent | null;\n  eventCount: number;\n  \n  // 시스템 상태 (최적화됨)\n  systemStatus: VoteRealtimeState['systemStatus'];\n  \n  // 액션\n  manualReconnect: () => void;\n  refreshData: () => Promise<void>;\n  toggleSmartReconnect: () => void;\n  toggleBatterySaver: () => void;\n  \n  // 성능 메트릭\n  performanceMetrics: {\n    renderCount: number;\n    lastRenderTime: number;\n    memoryUsage: number | null;\n  };\n}\n\n/**\n * 성능 최적화된 실시간 투표 훅\n */\nexport function useVoteRealtimeOptimized(\n  options: UseVoteRealtimeOptimizedOptions = {}\n): UseVoteRealtimeOptimizedReturn {\n  const {\n    voteId,\n    artistVoteId,\n    enabled = true,\n    pollingInterval = 30000,\n    enableDataSync = true,\n    maxRetries = 10,\n    enableSmartReconnect = true,\n    enableBatterySaver = true,\n    onConnectionStatusChange,\n    onVoteUpdate,\n    onError\n  } = options;\n\n  // 상태 관리 (useReducer로 최적화)\n  const [state, dispatch] = useReducer(\n    voteRealtimeReducer,\n    useMemo(() => createInitialState(maxRetries), [maxRetries])\n  );\n\n  // 렌더 카운트 추적\n  const renderCountRef = useRef(0);\n  const lastRenderTimeRef = useRef(Date.now());\n  \n  useEffect(() => {\n    renderCountRef.current += 1;\n    lastRenderTimeRef.current = Date.now();\n  });\n\n  // 메모리 사용량 추적\n  const [memoryUsage, setMemoryUsage] = useState<number | null>(null);\n  \n  const updateMemoryUsage = useCallback(() => {\n    if (typeof window !== 'undefined' && 'performance' in window && 'memory' in (window.performance as any)) {\n      const memory = (window.performance as any).memory;\n      setMemoryUsage(memory.usedJSHeapSize);\n    }\n  }, []);\n\n  // 서비스 및 리스너 참조\n  const serviceRef = useRef<VoteRealtimeService | null>(null);\n  const eventListenerRef = useRef<VoteEventListener | null>(null);\n  const statusListenerRef = useRef<ConnectionStatusListener | null>(null);\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Vote 스토어 접근\n  const { loadVoteResults } = useVoteStore();\n\n  // 디바운스된 시스템 상태 업데이트 (500ms)\n  const debouncedUpdateSystemStatus = useDebounce(\n    useCallback((updates: Partial<VoteRealtimeState['systemStatus']>) => {\n      dispatch({ type: 'UPDATE_SYSTEM_STATUS', payload: updates });\n    }, []),\n    500\n  );\n\n  // 스로틀된 이벤트 처리 (1000ms)\n  const throttledEventHandler = useThrottle(\n    useCallback((event: VoteRealtimeEvent) => {\n      dispatch({ type: 'SET_EVENT', payload: event });\n      onVoteUpdate?.(event);\n    }, [onVoteUpdate]),\n    1000\n  );\n\n  // 네트워크 상태 업데이트 (메모화)\n  const updateNetworkStatus = useCallback(() => {\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') return;\n\n    const isOnline = navigator.onLine;\n    let connectionType = null;\n    let isSlowConnection = false;\n\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      connectionType = connection?.effectiveType || connection?.type || null;\n      isSlowConnection = connection?.effectiveType === 'slow-2g' || connection?.effectiveType === '2g';\n    }\n\n    debouncedUpdateSystemStatus({ isOnline, isSlowConnection, connectionType });\n  }, [debouncedUpdateSystemStatus]);\n\n  // 배터리 상태 업데이트 (메모화)\n  const updateBatteryStatus = useCallback(async () => {\n    if (typeof window === 'undefined' || !('getBattery' in navigator)) return;\n\n    try {\n      const battery = await (navigator as any).getBattery();\n      \n      debouncedUpdateSystemStatus({\n        battery: {\n          isCharging: battery.charging,\n          level: battery.level,\n          chargingTime: battery.chargingTime,\n          dischargingTime: battery.dischargingTime\n        }\n      });\n    } catch (error) {\n      console.warn('[useVoteRealtimeOptimized] 배터리 상태 조회 실패:', error);\n    }\n  }, [debouncedUpdateSystemStatus]);\n\n  // 페이지 가시성 업데이트 (메모화)\n  const updatePageVisibility = useCallback(() => {\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n    const isPageVisible = !document.hidden;\n    debouncedUpdateSystemStatus({ isPageVisible });\n  }, [debouncedUpdateSystemStatus]);\n\n  // 재연결 조건 확인 (메모화)\n  const shouldReconnect = useMemo(() => {\n    if (!state.settings.smartReconnectEnabled) return true;\n\n    const { systemStatus, settings } = state;\n    \n    if (!systemStatus.isPageVisible || !systemStatus.isOnline) return false;\n    \n    if (settings.batterySaverEnabled && \n        systemStatus.battery.level !== null && \n        !systemStatus.battery.isCharging && \n        systemStatus.battery.level < 0.15) {\n      return false;\n    }\n    \n    if (systemStatus.isSlowConnection) return false;\n    \n    return true;\n  }, [state.settings, state.systemStatus]);\n\n  // 데이터 새로고침 (메모화)\n  const refreshData = useCallback(async () => {\n    if (!voteId) return;\n    \n    try {\n      dispatch({ type: 'SET_LOADING', payload: true });\n      dispatch({ type: 'SET_ERROR', payload: null });\n      \n      await loadVoteResults(voteId);\n      const currentResults = useVoteStore.getState().results;\n      \n      dispatch({\n        type: 'SET_VOTE_DATA',\n        payload: {\n          voteItems: currentResults.voteItems,\n          totalVotes: currentResults.totalVotes\n        }\n      });\n      \n      // 메모리 사용량 업데이트\n      updateMemoryUsage();\n      \n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('투표 데이터 로드 실패');\n      dispatch({ type: 'SET_ERROR', payload: error });\n      onError?.(error);\n    }\n  }, [voteId, loadVoteResults, onError, updateMemoryUsage]);\n\n  // 이벤트 리스너 생성 (메모화)\n  const createEventListener = useCallback((): VoteEventListener => {\n    return (event: VoteRealtimeEvent) => {\n      throttledEventHandler(event);\n      \n      if (event.type === 'vote_item_updated' || event.type === 'vote_pick_created') {\n        refreshData().catch(console.error);\n      }\n    };\n  }, [throttledEventHandler, refreshData]);\n\n  // 연결 상태 리스너 생성 (메모화)\n  const createStatusListener = useCallback((): ConnectionStatusListener => {\n    return (status: ConnectionStatus, info: ConnectionInfo) => {\n      dispatch({\n        type: 'SET_CONNECTION_STATUS',\n        payload: { status, info }\n      });\n      \n      onConnectionStatusChange?.(status, info);\n      \n      if ((status === 'error' || status === 'network_error') && shouldReconnect) {\n        const delay = state.systemStatus.isSlowConnection ? 10000 : 1000;\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          if (serviceRef.current && shouldReconnect) {\n            serviceRef.current.manualReconnect();\n          }\n        }, delay);\n      }\n    };\n  }, [onConnectionStatusChange, shouldReconnect, state.systemStatus.isSlowConnection]);\n\n  // 실시간 서비스 초기화 (useEffect)\n  useEffect(() => {\n    if (!enabled || !voteId) return;\n\n    const initializeService = async () => {\n      try {\n        dispatch({ type: 'SET_LOADING', payload: true });\n        \n        // 서비스 생성 (기존 싱글톤 서비스 사용)\n        const { getVoteRealtimeService } = await import('@/lib/supabase/realtime');\n        const service = getVoteRealtimeService();\n        \n        serviceRef.current = service;\n        \n        // 이벤트 리스너 설정\n        eventListenerRef.current = createEventListener();\n        statusListenerRef.current = createStatusListener();\n        \n        service.addEventListener(eventListenerRef.current);\n        service.addStatusListener(statusListenerRef.current);\n        \n        // 데이터 동기화 콜백 설정\n        service.addDataSyncCallback(voteId, async () => {\n          await refreshData();\n        });\n        \n        // 초기 데이터 로드\n        await refreshData();\n        \n        // 투표 구독 시작\n        service.subscribeToVote(voteId);\n        \n        // Artist 투표가 있으면 함께 구독\n        if (artistVoteId) {\n          service.subscribeToArtistVote(artistVoteId);\n        }\n        \n      } catch (error) {\n        console.error('[useVoteRealtimeOptimized] 서비스 초기화 실패:', error);\n        dispatch({ \n          type: 'SET_ERROR', \n          payload: error instanceof Error ? error : new Error('서비스 초기화 실패') \n        });\n      }\n    };\n\n    initializeService();\n\n    // 클린업\n    return () => {\n      if (serviceRef.current) {\n        if (eventListenerRef.current) {\n          serviceRef.current.removeEventListener(eventListenerRef.current);\n        }\n        if (statusListenerRef.current) {\n          serviceRef.current.removeStatusListener(statusListenerRef.current);\n        }\n        \n        // 데이터 동기화 콜백 제거\n        serviceRef.current.removeDataSyncCallback(voteId);\n        \n        // 구독 해제\n        serviceRef.current.unsubscribeFromVote(voteId);\n        if (artistVoteId) {\n          serviceRef.current.unsubscribeFromArtistVote(artistVoteId);\n        }\n        \n        serviceRef.current = null;\n      }\n      \n      // 타이머 정리\n      if (pollingIntervalRef.current) {\n        clearInterval(pollingIntervalRef.current);\n      }\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n    };\n  }, [\n    enabled, \n    voteId,\n    artistVoteId,\n    createEventListener,\n    createStatusListener,\n    refreshData\n  ]);\n\n  // 브라우저 이벤트 리스너 설정 (성능 최적화됨)\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    // 네트워크 상태 변경 감지\n    const handleOnline = () => updateNetworkStatus();\n    const handleOffline = () => updateNetworkStatus();\n    const handleConnectionChange = () => updateNetworkStatus();\n\n    // 페이지 가시성 변경 감지\n    const handleVisibilityChange = () => updatePageVisibility();\n\n    // 이벤트 리스너 등록\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    if ('connection' in navigator) {\n      (navigator as any).connection?.addEventListener('change', handleConnectionChange);\n    }\n\n    // 초기 상태 설정\n    updateNetworkStatus();\n    updatePageVisibility();\n    updateBatteryStatus();\n\n    // 주기적 메모리 사용량 체크 (60초마다)\n    const memoryCheckInterval = setInterval(updateMemoryUsage, 60000);\n\n    // 클린업\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      \n      if ('connection' in navigator) {\n        (navigator as any).connection?.removeEventListener('change', handleConnectionChange);\n      }\n      \n      clearInterval(memoryCheckInterval);\n    };\n  }, [updateNetworkStatus, updatePageVisibility, updateBatteryStatus, updateMemoryUsage]);\n\n  // 스마트 재연결 로직\n  useEffect(() => {\n    if (!serviceRef.current) return;\n\n    const currentStatus = state.connectionStatus;\n    \n    // 연결이 끊어진 상태에서 재연결 조건이 충족되면 재연결 시도\n    if (currentStatus === 'disconnected' || currentStatus === 'error' || currentStatus === 'network_error') {\n      if (shouldReconnect) {\n        const delay = state.systemStatus.isSlowConnection ? 5000 : 1000;\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          if (serviceRef.current && shouldReconnect) {\n            serviceRef.current.manualReconnect();\n          }\n        }, delay);\n      }\n    }\n  }, [shouldReconnect, state.connectionStatus, state.systemStatus.isSlowConnection]);\n\n  return {\n    // 데이터\n    voteItems: state.voteItems,\n    totalVotes: state.totalVotes,\n    isLoading: state.isLoading,\n    connectionStatus: state.connectionStatus,\n    isConnected: state.connectionStatus === 'connected',\n    connectionInfo: state.connectionInfo,\n    realtimeService: serviceRef.current,\n    lastUpdated: state.lastUpdated,\n    error: state.error,\n    lastEvent: state.lastEvent,\n    eventCount: state.eventCount,\n    \n    // 시스템 상태\n    systemStatus: state.systemStatus,\n    \n    // 액션 (메모화됨)\n    manualReconnect: useCallback(() => {\n      if (serviceRef.current) {\n        serviceRef.current.manualReconnect();\n      }\n    }, []),\n    \n    refreshData,\n    \n    toggleSmartReconnect: useCallback(() => {\n      dispatch({ type: 'TOGGLE_SMART_RECONNECT' });\n    }, []),\n    \n    toggleBatterySaver: useCallback(() => {\n      dispatch({ type: 'TOGGLE_BATTERY_SAVER' });\n    }, []),\n    \n    // 성능 메트릭\n    performanceMetrics: {\n      renderCount: renderCountRef.current,\n      lastRenderTime: lastRenderTimeRef.current,\n      memoryUsage\n    }\n  };\n} "],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}