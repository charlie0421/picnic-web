58cb20580fef9a940e3654956af8906b
"use strict";

/* istanbul ignore next */
function cov_1a82ke7l94() {
  var path = "/Users/cheolhyun/Repositories/picnic-web/app/api/payment/portone/verify/route.ts";
  var hash = "8dea63ab1a120c6083a825711e75718687b8a6b9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cheolhyun/Repositories/picnic-web/app/api/payment/portone/verify/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 10,
          column: 3
        }
      },
      "2": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 20
        }
      },
      "3": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 17
        },
        end: {
          line: 12,
          column: 62
        }
      },
      "5": {
        start: {
          line: 13,
          column: 16
        },
        end: {
          line: 13,
          column: 33
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 48
        }
      },
      "7": {
        start: {
          line: 16,
          column: 24
        },
        end: {
          line: 16,
          column: 57
        }
      },
      "8": {
        start: {
          line: 17,
          column: 27
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "9": {
        start: {
          line: 18,
          column: 31
        },
        end: {
          line: 18,
          column: 71
        }
      },
      "10": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 30,
          column: 6
        }
      },
      "11": {
        start: {
          line: 31,
          column: 17
        },
        end: {
          line: 31,
          column: 38
        }
      },
      "12": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "13": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 60
        }
      },
      "14": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 38
        }
      },
      "15": {
        start: {
          line: 39,
          column: 18
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "16": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 44,
          column: 6
        }
      },
      "17": {
        start: {
          line: 45,
          column: 17
        },
        end: {
          line: 45,
          column: 38
        }
      },
      "18": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "19": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 72
        }
      },
      "20": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 25
        }
      },
      "21": {
        start: {
          line: 53,
          column: 32
        },
        end: {
          line: 53,
          column: 135
        }
      },
      "22": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 45
        }
      },
      "23": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 206,
          column: 5
        }
      },
      "24": {
        start: {
          line: 58,
          column: 25
        },
        end: {
          line: 58,
          column: 73
        }
      },
      "25": {
        start: {
          line: 60,
          column: 53
        },
        end: {
          line: 60,
          column: 82
        }
      },
      "26": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "27": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 66,
          column: 15
        }
      },
      "28": {
        start: {
          line: 68,
          column: 21
        },
        end: {
          line: 68,
          column: 41
        }
      },
      "29": {
        start: {
          line: 69,
          column: 30
        },
        end: {
          line: 69,
          column: 34
        }
      },
      "30": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "31": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "32": {
        start: {
          line: 78,
          column: 28
        },
        end: {
          line: 78,
          column: 65
        }
      },
      "33": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "34": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "35": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "36": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 92,
          column: 15
        }
      },
      "37": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "38": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 61
        }
      },
      "39": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 61
        }
      },
      "40": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 104,
          column: 15
        }
      },
      "41": {
        start: {
          line: 106,
          column: 54
        },
        end: {
          line: 106,
          column: 64
        }
      },
      "42": {
        start: {
          line: 108,
          column: 42
        },
        end: {
          line: 108,
          column: 125
        }
      },
      "43": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "44": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 114,
          column: 15
        }
      },
      "45": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "46": {
        start: {
          line: 127,
          column: 55
        },
        end: {
          line: 136,
          column: 28
        }
      },
      "47": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "48": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 69
        }
      },
      "49": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 143,
          column: 15
        }
      },
      "50": {
        start: {
          line: 146,
          column: 41
        },
        end: {
          line: 146,
          column: 125
        }
      },
      "51": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "52": {
        start: {
          line: 148,
          column: 44
        },
        end: {
          line: 150,
          column: 32
        }
      },
      "53": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 154,
          column: 13
        }
      },
      "54": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 78
        }
      },
      "55": {
        start: {
          line: 157,
          column: 30
        },
        end: {
          line: 157,
          column: 53
        }
      },
      "56": {
        start: {
          line: 158,
          column: 40
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "57": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "58": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 165,
          column: 80
        }
      },
      "59": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "60": {
        start: {
          line: 169,
          column: 31
        },
        end: {
          line: 169,
          column: 41
        }
      },
      "61": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 59
        }
      },
      "62": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 171,
          column: 35
        }
      },
      "63": {
        start: {
          line: 172,
          column: 42
        },
        end: {
          line: 179,
          column: 14
        }
      },
      "64": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 182,
          column: 13
        }
      },
      "65": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 69
        }
      },
      "66": {
        start: {
          line: 184,
          column: 46
        },
        end: {
          line: 184,
          column: 136
        }
      },
      "67": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "68": {
        start: {
          line: 186,
          column: 52
        },
        end: {
          line: 188,
          column: 36
        }
      },
      "69": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "70": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 87
        }
      },
      "71": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "72": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 60
        }
      },
      "73": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 205,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 9
          },
          end: {
            line: 7,
            column: 10
          }
        },
        loc: {
          start: {
            line: 7,
            column: 20
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "1": {
        name: "getPortOneToken",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 30
          }
        },
        loc: {
          start: {
            line: 20,
            column: 33
          },
          end: {
            line: 36,
            column: 1
          }
        },
        line: 20
      },
      "2": {
        name: "verifyPortOnePayment",
        decl: {
          start: {
            line: 38,
            column: 15
          },
          end: {
            line: 38,
            column: 35
          }
        },
        loc: {
          start: {
            line: 38,
            column: 44
          },
          end: {
            line: 50,
            column: 1
          }
        },
        line: 38
      },
      "3": {
        name: "verifyWebhookSignature",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 31
          }
        },
        loc: {
          start: {
            line: 52,
            column: 52
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 52
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 56,
            column: 15
          },
          end: {
            line: 56,
            column: 19
          }
        },
        loc: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 207,
            column: 1
          }
        },
        line: 56
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 16,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 24
          },
          end: {
            line: 16,
            column: 51
          }
        }, {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 16,
            column: 57
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 17,
            column: 27
          },
          end: {
            line: 17,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 17,
            column: 27
          },
          end: {
            line: 17,
            column: 57
          }
        }, {
          start: {
            line: 17,
            column: 61
          },
          end: {
            line: 17,
            column: 63
          }
        }],
        line: 17
      },
      "2": {
        loc: {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 65
          }
        }, {
          start: {
            line: 18,
            column: 69
          },
          end: {
            line: 18,
            column: 71
          }
        }],
        line: 18
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 67,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 12
          },
          end: {
            line: 61,
            column: 21
          }
        }, {
          start: {
            line: 61,
            column: 25
          },
          end: {
            line: 61,
            column: 30
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 134,
            column: 25
          },
          end: {
            line: 134,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 65
          },
          end: {
            line: 134,
            column: 77
          }
        }, {
          start: {
            line: 134,
            column: 80
          },
          end: {
            line: 134,
            column: 89
          }
        }],
        line: 134
      },
      "12": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 144,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "13": {
        loc: {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "14": {
        loc: {
          start: {
            line: 149,
            column: 29
          },
          end: {
            line: 149,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 29
          },
          end: {
            line: 149,
            column: 54
          }
        }, {
          start: {
            line: 149,
            column: 58
          },
          end: {
            line: 149,
            column: 59
          }
        }],
        line: 149
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 154,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "17": {
        loc: {
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 168,
            column: 8
          },
          end: {
            line: 193,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 168
      },
      "18": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 182,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "19": {
        loc: {
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 12
          },
          end: {
            line: 192,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "20": {
        loc: {
          start: {
            line: 187,
            column: 39
          },
          end: {
            line: 187,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 39
          },
          end: {
            line: 187,
            column: 71
          }
        }, {
          start: {
            line: 187,
            column: 75
          },
          end: {
            line: 187,
            column: 76
          }
        }],
        line: 187
      },
      "21": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "22": {
        loc: {
          start: {
            line: 202,
            column: 19
          },
          end: {
            line: 202,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 44
          },
          end: {
            line: 202,
            column: 57
          }
        }, {
          start: {
            line: 202,
            column: 60
          },
          end: {
            line: 202,
            column: 83
          }
        }],
        line: 202
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/cheolhyun/Repositories/picnic-web/app/api/payment/portone/verify/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { createHmac } from 'crypto';\n\n// Port One API configuration\nconst PORTONE_API_URL = 'https://api.iamport.kr';\nconst PORTONE_API_KEY = process.env.PORTONE_API_KEY || '';\nconst PORTONE_API_SECRET = process.env.PORTONE_API_SECRET || '';\nconst PORTONE_WEBHOOK_SECRET = process.env.PORTONE_WEBHOOK_SECRET || '';\n\ninterface PortOneTokenResponse {\n  code: number;\n  message: string;\n  response?: {\n    access_token: string;\n  };\n}\n\ninterface PortOnePaymentResponse {\n  code: number;\n  message: string;\n  response?: {\n    imp_uid: string;\n    merchant_uid: string;\n    pay_method: string;\n    channel: string;\n    pg_provider: string;\n    pg_tid: string;\n    pg_id: string;\n    escrow: boolean;\n    apply_num: string;\n    bank_code: string;\n    bank_name: string;\n    card_code: string;\n    card_name: string;\n    card_number: string;\n    card_quota: number;\n    currency: string;\n    amount: number;\n    receipt_url: string;\n    name: string;\n    buyer_name: string;\n    buyer_email: string;\n    buyer_tel: string;\n    buyer_addr: string;\n    buyer_postcode: string;\n    custom_data: string;\n    status: string;\n    paid_at: number;\n    failed_at: number;\n    cancelled_at: number;\n    fail_reason: string;\n    cancel_reason: string;\n  };\n}\n\n// Get Port One API token\nasync function getPortOneToken(): Promise<string> {\n  const response = await fetch(`${PORTONE_API_URL}/users/getToken`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      imp_key: PORTONE_API_KEY,\n      imp_secret: PORTONE_API_SECRET,\n    }),\n  });\n\n  const data: PortOneTokenResponse = await response.json();\n\n  if (!data.response?.access_token) {\n    throw new Error('Failed to get Port One API token');\n  }\n\n  return data.response.access_token;\n}\n\n// Verify payment with Port One API\nasync function verifyPortOnePayment(impUid: string): Promise<PortOnePaymentResponse['response']> {\n  const token = await getPortOneToken();\n\n  const response = await fetch(`${PORTONE_API_URL}/payments/${impUid}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n\n  const data: PortOnePaymentResponse = await response.json();\n\n  if (!data.response) {\n    throw new Error(`Payment verification failed: ${data.message}`);\n  }\n\n  return data.response;\n}\n\n// Verify webhook signature\nfunction verifyWebhookSignature(payload: any, signature: string): boolean {\n  const calculatedSignature = createHmac('sha256', PORTONE_WEBHOOK_SECRET)\n    .update(JSON.stringify(payload))\n    .digest('hex');\n\n  return calculatedSignature === signature;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createServerSupabaseClient();\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { paymentId } = body;\n\n    if (!paymentId) {\n      return NextResponse.json(\n        { error: 'Payment ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Verify payment with Port One\n    const paymentData = await verifyPortOnePayment(paymentId);\n\n    if (!paymentData) {\n      return NextResponse.json(\n        { error: 'Payment verification failed' },\n        { status: 400 }\n      );\n    }\n\n    // Check if payment is successful\n    if (paymentData.status !== 'paid') {\n      return NextResponse.json(\n        { error: `Payment not completed. Status: ${paymentData.status}` },\n        { status: 400 }\n      );\n    }\n\n    // Parse custom data to get product info\n    let customData;\n    try {\n      customData = JSON.parse(paymentData.custom_data);\n    } catch (e) {\n      console.error('Failed to parse custom data:', e);\n      return NextResponse.json(\n        { error: 'Invalid payment data' },\n        { status: 400 }\n      );\n    }\n\n    const { productId, starCandy, bonusAmount } = customData;\n\n    // Check if receipt already exists\n    const { data: existingReceipt } = await supabase\n      .from('receipts')\n      .select('id')\n      .eq('receipt_data', paymentId)\n      .single();\n\n    if (existingReceipt) {\n      return NextResponse.json(\n        { error: 'Payment already processed' },\n        { status: 400 }\n      );\n    }\n\n    // Create receipt data\n    const receiptData = {\n      payment_id: paymentId,\n      merchant_uid: paymentData.merchant_uid,\n      amount: paymentData.amount,\n      currency: paymentData.currency,\n      payment_method: 'port_one',\n      pg_provider: paymentData.pg_provider,\n      payment_details: paymentData,\n    };\n\n    // Start transaction\n    const { data: receipt, error: receiptError } = await supabase\n      .from('receipts')\n      .insert({\n        user_id: user.id,\n        product_id: productId,\n        receipt_data: JSON.stringify(receiptData),\n        receipt_hash: paymentId, // Using payment ID as hash for uniqueness\n        status: 'completed',\n        platform: 'web',\n        environment: process.env.NODE_ENV === 'production' ? 'production' : 'sandbox',\n        verification_data: paymentData,\n      })\n      .select()\n      .single();\n\n    if (receiptError) {\n      console.error('Failed to create receipt:', receiptError);\n      return NextResponse.json(\n        { error: 'Failed to record payment' },\n        { status: 500 }\n      );\n    }\n\n    // Update user profile star candy balance\n    const { data: currentProfile } = await supabase\n      .from('user_profiles')\n      .select('star_candy')\n      .eq('id', user.id)\n      .single();\n\n    if (currentProfile) {\n      const { error: profileError } = await supabase\n        .from('user_profiles')\n        .update({\n          star_candy: (currentProfile.star_candy || 0) + starCandy,\n        })\n        .eq('id', user.id);\n\n      if (profileError) {\n        console.error('Failed to update user profile:', profileError);\n        // Note: We don't return error here as receipt is already created\n      }\n    }\n\n    // Record star candy history\n    const transactionId = `PURCHASE_${paymentId}`;\n    const { error: historyError } = await supabase\n      .from('star_candy_history')\n      .insert({\n        user_id: user.id,\n        amount: starCandy,\n        type: 'PURCHASE',\n        transaction_id: transactionId,\n      });\n\n    if (historyError) {\n      console.error('Failed to record star candy history:', historyError);\n    }\n\n    // Record bonus if applicable\n    if (bonusAmount > 0) {\n      const expiryDate = new Date();\n      expiryDate.setMonth(expiryDate.getMonth() + 1); // Next month\n      expiryDate.setDate(15); // 15th of next month\n\n      const { error: bonusError } = await supabase\n        .from('star_candy_bonus_history')\n        .insert({\n          user_id: user.id,\n          amount: bonusAmount,\n          remain_amount: bonusAmount,\n          type: 'PURCHASE',\n          transaction_id: transactionId,\n          expired_dt: expiryDate.toISOString(),\n        });\n\n      if (bonusError) {\n        console.error('Failed to record bonus:', bonusError);\n      }\n\n      // Also update user's bonus balance\n      const { data: profileForBonus } = await supabase\n        .from('user_profiles')\n        .select('star_candy_bonus')\n        .eq('id', user.id)\n        .single();\n\n      if (profileForBonus) {\n        const { error: bonusUpdateError } = await supabase\n          .from('user_profiles')\n          .update({\n            star_candy_bonus: (profileForBonus.star_candy_bonus || 0) + bonusAmount,\n          })\n          .eq('id', user.id);\n\n        if (bonusUpdateError) {\n          console.error('Failed to update bonus balance:', bonusUpdateError);\n        }\n      }\n    }\n\n    return NextResponse.json({\n      verified: true,\n      receipt_id: receipt.id,\n      message: 'Payment verified and processed successfully',\n    });\n\n  } catch (error) {\n    console.error('Payment verification error:', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],
      names: ["POST", "PORTONE_API_URL", "PORTONE_API_KEY", "process", "env", "PORTONE_API_SECRET", "PORTONE_WEBHOOK_SECRET", "getPortOneToken", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "imp_key", "imp_secret", "data", "json", "access_token", "Error", "verifyPortOnePayment", "impUid", "token", "message", "verifyWebhookSignature", "payload", "signature", "calculatedSignature", "createHmac", "update", "digest", "request", "supabase", "createServerSupabaseClient", "user", "error", "authError", "auth", "getUser", "NextResponse", "status", "paymentId", "paymentData", "customData", "parse", "custom_data", "e", "console", "productId", "starCandy", "bonusAmount", "existingReceipt", "from", "select", "eq", "single", "receiptData", "payment_id", "merchant_uid", "amount", "currency", "payment_method", "pg_provider", "payment_details", "receipt", "receiptError", "insert", "user_id", "id", "product_id", "receipt_data", "receipt_hash", "platform", "environment", "NODE_ENV", "verification_data", "currentProfile", "profileError", "star_candy", "transactionId", "historyError", "type", "transaction_id", "expiryDate", "Date", "setMonth", "getMonth", "setDate", "bonusError", "remain_amount", "expired_dt", "toISOString", "profileForBonus", "bonusUpdateError", "star_candy_bonus", "verified", "receipt_id"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8dea63ab1a120c6083a825711e75718687b8a6b9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1a82ke7l94 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1a82ke7l94();
cov_1a82ke7l94().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1a82ke7l94().s[1]++;
Object.defineProperty(exports, "POST", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1a82ke7l94().f[0]++;
    cov_1a82ke7l94().s[2]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1a82ke7l94().s[3]++, require("next/server"));
const _server1 =
/* istanbul ignore next */
(cov_1a82ke7l94().s[4]++, require("../../../../../lib/supabase/server"));
const _crypto =
/* istanbul ignore next */
(cov_1a82ke7l94().s[5]++, require("crypto"));
// Port One API configuration
const PORTONE_API_URL =
/* istanbul ignore next */
(cov_1a82ke7l94().s[6]++, 'https://api.iamport.kr');
const PORTONE_API_KEY =
/* istanbul ignore next */
(cov_1a82ke7l94().s[7]++,
/* istanbul ignore next */
(cov_1a82ke7l94().b[0][0]++, process.env.PORTONE_API_KEY) ||
/* istanbul ignore next */
(cov_1a82ke7l94().b[0][1]++, ''));
const PORTONE_API_SECRET =
/* istanbul ignore next */
(cov_1a82ke7l94().s[8]++,
/* istanbul ignore next */
(cov_1a82ke7l94().b[1][0]++, process.env.PORTONE_API_SECRET) ||
/* istanbul ignore next */
(cov_1a82ke7l94().b[1][1]++, ''));
const PORTONE_WEBHOOK_SECRET =
/* istanbul ignore next */
(cov_1a82ke7l94().s[9]++,
/* istanbul ignore next */
(cov_1a82ke7l94().b[2][0]++, process.env.PORTONE_WEBHOOK_SECRET) ||
/* istanbul ignore next */
(cov_1a82ke7l94().b[2][1]++, ''));
// Get Port One API token
async function getPortOneToken() {
  /* istanbul ignore next */
  cov_1a82ke7l94().f[1]++;
  const response =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[10]++, await fetch(`${PORTONE_API_URL}/users/getToken`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      imp_key: PORTONE_API_KEY,
      imp_secret: PORTONE_API_SECRET
    })
  }));
  const data =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[11]++, await response.json());
  /* istanbul ignore next */
  cov_1a82ke7l94().s[12]++;
  if (!data.response?.access_token) {
    /* istanbul ignore next */
    cov_1a82ke7l94().b[3][0]++;
    cov_1a82ke7l94().s[13]++;
    throw new Error('Failed to get Port One API token');
  } else
  /* istanbul ignore next */
  {
    cov_1a82ke7l94().b[3][1]++;
  }
  cov_1a82ke7l94().s[14]++;
  return data.response.access_token;
}
// Verify payment with Port One API
async function verifyPortOnePayment(impUid) {
  /* istanbul ignore next */
  cov_1a82ke7l94().f[2]++;
  const token =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[15]++, await getPortOneToken());
  const response =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[16]++, await fetch(`${PORTONE_API_URL}/payments/${impUid}`, {
    headers: {
      'Authorization': `Bearer ${token}`
    }
  }));
  const data =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[17]++, await response.json());
  /* istanbul ignore next */
  cov_1a82ke7l94().s[18]++;
  if (!data.response) {
    /* istanbul ignore next */
    cov_1a82ke7l94().b[4][0]++;
    cov_1a82ke7l94().s[19]++;
    throw new Error(`Payment verification failed: ${data.message}`);
  } else
  /* istanbul ignore next */
  {
    cov_1a82ke7l94().b[4][1]++;
  }
  cov_1a82ke7l94().s[20]++;
  return data.response;
}
// Verify webhook signature
function verifyWebhookSignature(payload, signature) {
  /* istanbul ignore next */
  cov_1a82ke7l94().f[3]++;
  const calculatedSignature =
  /* istanbul ignore next */
  (cov_1a82ke7l94().s[21]++, (0, _crypto.createHmac)('sha256', PORTONE_WEBHOOK_SECRET).update(JSON.stringify(payload)).digest('hex'));
  /* istanbul ignore next */
  cov_1a82ke7l94().s[22]++;
  return calculatedSignature === signature;
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1a82ke7l94().f[4]++;
  cov_1a82ke7l94().s[23]++;
  try {
    const supabase =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[24]++, await (0, _server1.createServerSupabaseClient)());
    // Get current user
    const {
      data: {
        user
      },
      error: authError
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[25]++, await supabase.auth.getUser());
    /* istanbul ignore next */
    cov_1a82ke7l94().s[26]++;
    if (
    /* istanbul ignore next */
    (cov_1a82ke7l94().b[6][0]++, authError) ||
    /* istanbul ignore next */
    (cov_1a82ke7l94().b[6][1]++, !user)) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[5][0]++;
      cov_1a82ke7l94().s[27]++;
      return _server.NextResponse.json({
        error: 'Unauthorized'
      }, {
        status: 401
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[5][1]++;
    }
    const body =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[28]++, await request.json());
    const {
      paymentId
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[29]++, body);
    /* istanbul ignore next */
    cov_1a82ke7l94().s[30]++;
    if (!paymentId) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[7][0]++;
      cov_1a82ke7l94().s[31]++;
      return _server.NextResponse.json({
        error: 'Payment ID is required'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[7][1]++;
    }
    // Verify payment with Port One
    const paymentData =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[32]++, await verifyPortOnePayment(paymentId));
    /* istanbul ignore next */
    cov_1a82ke7l94().s[33]++;
    if (!paymentData) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[8][0]++;
      cov_1a82ke7l94().s[34]++;
      return _server.NextResponse.json({
        error: 'Payment verification failed'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[8][1]++;
    }
    // Check if payment is successful
    cov_1a82ke7l94().s[35]++;
    if (paymentData.status !== 'paid') {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[9][0]++;
      cov_1a82ke7l94().s[36]++;
      return _server.NextResponse.json({
        error: `Payment not completed. Status: ${paymentData.status}`
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[9][1]++;
    }
    // Parse custom data to get product info
    let customData;
    /* istanbul ignore next */
    cov_1a82ke7l94().s[37]++;
    try {
      /* istanbul ignore next */
      cov_1a82ke7l94().s[38]++;
      customData = JSON.parse(paymentData.custom_data);
    } catch (e) {
      /* istanbul ignore next */
      cov_1a82ke7l94().s[39]++;
      console.error('Failed to parse custom data:', e);
      /* istanbul ignore next */
      cov_1a82ke7l94().s[40]++;
      return _server.NextResponse.json({
        error: 'Invalid payment data'
      }, {
        status: 400
      });
    }
    const {
      productId,
      starCandy,
      bonusAmount
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[41]++, customData);
    // Check if receipt already exists
    const {
      data: existingReceipt
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[42]++, await supabase.from('receipts').select('id').eq('receipt_data', paymentId).single());
    /* istanbul ignore next */
    cov_1a82ke7l94().s[43]++;
    if (existingReceipt) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[10][0]++;
      cov_1a82ke7l94().s[44]++;
      return _server.NextResponse.json({
        error: 'Payment already processed'
      }, {
        status: 400
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[10][1]++;
    }
    // Create receipt data
    const receiptData =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[45]++, {
      payment_id: paymentId,
      merchant_uid: paymentData.merchant_uid,
      amount: paymentData.amount,
      currency: paymentData.currency,
      payment_method: 'port_one',
      pg_provider: paymentData.pg_provider,
      payment_details: paymentData
    });
    // Start transaction
    const {
      data: receipt,
      error: receiptError
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[46]++, await supabase.from('receipts').insert({
      user_id: user.id,
      product_id: productId,
      receipt_data: JSON.stringify(receiptData),
      receipt_hash: paymentId,
      status: 'completed',
      platform: 'web',
      environment: process.env.NODE_ENV === 'production' ?
      /* istanbul ignore next */
      (cov_1a82ke7l94().b[11][0]++, 'production') :
      /* istanbul ignore next */
      (cov_1a82ke7l94().b[11][1]++, 'sandbox'),
      verification_data: paymentData
    }).select().single());
    /* istanbul ignore next */
    cov_1a82ke7l94().s[47]++;
    if (receiptError) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[12][0]++;
      cov_1a82ke7l94().s[48]++;
      console.error('Failed to create receipt:', receiptError);
      /* istanbul ignore next */
      cov_1a82ke7l94().s[49]++;
      return _server.NextResponse.json({
        error: 'Failed to record payment'
      }, {
        status: 500
      });
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[12][1]++;
    }
    // Update user profile star candy balance
    const {
      data: currentProfile
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[50]++, await supabase.from('user_profiles').select('star_candy').eq('id', user.id).single());
    /* istanbul ignore next */
    cov_1a82ke7l94().s[51]++;
    if (currentProfile) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[13][0]++;
      const {
        error: profileError
      } =
      /* istanbul ignore next */
      (cov_1a82ke7l94().s[52]++, await supabase.from('user_profiles').update({
        star_candy: (
        /* istanbul ignore next */
        (cov_1a82ke7l94().b[14][0]++, currentProfile.star_candy) ||
        /* istanbul ignore next */
        (cov_1a82ke7l94().b[14][1]++, 0)) + starCandy
      }).eq('id', user.id));
      /* istanbul ignore next */
      cov_1a82ke7l94().s[53]++;
      if (profileError) {
        /* istanbul ignore next */
        cov_1a82ke7l94().b[15][0]++;
        cov_1a82ke7l94().s[54]++;
        console.error('Failed to update user profile:', profileError);
        // Note: We don't return error here as receipt is already created
      } else
      /* istanbul ignore next */
      {
        cov_1a82ke7l94().b[15][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[13][1]++;
    }
    // Record star candy history
    const transactionId =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[55]++, `PURCHASE_${paymentId}`);
    const {
      error: historyError
    } =
    /* istanbul ignore next */
    (cov_1a82ke7l94().s[56]++, await supabase.from('star_candy_history').insert({
      user_id: user.id,
      amount: starCandy,
      type: 'PURCHASE',
      transaction_id: transactionId
    }));
    /* istanbul ignore next */
    cov_1a82ke7l94().s[57]++;
    if (historyError) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[16][0]++;
      cov_1a82ke7l94().s[58]++;
      console.error('Failed to record star candy history:', historyError);
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[16][1]++;
    }
    // Record bonus if applicable
    cov_1a82ke7l94().s[59]++;
    if (bonusAmount > 0) {
      /* istanbul ignore next */
      cov_1a82ke7l94().b[17][0]++;
      const expiryDate =
      /* istanbul ignore next */
      (cov_1a82ke7l94().s[60]++, new Date());
      /* istanbul ignore next */
      cov_1a82ke7l94().s[61]++;
      expiryDate.setMonth(expiryDate.getMonth() + 1); // Next month
      /* istanbul ignore next */
      cov_1a82ke7l94().s[62]++;
      expiryDate.setDate(15); // 15th of next month
      const {
        error: bonusError
      } =
      /* istanbul ignore next */
      (cov_1a82ke7l94().s[63]++, await supabase.from('star_candy_bonus_history').insert({
        user_id: user.id,
        amount: bonusAmount,
        remain_amount: bonusAmount,
        type: 'PURCHASE',
        transaction_id: transactionId,
        expired_dt: expiryDate.toISOString()
      }));
      /* istanbul ignore next */
      cov_1a82ke7l94().s[64]++;
      if (bonusError) {
        /* istanbul ignore next */
        cov_1a82ke7l94().b[18][0]++;
        cov_1a82ke7l94().s[65]++;
        console.error('Failed to record bonus:', bonusError);
      } else
      /* istanbul ignore next */
      {
        cov_1a82ke7l94().b[18][1]++;
      }
      // Also update user's bonus balance
      const {
        data: profileForBonus
      } =
      /* istanbul ignore next */
      (cov_1a82ke7l94().s[66]++, await supabase.from('user_profiles').select('star_candy_bonus').eq('id', user.id).single());
      /* istanbul ignore next */
      cov_1a82ke7l94().s[67]++;
      if (profileForBonus) {
        /* istanbul ignore next */
        cov_1a82ke7l94().b[19][0]++;
        const {
          error: bonusUpdateError
        } =
        /* istanbul ignore next */
        (cov_1a82ke7l94().s[68]++, await supabase.from('user_profiles').update({
          star_candy_bonus: (
          /* istanbul ignore next */
          (cov_1a82ke7l94().b[20][0]++, profileForBonus.star_candy_bonus) ||
          /* istanbul ignore next */
          (cov_1a82ke7l94().b[20][1]++, 0)) + bonusAmount
        }).eq('id', user.id));
        /* istanbul ignore next */
        cov_1a82ke7l94().s[69]++;
        if (bonusUpdateError) {
          /* istanbul ignore next */
          cov_1a82ke7l94().b[21][0]++;
          cov_1a82ke7l94().s[70]++;
          console.error('Failed to update bonus balance:', bonusUpdateError);
        } else
        /* istanbul ignore next */
        {
          cov_1a82ke7l94().b[21][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1a82ke7l94().b[19][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_1a82ke7l94().b[17][1]++;
    }
    cov_1a82ke7l94().s[71]++;
    return _server.NextResponse.json({
      verified: true,
      receipt_id: receipt.id,
      message: 'Payment verified and processed successfully'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1a82ke7l94().s[72]++;
    console.error('Payment verification error:', error);
    /* istanbul ignore next */
    cov_1a82ke7l94().s[73]++;
    return _server.NextResponse.json({
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_1a82ke7l94().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1a82ke7l94().b[22][1]++, 'Internal server error')
    }, {
      status: 500
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,