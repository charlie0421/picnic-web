{"version":3,"names":["cov_1a82ke7l94","actualCoverage","s","POST","PORTONE_API_URL","PORTONE_API_KEY","b","process","env","PORTONE_API_SECRET","PORTONE_WEBHOOK_SECRET","getPortOneToken","f","response","fetch","method","headers","body","JSON","stringify","imp_key","imp_secret","data","json","access_token","Error","verifyPortOnePayment","impUid","token","message","verifyWebhookSignature","payload","signature","calculatedSignature","_crypto","createHmac","update","digest","request","supabase","_server1","createServerSupabaseClient","user","error","authError","auth","getUser","_server","NextResponse","status","paymentId","paymentData","customData","parse","custom_data","e","console","productId","starCandy","bonusAmount","existingReceipt","from","select","eq","single","receiptData","payment_id","merchant_uid","amount","currency","payment_method","pg_provider","payment_details","receipt","receiptError","insert","user_id","id","product_id","receipt_data","receipt_hash","platform","environment","NODE_ENV","verification_data","currentProfile","profileError","star_candy","transactionId","historyError","type","transaction_id","expiryDate","Date","setMonth","getMonth","setDate","bonusError","remain_amount","expired_dt","toISOString","profileForBonus","bonusUpdateError","star_candy_bonus","verified","receipt_id"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/payment/portone/verify/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient } from '@/lib/supabase/server';\nimport { createHmac } from 'crypto';\n\n// Port One API configuration\nconst PORTONE_API_URL = 'https://api.iamport.kr';\nconst PORTONE_API_KEY = process.env.PORTONE_API_KEY || '';\nconst PORTONE_API_SECRET = process.env.PORTONE_API_SECRET || '';\nconst PORTONE_WEBHOOK_SECRET = process.env.PORTONE_WEBHOOK_SECRET || '';\n\ninterface PortOneTokenResponse {\n  code: number;\n  message: string;\n  response?: {\n    access_token: string;\n  };\n}\n\ninterface PortOnePaymentResponse {\n  code: number;\n  message: string;\n  response?: {\n    imp_uid: string;\n    merchant_uid: string;\n    pay_method: string;\n    channel: string;\n    pg_provider: string;\n    pg_tid: string;\n    pg_id: string;\n    escrow: boolean;\n    apply_num: string;\n    bank_code: string;\n    bank_name: string;\n    card_code: string;\n    card_name: string;\n    card_number: string;\n    card_quota: number;\n    currency: string;\n    amount: number;\n    receipt_url: string;\n    name: string;\n    buyer_name: string;\n    buyer_email: string;\n    buyer_tel: string;\n    buyer_addr: string;\n    buyer_postcode: string;\n    custom_data: string;\n    status: string;\n    paid_at: number;\n    failed_at: number;\n    cancelled_at: number;\n    fail_reason: string;\n    cancel_reason: string;\n  };\n}\n\n// Get Port One API token\nasync function getPortOneToken(): Promise<string> {\n  const response = await fetch(`${PORTONE_API_URL}/users/getToken`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      imp_key: PORTONE_API_KEY,\n      imp_secret: PORTONE_API_SECRET,\n    }),\n  });\n\n  const data: PortOneTokenResponse = await response.json();\n\n  if (!data.response?.access_token) {\n    throw new Error('Failed to get Port One API token');\n  }\n\n  return data.response.access_token;\n}\n\n// Verify payment with Port One API\nasync function verifyPortOnePayment(impUid: string): Promise<PortOnePaymentResponse['response']> {\n  const token = await getPortOneToken();\n\n  const response = await fetch(`${PORTONE_API_URL}/payments/${impUid}`, {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n    },\n  });\n\n  const data: PortOnePaymentResponse = await response.json();\n\n  if (!data.response) {\n    throw new Error(`Payment verification failed: ${data.message}`);\n  }\n\n  return data.response;\n}\n\n// Verify webhook signature\nfunction verifyWebhookSignature(payload: any, signature: string): boolean {\n  const calculatedSignature = createHmac('sha256', PORTONE_WEBHOOK_SECRET)\n    .update(JSON.stringify(payload))\n    .digest('hex');\n\n  return calculatedSignature === signature;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const supabase = await createServerSupabaseClient();\n    \n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { paymentId } = body;\n\n    if (!paymentId) {\n      return NextResponse.json(\n        { error: 'Payment ID is required' },\n        { status: 400 }\n      );\n    }\n\n    // Verify payment with Port One\n    const paymentData = await verifyPortOnePayment(paymentId);\n\n    if (!paymentData) {\n      return NextResponse.json(\n        { error: 'Payment verification failed' },\n        { status: 400 }\n      );\n    }\n\n    // Check if payment is successful\n    if (paymentData.status !== 'paid') {\n      return NextResponse.json(\n        { error: `Payment not completed. Status: ${paymentData.status}` },\n        { status: 400 }\n      );\n    }\n\n    // Parse custom data to get product info\n    let customData;\n    try {\n      customData = JSON.parse(paymentData.custom_data);\n    } catch (e) {\n      console.error('Failed to parse custom data:', e);\n      return NextResponse.json(\n        { error: 'Invalid payment data' },\n        { status: 400 }\n      );\n    }\n\n    const { productId, starCandy, bonusAmount } = customData;\n\n    // Check if receipt already exists\n    const { data: existingReceipt } = await supabase\n      .from('receipts')\n      .select('id')\n      .eq('receipt_data', paymentId)\n      .single();\n\n    if (existingReceipt) {\n      return NextResponse.json(\n        { error: 'Payment already processed' },\n        { status: 400 }\n      );\n    }\n\n    // Create receipt data\n    const receiptData = {\n      payment_id: paymentId,\n      merchant_uid: paymentData.merchant_uid,\n      amount: paymentData.amount,\n      currency: paymentData.currency,\n      payment_method: 'port_one',\n      pg_provider: paymentData.pg_provider,\n      payment_details: paymentData,\n    };\n\n    // Start transaction\n    const { data: receipt, error: receiptError } = await supabase\n      .from('receipts')\n      .insert({\n        user_id: user.id,\n        product_id: productId,\n        receipt_data: JSON.stringify(receiptData),\n        receipt_hash: paymentId, // Using payment ID as hash for uniqueness\n        status: 'completed',\n        platform: 'web',\n        environment: process.env.NODE_ENV === 'production' ? 'production' : 'sandbox',\n        verification_data: paymentData,\n      })\n      .select()\n      .single();\n\n    if (receiptError) {\n      console.error('Failed to create receipt:', receiptError);\n      return NextResponse.json(\n        { error: 'Failed to record payment' },\n        { status: 500 }\n      );\n    }\n\n    // Update user profile star candy balance\n    const { data: currentProfile } = await supabase\n      .from('user_profiles')\n      .select('star_candy')\n      .eq('id', user.id)\n      .single();\n\n    if (currentProfile) {\n      const { error: profileError } = await supabase\n        .from('user_profiles')\n        .update({\n          star_candy: (currentProfile.star_candy || 0) + starCandy,\n        })\n        .eq('id', user.id);\n\n      if (profileError) {\n        console.error('Failed to update user profile:', profileError);\n        // Note: We don't return error here as receipt is already created\n      }\n    }\n\n    // Record star candy history\n    const transactionId = `PURCHASE_${paymentId}`;\n    const { error: historyError } = await supabase\n      .from('star_candy_history')\n      .insert({\n        user_id: user.id,\n        amount: starCandy,\n        type: 'PURCHASE',\n        transaction_id: transactionId,\n      });\n\n    if (historyError) {\n      console.error('Failed to record star candy history:', historyError);\n    }\n\n    // Record bonus if applicable\n    if (bonusAmount > 0) {\n      const expiryDate = new Date();\n      expiryDate.setMonth(expiryDate.getMonth() + 1); // Next month\n      expiryDate.setDate(15); // 15th of next month\n\n      const { error: bonusError } = await supabase\n        .from('star_candy_bonus_history')\n        .insert({\n          user_id: user.id,\n          amount: bonusAmount,\n          remain_amount: bonusAmount,\n          type: 'PURCHASE',\n          transaction_id: transactionId,\n          expired_dt: expiryDate.toISOString(),\n        });\n\n      if (bonusError) {\n        console.error('Failed to record bonus:', bonusError);\n      }\n\n      // Also update user's bonus balance\n      const { data: profileForBonus } = await supabase\n        .from('user_profiles')\n        .select('star_candy_bonus')\n        .eq('id', user.id)\n        .single();\n\n      if (profileForBonus) {\n        const { error: bonusUpdateError } = await supabase\n          .from('user_profiles')\n          .update({\n            star_candy_bonus: (profileForBonus.star_candy_bonus || 0) + bonusAmount,\n          })\n          .eq('id', user.id);\n\n        if (bonusUpdateError) {\n          console.error('Failed to update bonus balance:', bonusUpdateError);\n        }\n      }\n    }\n\n    return NextResponse.json({\n      verified: true,\n      receipt_id: receipt.id,\n      message: 'Payment verified and processed successfully',\n    });\n\n  } catch (error) {\n    console.error('Payment verification error:', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}