3ff734dd43112c8b1b2abc6d48da3599
"use strict";

/* istanbul ignore next */
function cov_1h20pju33u() {
  var path = "/Users/cheolhyun/Repositories/picnic-web/app/api/test-error/route.ts";
  var hash = "a4cd1237bb6bbcbc57e6b30776ed0d6e4610d605";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cheolhyun/Repositories/picnic-web/app/api/test-error/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 21,
          column: 29
        },
        end: {
          line: 21,
          column: 49
        }
      },
      "8": {
        start: {
          line: 22,
          column: 22
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "9": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 70
        }
      },
      "10": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      "11": {
        start: {
          line: 27,
          column: 12
        },
        end: {
          line: 27,
          column: 88
        }
      },
      "12": {
        start: {
          line: 30,
          column: 12
        },
        end: {
          line: 30,
          column: 82
        }
      },
      "13": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 86
        }
      },
      "14": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 81
        }
      },
      "15": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 74
        }
      },
      "16": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 86
        }
      },
      "17": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "18": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 51
        }
      },
      "19": {
        start: {
          line: 51,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "20": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 52,
          column: 41
        }
      },
      "21": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 43
        }
      },
      "22": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 72
        }
      },
      "23": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 72
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "GET",
        decl: {
          start: {
            line: 20,
            column: 15
          },
          end: {
            line: 20,
            column: 18
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 20
      },
      "4": {
        name: "POST",
        decl: {
          start: {
            line: 49,
            column: 15
          },
          end: {
            line: 49,
            column: 19
          }
        },
        loc: {
          start: {
            line: 49,
            column: 29
          },
          end: {
            line: 59,
            column: 1
          }
        },
        line: 49
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 23,
            column: 46
          },
          end: {
            line: 23,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 46
          },
          end: {
            line: 23,
            column: 55
          }
        }, {
          start: {
            line: 23,
            column: 59
          },
          end: {
            line: 23,
            column: 68
          }
        }],
        line: 23
      },
      "1": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 25,
            column: 8
          },
          end: {
            line: 27,
            column: 88
          }
        }, {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 30,
            column: 82
          }
        }, {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 86
          }
        }, {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 36,
            column: 81
          }
        }, {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 39,
            column: 74
          }
        }, {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 42,
            column: 86
          }
        }],
        line: 24
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/cheolhyun/Repositories/picnic-web/app/api/test-error/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * 500 \uC5D0\uB7EC \uD14C\uC2A4\uD2B8\uC6A9 API \uC5D4\uB4DC\uD3EC\uC778\uD2B8\n * \n * \uC0AC\uC6A9\uBC95:\n * - GET /api/test-error \u2192 \uC77C\uBC18\uC801\uC778 500 \uC5D0\uB7EC\n * - GET /api/test-error?type=database \u2192 \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n * - GET /api/test-error?type=auth \u2192 \uC778\uC99D \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n * - GET /api/test-error?type=timeout \u2192 \uD0C0\uC784\uC544\uC6C3 \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n */\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const errorType = searchParams.get('type');\n\n  console.log('\uD83D\uDEA8 [TEST ERROR] \uC758\uB3C4\uC801 \uC5D0\uB7EC \uBC1C\uC0DD:', errorType || 'general');\n\n  switch (errorType) {\n    case 'database':\n      // \uB370\uC774\uD130\uBCA0\uC774\uC2A4 \uC5F0\uACB0 \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n      throw new Error('Database connection failed: Connection timeout after 30s');\n\n    case 'auth':\n      // \uC778\uC99D \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n      throw new Error('Authentication failed: Invalid JWT token signature');\n\n    case 'timeout':\n      // \uD0C0\uC784\uC544\uC6C3 \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n      throw new Error('Request timeout: Operation took longer than 10 seconds');\n\n    case 'memory':\n      // \uBA54\uBAA8\uB9AC \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n      throw new Error('Out of memory: Cannot allocate buffer of size 2GB');\n\n    case 'network':\n      // \uB124\uD2B8\uC6CC\uD06C \uC5D0\uB7EC \uC2DC\uBBAC\uB808\uC774\uC158\n      throw new Error('Network error: ECONNREFUSED 127.0.0.1:5432');\n\n    default:\n      // \uC77C\uBC18\uC801\uC778 \uC11C\uBC84 \uC5D0\uB7EC\n      throw new Error('Internal server error: Something went wrong on our end');\n  }\n\n  // \uC774 \uCF54\uB4DC\uB294 \uC808\uB300 \uC2E4\uD589\uB418\uC9C0 \uC54A\uC74C (\uC704\uC5D0\uC11C \uD56D\uC0C1 \uC5D0\uB7EC\uAC00 \uBC1C\uC0DD)\n  return NextResponse.json({ message: 'This should never be reached' });\n}\n\nexport async function POST(request: NextRequest) {\n  console.log('\uD83D\uDEA8 [TEST ERROR] POST \uC694\uCCAD\uC73C\uB85C \uC5D0\uB7EC \uBC1C\uC0DD');\n  \n  try {\n    const body = await request.json();\n    console.log('Request body:', body);\n  } catch (parseError) {\n    throw new Error('Invalid JSON payload: Malformed request body');\n  }\n\n  // POST \uC694\uCCAD\uC5D0\uC11C\uB294 \uD56D\uC0C1 \uCC98\uB9AC \uC911 \uC5D0\uB7EC \uBC1C\uC0DD\n  throw new Error('Failed to process POST request: Validation error');\n} "],
      names: ["GET", "POST", "request", "searchParams", "URL", "url", "errorType", "get", "console", "log", "Error", "NextResponse", "json", "message", "body", "parseError"],
      mappings: ";;;;;;;;;;;IAYsBA,GAAG;eAAHA;;IAoCAC,IAAI;eAAJA;;;wBAhDoB;AAYnC,eAAeD,IAAIE,OAAoB;IAC5C,MAAM,EAAEC,YAAY,EAAE,GAAG,IAAIC,IAAIF,QAAQG,GAAG;IAC5C,MAAMC,YAAYH,aAAaI,GAAG,CAAC;IAEnCC,QAAQC,GAAG,CAAC,8BAA8BH,aAAa;IAEvD,OAAQA;QACN,KAAK;YACH,qBAAqB;YACrB,MAAM,IAAII,MAAM;QAElB,KAAK;YACH,cAAc;YACd,MAAM,IAAIA,MAAM;QAElB,KAAK;YACH,gBAAgB;YAChB,MAAM,IAAIA,MAAM;QAElB,KAAK;YACH,eAAe;YACf,MAAM,IAAIA,MAAM;QAElB,KAAK;YACH,gBAAgB;YAChB,MAAM,IAAIA,MAAM;QAElB;YACE,aAAa;YACb,MAAM,IAAIA,MAAM;IACpB;IAEA,mCAAmC;IACnC,OAAOC,oBAAY,CAACC,IAAI,CAAC;QAAEC,SAAS;IAA+B;AACrE;AAEO,eAAeZ,KAAKC,OAAoB;IAC7CM,QAAQC,GAAG,CAAC;IAEZ,IAAI;QACF,MAAMK,OAAO,MAAMZ,QAAQU,IAAI;QAC/BJ,QAAQC,GAAG,CAAC,iBAAiBK;IAC/B,EAAE,OAAOC,YAAY;QACnB,MAAM,IAAIL,MAAM;IAClB;IAEA,2BAA2B;IAC3B,MAAM,IAAIA,MAAM;AAClB"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a4cd1237bb6bbcbc57e6b30776ed0d6e4610d605"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1h20pju33u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1h20pju33u();
cov_1h20pju33u().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_1h20pju33u().f[0]++;
  cov_1h20pju33u().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_1h20pju33u().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_1h20pju33u().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_1h20pju33u().f[1]++;
    cov_1h20pju33u().s[4]++;
    return GET;
  },
  POST: function () {
    /* istanbul ignore next */
    cov_1h20pju33u().f[2]++;
    cov_1h20pju33u().s[5]++;
    return POST;
  }
});
const _server =
/* istanbul ignore next */
(cov_1h20pju33u().s[6]++, require("next/server"));
async function GET(request) {
  /* istanbul ignore next */
  cov_1h20pju33u().f[3]++;
  const {
    searchParams
  } =
  /* istanbul ignore next */
  (cov_1h20pju33u().s[7]++, new URL(request.url));
  const errorType =
  /* istanbul ignore next */
  (cov_1h20pju33u().s[8]++, searchParams.get('type'));
  /* istanbul ignore next */
  cov_1h20pju33u().s[9]++;
  console.log('🚨 [TEST ERROR] 의도적 에러 발생:',
  /* istanbul ignore next */
  (cov_1h20pju33u().b[0][0]++, errorType) ||
  /* istanbul ignore next */
  (cov_1h20pju33u().b[0][1]++, 'general'));
  /* istanbul ignore next */
  cov_1h20pju33u().s[10]++;
  switch (errorType) {
    case 'database':
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][0]++;
      cov_1h20pju33u().s[11]++;
      // 데이터베이스 연결 에러 시뮬레이션
      throw new Error('Database connection failed: Connection timeout after 30s');
    case 'auth':
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][1]++;
      cov_1h20pju33u().s[12]++;
      // 인증 에러 시뮬레이션
      throw new Error('Authentication failed: Invalid JWT token signature');
    case 'timeout':
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][2]++;
      cov_1h20pju33u().s[13]++;
      // 타임아웃 에러 시뮬레이션
      throw new Error('Request timeout: Operation took longer than 10 seconds');
    case 'memory':
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][3]++;
      cov_1h20pju33u().s[14]++;
      // 메모리 에러 시뮬레이션
      throw new Error('Out of memory: Cannot allocate buffer of size 2GB');
    case 'network':
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][4]++;
      cov_1h20pju33u().s[15]++;
      // 네트워크 에러 시뮬레이션
      throw new Error('Network error: ECONNREFUSED 127.0.0.1:5432');
    default:
      /* istanbul ignore next */
      cov_1h20pju33u().b[1][5]++;
      cov_1h20pju33u().s[16]++;
      // 일반적인 서버 에러
      throw new Error('Internal server error: Something went wrong on our end');
  }
  // 이 코드는 절대 실행되지 않음 (위에서 항상 에러가 발생)
  /* istanbul ignore next */
  cov_1h20pju33u().s[17]++;
  return _server.NextResponse.json({
    message: 'This should never be reached'
  });
}
async function POST(request) {
  /* istanbul ignore next */
  cov_1h20pju33u().f[4]++;
  cov_1h20pju33u().s[18]++;
  console.log('🚨 [TEST ERROR] POST 요청으로 에러 발생');
  /* istanbul ignore next */
  cov_1h20pju33u().s[19]++;
  try {
    const body =
    /* istanbul ignore next */
    (cov_1h20pju33u().s[20]++, await request.json());
    /* istanbul ignore next */
    cov_1h20pju33u().s[21]++;
    console.log('Request body:', body);
  } catch (parseError) {
    /* istanbul ignore next */
    cov_1h20pju33u().s[22]++;
    throw new Error('Invalid JSON payload: Malformed request body');
  }
  // POST 요청에서는 항상 처리 중 에러 발생
  /* istanbul ignore next */
  cov_1h20pju33u().s[23]++;
  throw new Error('Failed to process POST request: Validation error');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfMWgyMHBqdTMzdSIsImYiLCJzIiwiUE9TVCIsInJlcXVlc3QiLCJzZWFyY2hQYXJhbXMiLCJVUkwiLCJ1cmwiLCJlcnJvclR5cGUiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwiYiIsIkVycm9yIiwiX3NlcnZlciIsIk5leHRSZXNwb25zZSIsImpzb24iLCJtZXNzYWdlIiwiYm9keSIsInBhcnNlRXJyb3IiXSwic291cmNlcyI6WyIvVXNlcnMvY2hlb2xoeXVuL1JlcG9zaXRvcmllcy9waWNuaWMtd2ViL2FwcC9hcGkvdGVzdC1lcnJvci9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG4vKipcbiAqIDUwMCDsl5Drn6wg7YWM7Iqk7Yq47JqpIEFQSSDsl5Trk5ztj6zsnbjtirhcbiAqIFxuICog7IKs7Jqp67KVOlxuICogLSBHRVQgL2FwaS90ZXN0LWVycm9yIOKGkiDsnbzrsJjsoIHsnbggNTAwIOyXkOufrFxuICogLSBHRVQgL2FwaS90ZXN0LWVycm9yP3R5cGU9ZGF0YWJhc2Ug4oaSIOuNsOydtO2EsOuyoOydtOyKpCDsl5Drn6wg7Iuc666s66CI7J207IWYXG4gKiAtIEdFVCAvYXBpL3Rlc3QtZXJyb3I/dHlwZT1hdXRoIOKGkiDsnbjspp0g7JeQ65+sIOyLnOuurOugiOydtOyFmFxuICogLSBHRVQgL2FwaS90ZXN0LWVycm9yP3R5cGU9dGltZW91dCDihpIg7YOA7J6E7JWE7JuDIOyXkOufrCDsi5zrrqzroIjsnbTshZhcbiAqL1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIGNvbnN0IHsgc2VhcmNoUGFyYW1zIH0gPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3QgZXJyb3JUeXBlID0gc2VhcmNoUGFyYW1zLmdldCgndHlwZScpO1xuXG4gIGNvbnNvbGUubG9nKCfwn5qoIFtURVNUIEVSUk9SXSDsnZjrj4TsoIEg7JeQ65+sIOuwnOyDnTonLCBlcnJvclR5cGUgfHwgJ2dlbmVyYWwnKTtcblxuICBzd2l0Y2ggKGVycm9yVHlwZSkge1xuICAgIGNhc2UgJ2RhdGFiYXNlJzpcbiAgICAgIC8vIOuNsOydtO2EsOuyoOydtOyKpCDsl7DqsrAg7JeQ65+sIOyLnOuurOugiOydtOyFmFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBjb25uZWN0aW9uIGZhaWxlZDogQ29ubmVjdGlvbiB0aW1lb3V0IGFmdGVyIDMwcycpO1xuXG4gICAgY2FzZSAnYXV0aCc6XG4gICAgICAvLyDsnbjspp0g7JeQ65+sIOyLnOuurOugiOydtOyFmFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBdXRoZW50aWNhdGlvbiBmYWlsZWQ6IEludmFsaWQgSldUIHRva2VuIHNpZ25hdHVyZScpO1xuXG4gICAgY2FzZSAndGltZW91dCc6XG4gICAgICAvLyDtg4DsnoTslYTsm4Mg7JeQ65+sIOyLnOuurOugiOydtOyFmFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZXF1ZXN0IHRpbWVvdXQ6IE9wZXJhdGlvbiB0b29rIGxvbmdlciB0aGFuIDEwIHNlY29uZHMnKTtcblxuICAgIGNhc2UgJ21lbW9yeSc6XG4gICAgICAvLyDrqZTrqqjrpqwg7JeQ65+sIOyLnOuurOugiOydtOyFmFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdPdXQgb2YgbWVtb3J5OiBDYW5ub3QgYWxsb2NhdGUgYnVmZmVyIG9mIHNpemUgMkdCJyk7XG5cbiAgICBjYXNlICduZXR3b3JrJzpcbiAgICAgIC8vIOuEpO2KuOybjO2BrCDsl5Drn6wg7Iuc666s66CI7J207IWYXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3I6IEVDT05OUkVGVVNFRCAxMjcuMC4wLjE6NTQzMicpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIOydvOuwmOyggeyduCDshJzrsoQg7JeQ65+sXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludGVybmFsIHNlcnZlciBlcnJvcjogU29tZXRoaW5nIHdlbnQgd3Jvbmcgb24gb3VyIGVuZCcpO1xuICB9XG5cbiAgLy8g7J20IOy9lOuTnOuKlCDsoIjrjIAg7Iuk7ZaJ65CY7KeAIOyViuydjCAo7JyE7JeQ7IScIO2VreyDgSDsl5Drn6zqsIAg67Cc7IOdKVxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBtZXNzYWdlOiAnVGhpcyBzaG91bGQgbmV2ZXIgYmUgcmVhY2hlZCcgfSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIGNvbnNvbGUubG9nKCfwn5qoIFtURVNUIEVSUk9SXSBQT1NUIOyalOyyreycvOuhnCDsl5Drn6wg67Cc7IOdJyk7XG4gIFxuICB0cnkge1xuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcbiAgICBjb25zb2xlLmxvZygnUmVxdWVzdCBib2R5OicsIGJvZHkpO1xuICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEpTT04gcGF5bG9hZDogTWFsZm9ybWVkIHJlcXVlc3QgYm9keScpO1xuICB9XG5cbiAgLy8gUE9TVCDsmpTssq3sl5DshJzripQg7ZWt7IOBIOyymOumrCDspJEg7JeQ65+sIOuwnOyDnVxuICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBwcm9jZXNzIFBPU1QgcmVxdWVzdDogVmFsaWRhdGlvbiBlcnJvcicpO1xufSAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUFZc0JBLEdBQUcsV0FBQUEsQ0FBQTtJQUFBO0lBQUFDLGNBQUEsR0FBQUMsQ0FBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7V0FBSEgsR0FBQTs7RUFvQ0FJLElBQUksV0FBQUEsQ0FBQTtJQUFBO0lBQUFILGNBQUEsR0FBQUMsQ0FBQTtJQUFBRCxjQUFBLEdBQUFFLENBQUE7V0FBSkMsSUFBQTs7Ozs7a0NBaERvQjtBQVluQyxlQUFlSixJQUFJSyxPQUFvQjtFQUFBO0VBQUFKLGNBQUEsR0FBQUMsQ0FBQTtFQUM1QyxNQUFNO0lBQUVJO0VBQVksQ0FBRTtFQUFBO0VBQUEsQ0FBQUwsY0FBQSxHQUFBRSxDQUFBLE9BQUcsSUFBSUksR0FBQSxDQUFJRixPQUFBLENBQVFHLEdBQUc7RUFDNUMsTUFBTUMsU0FBQTtFQUFBO0VBQUEsQ0FBQVIsY0FBQSxHQUFBRSxDQUFBLE9BQVlHLFlBQUEsQ0FBYUksR0FBRyxDQUFDO0VBQUE7RUFBQVQsY0FBQSxHQUFBRSxDQUFBO0VBRW5DUSxPQUFBLENBQVFDLEdBQUcsQ0FBQztFQUE4QjtFQUFBLENBQUFYLGNBQUEsR0FBQVksQ0FBQSxVQUFBSixTQUFBO0VBQUE7RUFBQSxDQUFBUixjQUFBLEdBQUFZLENBQUEsVUFBYTtFQUFBO0VBQUFaLGNBQUEsR0FBQUUsQ0FBQTtFQUV2RCxRQUFRTSxTQUFBO0lBQ04sS0FBSztNQUFBO01BQUFSLGNBQUEsR0FBQVksQ0FBQTtNQUFBWixjQUFBLEdBQUFFLENBQUE7TUFDSDtNQUNBLE1BQU0sSUFBSVcsS0FBQSxDQUFNO0lBRWxCLEtBQUs7TUFBQTtNQUFBYixjQUFBLEdBQUFZLENBQUE7TUFBQVosY0FBQSxHQUFBRSxDQUFBO01BQ0g7TUFDQSxNQUFNLElBQUlXLEtBQUEsQ0FBTTtJQUVsQixLQUFLO01BQUE7TUFBQWIsY0FBQSxHQUFBWSxDQUFBO01BQUFaLGNBQUEsR0FBQUUsQ0FBQTtNQUNIO01BQ0EsTUFBTSxJQUFJVyxLQUFBLENBQU07SUFFbEIsS0FBSztNQUFBO01BQUFiLGNBQUEsR0FBQVksQ0FBQTtNQUFBWixjQUFBLEdBQUFFLENBQUE7TUFDSDtNQUNBLE1BQU0sSUFBSVcsS0FBQSxDQUFNO0lBRWxCLEtBQUs7TUFBQTtNQUFBYixjQUFBLEdBQUFZLENBQUE7TUFBQVosY0FBQSxHQUFBRSxDQUFBO01BQ0g7TUFDQSxNQUFNLElBQUlXLEtBQUEsQ0FBTTtJQUVsQjtNQUFBO01BQUFiLGNBQUEsR0FBQVksQ0FBQTtNQUFBWixjQUFBLEdBQUFFLENBQUE7TUFDRTtNQUNBLE1BQU0sSUFBSVcsS0FBQSxDQUFNO0VBQ3BCO0VBRUE7RUFBQTtFQUFBYixjQUFBLEdBQUFFLENBQUE7RUFDQSxPQUFPWSxPQUFBLENBQUFDLFlBQVksQ0FBQ0MsSUFBSSxDQUFDO0lBQUVDLE9BQUEsRUFBUztFQUErQjtBQUNyRTtBQUVPLGVBQWVkLEtBQUtDLE9BQW9CO0VBQUE7RUFBQUosY0FBQSxHQUFBQyxDQUFBO0VBQUFELGNBQUEsR0FBQUUsQ0FBQTtFQUM3Q1EsT0FBQSxDQUFRQyxHQUFHLENBQUM7RUFBQTtFQUFBWCxjQUFBLEdBQUFFLENBQUE7RUFFWixJQUFJO0lBQ0YsTUFBTWdCLElBQUE7SUFBQTtJQUFBLENBQUFsQixjQUFBLEdBQUFFLENBQUEsUUFBTyxNQUFNRSxPQUFBLENBQVFZLElBQUk7SUFBQTtJQUFBaEIsY0FBQSxHQUFBRSxDQUFBO0lBQy9CUSxPQUFBLENBQVFDLEdBQUcsQ0FBQyxpQkFBaUJPLElBQUE7RUFDL0IsRUFBRSxPQUFPQyxVQUFBLEVBQVk7SUFBQTtJQUFBbkIsY0FBQSxHQUFBRSxDQUFBO0lBQ25CLE1BQU0sSUFBSVcsS0FBQSxDQUFNO0VBQ2xCO0VBRUE7RUFBQTtFQUFBYixjQUFBLEdBQUFFLENBQUE7RUFDQSxNQUFNLElBQUlXLEtBQUEsQ0FBTTtBQUNsQiIsImlnbm9yZUxpc3QiOltdfQ==