{"version":3,"names":["createPublicSupabaseClient","cov_12e45y83kc","f","s","createServerSupabaseClient","createServerSupabaseClientWithCookies","createServerSupabaseClientWithRequest","getServerSession","getServerUser","withAuth","cookieStore","process","env","NEXT_PUBLIC_SUPABASE_URL","b","Error","NEXT_PUBLIC_SUPABASE_ANON_KEY","_ssr","createServerClient","cookies","get","name","cookie","Promise","resolve","value","set","options","error","NODE_ENV","console","warn","remove","maxAge","emptyCookieStore","undefined","then","_interop_require_wildcard","require","appRouterCookieStore","req","res","domain","path","sameSite","secure","cookieOptions","httpOnly","setHeader","Object","entries","filter","_","v","map","k","charAt","toUpperCase","slice","Boolean","join","supabase","data","user","auth","getUser","session","mockSession","access_token","refresh_token","expires_at","token_type","message","includes","callback","id"],"sources":["/Users/cheolhyun/Repositories/picnic-web/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { Database } from '@/types/supabase';\nimport type { CookieOptions } from '@supabase/ssr';\n\n// 쿠키 스토어 인터페이스\nexport interface CookieStore {\n  get: (name: string) => { name: string; value: string } | undefined;\n  set: (cookie: { name: string; value: string; [key: string]: any }) => void;\n  remove?: (name: string, options?: any) => void;\n}\n\n/**\n * pages 라우터와 app 라우터 모두에서 사용할 수 있는 서버 Supabase 클라이언트 생성 함수\n * \n * @param cookieStore 쿠키 저장소 (headers API 또는 req/res 객체)\n * @returns Supabase 클라이언트\n */\nexport function createServerSupabaseClientWithCookies(cookieStore: CookieStore) {\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n    throw new Error('환경 변수 NEXT_PUBLIC_SUPABASE_URL이 설정되지 않았습니다.');\n  }\n  \n  if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n    throw new Error('환경 변수 NEXT_PUBLIC_SUPABASE_ANON_KEY가 설정되지 않았습니다.');\n  }\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        async get(name: string) {\n          const cookie = await Promise.resolve(cookieStore.get(name));\n          return cookie?.value;\n        },\n        async set(name: string, value: string, options: CookieOptions) {\n          try {\n            await Promise.resolve(cookieStore.set({ name, value, ...options }));\n          } catch (error) {\n            // 쿠키 설정 실패 시 로깅 (개발 환경에서만)\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn('서버 Supabase 클라이언트: 쿠키 설정 실패', error);\n            }\n          }\n        },\n        async remove(name: string, options: CookieOptions) {\n          try {\n            if (cookieStore.remove) {\n              await Promise.resolve(cookieStore.remove(name, options));\n            } else {\n              await Promise.resolve(cookieStore.set({ name, value: '', ...options, maxAge: 0 }));\n            }\n          } catch (error) {\n            // 쿠키 삭제 실패 시 로깅 (개발 환경에서만)\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn('서버 Supabase 클라이언트: 쿠키 삭제 실패', error);\n            }\n          }\n        },\n      },\n    }\n  );\n}\n\n// 페이지 라우터용 임시 해결책 - 빈 쿠키 스토어로 인증 없는 클라이언트 생성\nconst emptyCookieStore: CookieStore = {\n  get: () => undefined,\n  set: () => {}\n};\n\n/**\n * App Router용 서버 Supabase 클라이언트를 생성합니다.\n * Next.js의 cookies() API를 사용하여 인증 쿠키를 읽습니다.\n * \n * @returns Supabase 클라이언트 인스턴스\n */\nexport async function createServerSupabaseClient() {\n  try {\n    // App Router 환경에서만 cookies() API 사용\n    const { cookies } = await import('next/headers');\n    const cookieStore = await cookies();\n    \n    const appRouterCookieStore: CookieStore = {\n      get: (name: string) => {\n        const cookie = cookieStore.get(name);\n        return cookie ? { name: cookie.name, value: cookie.value } : undefined;\n      },\n      set: (cookie: { name: string; value: string; [key: string]: any }) => {\n        try {\n          cookieStore.set(cookie.name, cookie.value, cookie);\n        } catch (error) {\n          // 쿠키 설정 실패 시 로깅 (개발 환경에서만)\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn('서버 Supabase 클라이언트: 쿠키 설정 실패', error);\n          }\n        }\n      },\n      remove: (name: string, options?: any) => {\n        try {\n          cookieStore.set(name, '', { ...options, maxAge: 0 });\n        } catch (error) {\n          // 쿠키 삭제 실패 시 로깅 (개발 환경에서만)\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn('서버 Supabase 클라이언트: 쿠키 삭제 실패', error);\n          }\n        }\n      }\n    };\n    \n    return createServerSupabaseClientWithCookies(appRouterCookieStore);\n  } catch (error) {\n    // App Router가 아닌 환경에서는 빈 쿠키 스토어 사용 (Pages Router 등)\n    console.warn('⚠️ App Router가 아닌 환경 - 빈 쿠키 스토어 사용:', error);\n    return createServerSupabaseClientWithCookies(emptyCookieStore);\n  }\n}\n\n/**\n * Pages Router에서 사용할 Supabase 클라이언트를 생성합니다.\n * req/res 객체를 통해 쿠키를 관리합니다.\n * \n * @param req Next.js 요청 객체\n * @param res Next.js 응답 객체\n * @returns Supabase 클라이언트\n */\nexport function createServerSupabaseClientWithRequest(req: any, res: any) {\n  // req/res 객체를 사용하여 쿠키 저장소 생성\n  const cookieStore: CookieStore = {\n    get: (name) => {\n      const cookies = req.cookies;\n      const value = cookies[name];\n      return value ? { name, value } : undefined;\n    },\n    set: (cookie) => {\n      const { name, value, maxAge, domain, path, sameSite, secure } = cookie;\n      const cookieOptions = {\n        maxAge: maxAge || 0,\n        domain,\n        path: path || '/',\n        sameSite: sameSite || 'lax',\n        secure: secure || false,\n        httpOnly: true\n      };\n      \n      res.setHeader('Set-Cookie', `${name}=${value}; ${Object.entries(cookieOptions)\n        .filter(([_, v]) => v !== undefined)\n        .map(([k, v]) => {\n          if (k === 'httpOnly' || k === 'secure') return v ? k : '';\n          if (k === 'maxAge') return v ? `Max-Age=${v}` : '';\n          return `${k.charAt(0).toUpperCase() + k.slice(1)}=${v}`;\n        })\n        .filter(Boolean)\n        .join('; ')}`);\n    }\n  };\n  \n  return createServerSupabaseClientWithCookies(cookieStore);\n}\n\n/**\n * 서버 컴포넌트에서 현재 인증 세션을 가져옵니다.\n * ⚠️ 내부적으로 getUser()를 사용하며, 더 빠른 getServerUser()를 직접 사용하는 것을 권장합니다.\n * @returns 현재 인증 세션 또는 null (호환성을 위해 세션 형태로 반환)\n */\nexport async function getServerSession() {\n  const supabase = await createServerSupabaseClient();\n  \n  // getUser()로 사용자 정보 확인 (더 빠름)\n  const { data: { user }, error } = await supabase.auth.getUser();\n  \n  if (error || !user) {\n    return { data: { session: null }, error };\n  }\n  \n  // 호환성을 위해 간단한 세션 객체 생성\n  const mockSession = {\n    user,\n    access_token: 'token-from-cookies',\n    refresh_token: null,\n    expires_at: null,\n    token_type: 'bearer' as const\n  };\n  \n  return { data: { session: mockSession }, error: null };\n}\n\n/**\n * 서버 컴포넌트에서 현재 사용자 정보를 가져옵니다.\n * getSession()보다 빠르고 안정적입니다.\n * @returns 현재 사용자 정보 또는 null\n */\nexport async function getServerUser() {\n  try {\n    const supabase = await createServerSupabaseClient();\n    const { data: { user }, error } = await supabase.auth.getUser();\n    \n    if (error) {\n      // AuthSessionMissingError는 정상적인 로그아웃 상태이므로 경고만 표시\n      if (error.message?.includes('Auth session missing')) {\n        // 인증 세션이 없는 정상적인 상태\n        return null;\n      }\n      console.warn('🔍 [Server] getUser 오류:', error);\n      return null;\n    }\n    \n    return user;\n  } catch (error) {\n    // 예상치 못한 오류 처리\n    console.warn('🔍 [Server] getUser 예외:', error);\n    return null;\n  }\n}\n\n/**\n * 주어진 콜백을 인증된 사용자 컨텍스트에서 실행하는 유틸리티 함수입니다.\n * 인증되지 않은 경우 오류를 발생시킵니다.\n * \n * @example\n * const result = await withAuth(async (userId) => {\n *   // 인증된 사용자에 대한 작업 수행\n *   return await db.users.findUnique({ where: { id: userId } });\n * });\n * \n * @param callback 인증된 사용자 ID를 인자로 받는 콜백 함수\n * @returns 콜백 함수의 결과\n * @throws 인증되지 않은 경우 오류\n */\nexport async function withAuth<T>(\n  callback: (userId: string) => Promise<T>\n): Promise<T> {\n  const user = await getServerUser();\n  \n  if (!user) {\n    throw new Error('인증이 필요합니다');\n  }\n  \n  return callback(user.id);\n} \n\n/**\n * 정적 렌더링에서 공개 데이터 조회용 Supabase 클라이언트\n * 쿠키를 사용하지 않아 정적 렌더링과 ISR에서 안전하게 사용 가능\n * @returns 인증 없는 공개 데이터 전용 Supabase 클라이언트\n */\nexport function createPublicSupabaseClient() {\n  if (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n    throw new Error('환경 변수 NEXT_PUBLIC_SUPABASE_URL이 설정되지 않았습니다.');\n  }\n  \n  if (!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n    throw new Error('환경 변수 NEXT_PUBLIC_SUPABASE_ANON_KEY가 설정되지 않았습니다.');\n  }\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n    {\n      cookies: {\n        // 정적 렌더링을 위한 빈 쿠키 핸들러\n        async get() { return undefined; },\n        async set() { /* no-op */ },\n        async remove() { /* no-op */ },\n      },\n    }\n  );\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqPgBA,0BAA0B,WAAAA,CAAA;IAAA;I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","ignoreList":[]}