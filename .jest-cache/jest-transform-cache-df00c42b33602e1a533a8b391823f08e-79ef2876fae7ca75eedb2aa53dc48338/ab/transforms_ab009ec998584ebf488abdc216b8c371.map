{"version":3,"names":["clientTransformers","cov_j4ow1rrlw","f","s","serverTransformers","transformData","transformResponse","data","b","_transform","snakeToCamel","response","error","transform"],"sources":["/Users/cheolhyun/Repositories/picnic-web/lib/supabase/transforms.ts"],"sourcesContent":["import { SupabaseClient } from '@supabase/supabase-js';\nimport { snakeToCamel } from '@/utils/transform';\nimport { Database } from '@/types/supabase';\n\n/**\n * 응답 데이터를 스네이크 케이스에서 카멜 케이스로 변환합니다.\n * \n * @param data 변환할 데이터\n * @returns 변환된 데이터\n */\nexport function transformData<T>(data: T): T {\n  if (!data) return data;\n  return snakeToCamel(data) as T;\n}\n\n/**\n * 서버 Supabase 클라이언트의 응답을 카멜 케이스로 변환하는 헬퍼 함수\n * \n * @example\n * // 서버 컴포넌트에서\n * const supabase = await createServerSupabaseClient();\n * const { data, error } = await supabase\n *   .from('votes')\n *   .select('*')\n *   .then(transformResponse);\n * \n * @param response Supabase 응답 객체\n * @returns 데이터가 카멜 케이스로 변환된 응답 객체\n */\nexport function transformResponse<T = any>(response: { data: T | null; error: any }) {\n  if (response.data) {\n    return {\n      data: transformData(response.data),\n      error: response.error\n    };\n  }\n  return response;\n}\n\n/**\n * 서버에서 사용할 수 있는 변환 헬퍼 함수들을 제공합니다.\n */\nexport const serverTransformers = {\n  /**\n   * 데이터를 변환합니다.\n   */\n  transform: transformData,\n  \n  /**\n   * Supabase 응답을 변환합니다.\n   */\n  transformResponse,\n};\n\n/**\n * 클라이언트에서 사용할 수 있는 변환 헬퍼 함수들을 제공합니다.\n */\nexport const clientTransformers = {\n  /**\n   * 데이터를 변환합니다.\n   */\n  transform: transformData,\n  \n  /**\n   * Supabase 응답을 변환합니다.\n   */\n  transformResponse,\n}; "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyDaA,kBAAkB,WAAAA,CAAA;IAAA;IAAAC,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAlBH,kBAAA;;EAfAI,kBAAkB,WAAAA,CAAA;IAAA;IAAAH,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAlBC,kBAAA;;EAhCGC,aAAa,WAAAA,CAAA;IAAA;IAAAJ,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAbE,aAAA;;EAmBAC,iBAAiB,WAAAA,CAAA;IAAA;IAAAL,aAAA,GAAAC,CAAA;IAAAD,aAAA,GAAAE,CAAA;WAAjBG,iBAAA;;;;;iCA5Ba;AAStB,SAASD,cAAiBE,IAAO;EAAA;EAAAN,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACtC,IAAI,CAACI,IAAA,EAAM;IAAA;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IAAA,OAAOI,IAAA;EAAA;EAAA;EAAA;IAAAN,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAE,CAAA;EAClB,OAAO,IAAAM,UAAA,CAAAC,YAAY,EAACH,IAAA;AACtB;AAgBO,SAASD,kBAA2BK,QAAwC;EAAA;EAAAV,aAAA,GAAAC,CAAA;EAAAD,aAAA,GAAAE,CAAA;EACjF,IAAIQ,QAAA,CAASJ,IAAI,EAAE;IAAA;IAAAN,aAAA,GAAAO,CAAA;IAAAP,aAAA,GAAAE,CAAA;IACjB,OAAO;MACLI,IAAA,EAAMF,aAAA,CAAcM,QAAA,CAASJ,IAAI;MACjCK,KAAA,EAAOD,QAAA,CAASC;IAClB;EACF;EAAA;EAAA;IAAAX,aAAA,GAAAO,CAAA;EAAA;EAAAP,aAAA,GAAAE,CAAA;EACA,OAAOQ,QAAA;AACT;AAKO,MAAMP,kBAAA;AAAA;AAAA,CAAAH,aAAA,GAAAE,CAAA,QAAqB;EAChC;;;EAGAU,SAAA,EAAWR,aAAA;EAEX;;;EAGAC;AACF;AAKO,MAAMN,kBAAA;AAAA;AAAA,CAAAC,aAAA,GAAAE,CAAA,QAAqB;EAChC;;;EAGAU,SAAA,EAAWR,aAAA;EAEX;;;EAGAC;AACF","ignoreList":[]}