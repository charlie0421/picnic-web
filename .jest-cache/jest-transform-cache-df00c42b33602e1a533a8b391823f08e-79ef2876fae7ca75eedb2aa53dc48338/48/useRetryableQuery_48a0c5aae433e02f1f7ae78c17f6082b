816d932e25edd9141c2c54c2e3305ff9
/**
 * React Query와 재시도 로직을 통합한 커스텀 훅
 * 
 * 클라이언트 사이드에서 재시도 가능한 데이터 페칭을 위한 훅입니다.
 */'use client';
"use strict";

/* istanbul ignore next */
function cov_icjicewh1() {
  var path = "/Users/cheolhyun/Repositories/picnic-web/hooks/useRetryableQuery.ts";
  var hash = "debc458d033fba94b8c0e1be819338783a0cc298";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/cheolhyun/Repositories/picnic-web/hooks/useRetryableQuery.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 9,
          column: 3
        }
      },
      "1": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "2": {
        start: {
          line: 11,
          column: 24
        },
        end: {
          line: 14,
          column: 7
        }
      },
      "3": {
        start: {
          line: 16,
          column: 0
        },
        end: {
          line: 47,
          column: 3
        }
      },
      "4": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 18,
          column: 28
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "6": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "7": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 36
        }
      },
      "9": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 33
        }
      },
      "10": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "11": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 39,
          column: 32
        }
      },
      "12": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 31
        }
      },
      "13": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 28
        }
      },
      "14": {
        start: {
          line: 48,
          column: 15
        },
        end: {
          line: 48,
          column: 31
        }
      },
      "15": {
        start: {
          line: 49,
          column: 15
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "16": {
        start: {
          line: 50,
          column: 15
        },
        end: {
          line: 50,
          column: 40
        }
      },
      "17": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 42
        }
      },
      "18": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 57
        }
      },
      "19": {
        start: {
          line: 55,
          column: 38
        },
        end: {
          line: 55,
          column: 65
        }
      },
      "20": {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 56
        }
      },
      "21": {
        start: {
          line: 57,
          column: 28
        },
        end: {
          line: 57,
          column: 54
        }
      },
      "22": {
        start: {
          line: 58,
          column: 19
        },
        end: {
          line: 77,
          column: 6
        }
      },
      "23": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 27
        }
      },
      "24": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 23
        }
      },
      "25": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "26": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 42
        }
      },
      "27": {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 62
        }
      },
      "28": {
        start: {
          line: 64,
          column: 12
        },
        end: {
          line: 64,
          column: 28
        }
      },
      "29": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 51
        }
      },
      "30": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 26
        }
      },
      "31": {
        start: {
          line: 68,
          column: 26
        },
        end: {
          line: 68,
          column: 29
        }
      },
      "32": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 28
        }
      },
      "33": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 37
        }
      },
      "34": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 22
        }
      },
      "35": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 32
        }
      },
      "36": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 83,
          column: 6
        }
      },
      "37": {
        start: {
          line: 89,
          column: 10
        },
        end: {
          line: 89,
          column: 17
        }
      },
      "38": {
        start: {
          line: 90,
          column: 44
        },
        end: {
          line: 90,
          column: 80
        }
      },
      "39": {
        start: {
          line: 91,
          column: 28
        },
        end: {
          line: 91,
          column: 62
        }
      },
      "40": {
        start: {
          line: 92,
          column: 38
        },
        end: {
          line: 92,
          column: 65
        }
      },
      "41": {
        start: {
          line: 93,
          column: 30
        },
        end: {
          line: 93,
          column: 56
        }
      },
      "42": {
        start: {
          line: 94,
          column: 40
        },
        end: {
          line: 94,
          column: 63
        }
      },
      "43": {
        start: {
          line: 95,
          column: 31
        },
        end: {
          line: 95,
          column: 55
        }
      },
      "44": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 46
        }
      },
      "45": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 98,
          column: 51
        }
      },
      "46": {
        start: {
          line: 100,
          column: 25
        },
        end: {
          line: 190,
          column: 6
        }
      },
      "47": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "48": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 47
        }
      },
      "49": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 59
        }
      },
      "50": {
        start: {
          line: 107,
          column: 32
        },
        end: {
          line: 107,
          column: 46
        }
      },
      "51": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 46
        }
      },
      "52": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 27
        }
      },
      "53": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 23
        }
      },
      "54": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "55": {
        start: {
          line: 112,
          column: 27
        },
        end: {
          line: 134,
          column: 29
        }
      },
      "56": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 116,
          column: 17
        }
      },
      "57": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 73
        }
      },
      "58": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 39
        }
      },
      "59": {
        start: {
          line: 128,
          column: 20
        },
        end: {
          line: 128,
          column: 43
        }
      },
      "60": {
        start: {
          line: 129,
          column: 37
        },
        end: {
          line: 131,
          column: 22
        }
      },
      "61": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 49
        }
      },
      "62": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "63": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 37
        }
      },
      "64": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 33
        }
      },
      "65": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 41
        }
      },
      "66": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 35
        }
      },
      "67": {
        start: {
          line: 140,
          column: 19
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "68": {
        start: {
          line: 141,
          column: 33
        },
        end: {
          line: 143,
          column: 130
        }
      },
      "69": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 35
        }
      },
      "70": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 52
        }
      },
      "71": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 151,
          column: 19
        }
      },
      "72": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "73": {
        start: {
          line: 154,
          column: 20
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "74": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 36
        }
      },
      "75": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 28
        }
      },
      "76": {
        start: {
          line: 161,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "77": {
        start: {
          line: 162,
          column: 33
        },
        end: {
          line: 164,
          column: 18
        }
      },
      "78": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 35
        }
      },
      "79": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "80": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 65
        }
      },
      "81": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 36
        }
      },
      "82": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 28
        }
      },
      "83": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "84": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 36
        }
      },
      "85": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 178,
          column: 20
        }
      },
      "86": {
        start: {
          line: 192,
          column: 18
        },
        end: {
          line: 199,
          column: 6
        }
      },
      "87": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 195,
          column: 9
        }
      },
      "88": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 27
        }
      },
      "89": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "90": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 204,
          column: 9
        }
      },
      "91": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 203,
          column: 27
        }
      },
      "92": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 210,
          column: 10
        }
      },
      "93": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "94": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 51
        }
      },
      "95": {
        start: {
          line: 216,
          column: 21
        },
        end: {
          line: 216,
          column: 82
        }
      },
      "96": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 225,
          column: 6
        }
      },
      "97": {
        start: {
          line: 228,
          column: 63
        },
        end: {
          line: 228,
          column: 70
        }
      },
      "98": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 243,
          column: 7
        }
      },
      "99": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 235,
          column: 43
        }
      },
      "100": {
        start: {
          line: 231,
          column: 75
        },
        end: {
          line: 231,
          column: 96
        }
      },
      "101": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "102": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 237,
          column: 35
        }
      },
      "103": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 35
        }
      },
      "104": {
        start: {
          line: 246,
          column: 46
        },
        end: {
          line: 246,
          column: 53
        }
      },
      "105": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "106": {
        start: {
          line: 248,
          column: 25
        },
        end: {
          line: 248,
          column: 55
        }
      },
      "107": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "108": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 218
        }
      },
      "109": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 31
        }
      },
      "110": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 283,
          column: 7
        }
      },
      "111": {
        start: {
          line: 261,
          column: 32
        },
        end: {
          line: 261,
          column: 47
        }
      },
      "112": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "113": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 266,
          column: 15
        }
      },
      "114": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 15
        }
      },
      "115": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 20
        }
      },
      "116": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 303,
          column: 7
        }
      },
      "117": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 319,
          column: 7
        }
      },
      "118": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 332,
          column: 7
        }
      },
      "119": {
        start: {
          line: 335,
          column: 56
        },
        end: {
          line: 335,
          column: 63
        }
      },
      "120": {
        start: {
          line: 336,
          column: 38
        },
        end: {
          line: 336,
          column: 65
        }
      },
      "121": {
        start: {
          line: 337,
          column: 19
        },
        end: {
          line: 341,
          column: 6
        }
      },
      "122": {
        start: {
          line: 343,
          column: 4
        },
        end: {
          line: 354,
          column: 7
        }
      },
      "123": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 47
        }
      },
      "124": {
        start: {
          line: 344,
          column: 40
        },
        end: {
          line: 344,
          column: 47
        }
      },
      "125": {
        start: {
          line: 345,
          column: 25
        },
        end: {
          line: 347,
          column: 27
        }
      },
      "126": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 346,
          column: 29
        }
      },
      "127": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 348,
          column: 43
        }
      },
      "128": {
        start: {
          line: 348,
          column: 19
        },
        end: {
          line: 348,
          column: 42
        }
      },
      "129": {
        start: {
          line: 355,
          column: 4
        },
        end: {
          line: 360,
          column: 6
        }
      },
      "130": {
        start: {
          line: 357,
          column: 26
        },
        end: {
          line: 357,
          column: 44
        }
      },
      "131": {
        start: {
          line: 358,
          column: 25
        },
        end: {
          line: 358,
          column: 44
        }
      },
      "132": {
        start: {
          line: 363,
          column: 4
        },
        end: {
          line: 379,
          column: 7
        }
      },
      "133": {
        start: {
          line: 382,
          column: 55
        },
        end: {
          line: 382,
          column: 62
        }
      },
      "134": {
        start: {
          line: 383,
          column: 18
        },
        end: {
          line: 394,
          column: 6
        }
      },
      "135": {
        start: {
          line: 387,
          column: 12
        },
        end: {
          line: 390,
          column: 15
        }
      },
      "136": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 29
        }
      },
      "137": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 403,
          column: 5
        }
      },
      "138": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 402,
          column: 10
        }
      },
      "139": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 404,
          column: 17
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 10,
            column: 9
          },
          end: {
            line: 10,
            column: 16
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 17,
            column: 18
          },
          end: {
            line: 17,
            column: 19
          }
        },
        loc: {
          start: {
            line: 17,
            column: 29
          },
          end: {
            line: 19,
            column: 5
          }
        },
        line: 17
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 20,
            column: 24
          },
          end: {
            line: 20,
            column: 25
          }
        },
        loc: {
          start: {
            line: 20,
            column: 35
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 20
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 23,
            column: 21
          },
          end: {
            line: 23,
            column: 22
          }
        },
        loc: {
          start: {
            line: 23,
            column: 32
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 23
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 26,
            column: 22
          },
          end: {
            line: 26,
            column: 23
          }
        },
        loc: {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 29,
            column: 26
          },
          end: {
            line: 29,
            column: 27
          }
        },
        loc: {
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 31,
            column: 5
          }
        },
        line: 29
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 32,
            column: 23
          },
          end: {
            line: 32,
            column: 24
          }
        },
        loc: {
          start: {
            line: 32,
            column: 34
          },
          end: {
            line: 34,
            column: 5
          }
        },
        line: 32
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 35,
            column: 27
          },
          end: {
            line: 35,
            column: 28
          }
        },
        loc: {
          start: {
            line: 35,
            column: 38
          },
          end: {
            line: 37,
            column: 5
          }
        },
        line: 35
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 38,
            column: 22
          },
          end: {
            line: 38,
            column: 23
          }
        },
        loc: {
          start: {
            line: 38,
            column: 33
          },
          end: {
            line: 40,
            column: 5
          }
        },
        line: 38
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 41,
            column: 21
          },
          end: {
            line: 41,
            column: 22
          }
        },
        loc: {
          start: {
            line: 41,
            column: 32
          },
          end: {
            line: 43,
            column: 5
          }
        },
        line: 41
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 44,
            column: 18
          },
          end: {
            line: 44,
            column: 19
          }
        },
        loc: {
          start: {
            line: 44,
            column: 29
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 44
      },
      "11": {
        name: "useMutation",
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 20
          }
        },
        loc: {
          start: {
            line: 54,
            column: 30
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 54
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 58,
            column: 43
          },
          end: {
            line: 58,
            column: 44
          }
        },
        loc: {
          start: {
            line: 58,
            column: 62
          },
          end: {
            line: 75,
            column: 5
          }
        },
        line: 58
      },
      "13": {
        name: "useRetryableQuery",
        decl: {
          start: {
            line: 85,
            column: 9
          },
          end: {
            line: 85,
            column: 26
          }
        },
        loc: {
          start: {
            line: 85,
            column: 60
          },
          end: {
            line: 226,
            column: 1
          }
        },
        line: 85
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 100,
            column: 49
          },
          end: {
            line: 100,
            column: 50
          }
        },
        loc: {
          start: {
            line: 100,
            column: 59
          },
          end: {
            line: 179,
            column: 5
          }
        },
        line: 100
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 112,
            column: 71
          },
          end: {
            line: 112,
            column: 72
          }
        },
        loc: {
          start: {
            line: 112,
            column: 81
          },
          end: {
            line: 118,
            column: 13
          }
        },
        line: 112
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 127,
            column: 25
          },
          end: {
            line: 127,
            column: 26
          }
        },
        loc: {
          start: {
            line: 127,
            column: 43
          },
          end: {
            line: 133,
            column: 17
          }
        },
        line: 127
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 192,
            column: 42
          },
          end: {
            line: 192,
            column: 43
          }
        },
        loc: {
          start: {
            line: 192,
            column: 46
          },
          end: {
            line: 196,
            column: 5
          }
        },
        line: 192
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 201,
            column: 26
          },
          end: {
            line: 201,
            column: 27
          }
        },
        loc: {
          start: {
            line: 201,
            column: 30
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 201
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 205,
            column: 15
          },
          end: {
            line: 205,
            column: 16
          }
        },
        loc: {
          start: {
            line: 205,
            column: 19
          },
          end: {
            line: 210,
            column: 9
          }
        },
        line: 205
      },
      "20": {
        name: "useRetryableMutation",
        decl: {
          start: {
            line: 227,
            column: 9
          },
          end: {
            line: 227,
            column: 29
          }
        },
        loc: {
          start: {
            line: 227,
            column: 56
          },
          end: {
            line: 244,
            column: 1
          }
        },
        line: 227
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 230,
            column: 20
          },
          end: {
            line: 230,
            column: 21
          }
        },
        loc: {
          start: {
            line: 230,
            column: 39
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 230
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 231,
            column: 71
          },
          end: {
            line: 231,
            column: 72
          }
        },
        loc: {
          start: {
            line: 231,
            column: 75
          },
          end: {
            line: 231,
            column: 96
          }
        },
        line: 231
      },
      "23": {
        name: "useNetworkQuery",
        decl: {
          start: {
            line: 245,
            column: 9
          },
          end: {
            line: 245,
            column: 24
          }
        },
        loc: {
          start: {
            line: 245,
            column: 54
          },
          end: {
            line: 258,
            column: 1
          }
        },
        line: 245
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 247,
            column: 39
          },
          end: {
            line: 247,
            column: 40
          }
        },
        loc: {
          start: {
            line: 247,
            column: 49
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 247
      },
      "25": {
        name: "useSupabaseQuery",
        decl: {
          start: {
            line: 259,
            column: 9
          },
          end: {
            line: 259,
            column: 25
          }
        },
        loc: {
          start: {
            line: 259,
            column: 59
          },
          end: {
            line: 284,
            column: 1
          }
        },
        line: 259
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 260,
            column: 39
          },
          end: {
            line: 260,
            column: 40
          }
        },
        loc: {
          start: {
            line: 260,
            column: 49
          },
          end: {
            line: 272,
            column: 5
          }
        },
        line: 260
      },
      "27": {
        name: "useVoteQuery",
        decl: {
          start: {
            line: 285,
            column: 9
          },
          end: {
            line: 285,
            column: 21
          }
        },
        loc: {
          start: {
            line: 285,
            column: 55
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 285
      },
      "28": {
        name: "useVoteMutation",
        decl: {
          start: {
            line: 305,
            column: 9
          },
          end: {
            line: 305,
            column: 24
          }
        },
        loc: {
          start: {
            line: 305,
            column: 51
          },
          end: {
            line: 320,
            column: 1
          }
        },
        line: 305
      },
      "29": {
        name: "useAuthQuery",
        decl: {
          start: {
            line: 321,
            column: 9
          },
          end: {
            line: 321,
            column: 21
          }
        },
        loc: {
          start: {
            line: 321,
            column: 55
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 321
      },
      "30": {
        name: "useRealtimeQuery",
        decl: {
          start: {
            line: 334,
            column: 9
          },
          end: {
            line: 334,
            column: 25
          }
        },
        loc: {
          start: {
            line: 334,
            column: 59
          },
          end: {
            line: 361,
            column: 1
          }
        },
        line: 334
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 343,
            column: 26
          },
          end: {
            line: 343,
            column: 27
          }
        },
        loc: {
          start: {
            line: 343,
            column: 30
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 343
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 345,
            column: 37
          },
          end: {
            line: 345,
            column: 38
          }
        },
        loc: {
          start: {
            line: 345,
            column: 41
          },
          end: {
            line: 347,
            column: 9
          }
        },
        line: 345
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 348,
            column: 15
          },
          end: {
            line: 348,
            column: 16
          }
        },
        loc: {
          start: {
            line: 348,
            column: 19
          },
          end: {
            line: 348,
            column: 42
          }
        },
        line: 348
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 357,
            column: 22
          },
          end: {
            line: 357,
            column: 23
          }
        },
        loc: {
          start: {
            line: 357,
            column: 26
          },
          end: {
            line: 357,
            column: 44
          }
        },
        line: 357
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 358,
            column: 21
          },
          end: {
            line: 358,
            column: 22
          }
        },
        loc: {
          start: {
            line: 358,
            column: 25
          },
          end: {
            line: 358,
            column: 44
          }
        },
        line: 358
      },
      "36": {
        name: "useFileUploadQuery",
        decl: {
          start: {
            line: 362,
            column: 9
          },
          end: {
            line: 362,
            column: 27
          }
        },
        loc: {
          start: {
            line: 362,
            column: 62
          },
          end: {
            line: 380,
            column: 1
          }
        },
        line: 362
      },
      "37": {
        name: "useSafeRetryableQuery",
        decl: {
          start: {
            line: 381,
            column: 9
          },
          end: {
            line: 381,
            column: 30
          }
        },
        loc: {
          start: {
            line: 381,
            column: 64
          },
          end: {
            line: 405,
            column: 1
          }
        },
        line: 381
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 385,
            column: 17
          },
          end: {
            line: 385,
            column: 18
          }
        },
        loc: {
          start: {
            line: 385,
            column: 26
          },
          end: {
            line: 393,
            column: 9
          }
        },
        line: 385
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 58
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 85,
            column: 56
          },
          end: {
            line: 85,
            column: 58
          }
        }],
        line: 85
      },
      "1": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 26
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 86,
            column: 26
          }
        }],
        line: 86
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 28
          },
          end: {
            line: 86,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 43
          },
          end: {
            line: 86,
            column: 47
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 86,
            column: 49
          },
          end: {
            line: 86,
            column: 65
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 63
          },
          end: {
            line: 86,
            column: 65
          }
        }],
        line: 86
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 96
          },
          end: {
            line: 86,
            column: 119
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 112
          },
          end: {
            line: 86,
            column: 119
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 86,
            column: 121
          },
          end: {
            line: 86,
            column: 146
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 141
          },
          end: {
            line: 86,
            column: 146
          }
        }],
        line: 86
      },
      "6": {
        loc: {
          start: {
            line: 86,
            column: 148
          },
          end: {
            line: 89,
            column: 5
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 86,
            column: 169
          },
          end: {
            line: 89,
            column: 5
          }
        }],
        line: 86
      },
      "7": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "8": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 116,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "9": {
        loc: {
          start: {
            line: 129,
            column: 37
          },
          end: {
            line: 131,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 129,
            column: 72
          },
          end: {
            line: 129,
            column: 77
          }
        }, {
          start: {
            line: 129,
            column: 80
          },
          end: {
            line: 131,
            column: 22
          }
        }],
        line: 129
      },
      "10": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 159,
            column: 13
          }
        }],
        line: 135
      },
      "11": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 135,
            column: 30
          }
        }, {
          start: {
            line: 135,
            column: 34
          },
          end: {
            line: 135,
            column: 73
          }
        }],
        line: 135
      },
      "12": {
        loc: {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 159,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 159,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "13": {
        loc: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 38
          }
        }, {
          start: {
            line: 140,
            column: 42
          },
          end: {
            line: 140,
            column: 81
          }
        }],
        line: 140
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 33
          },
          end: {
            line: 143,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 75
          },
          end: {
            line: 141,
            column: 87
          }
        }, {
          start: {
            line: 141,
            column: 90
          },
          end: {
            line: 143,
            column: 130
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 141,
            column: 90
          },
          end: {
            line: 143,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 141,
            column: 105
          },
          end: {
            line: 143,
            column: 18
          }
        }, {
          start: {
            line: 143,
            column: 21
          },
          end: {
            line: 143,
            column: 130
          }
        }],
        line: 141
      },
      "16": {
        loc: {
          start: {
            line: 145,
            column: 30
          },
          end: {
            line: 145,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 30
          },
          end: {
            line: 145,
            column: 45
          }
        }, {
          start: {
            line: 145,
            column: 49
          },
          end: {
            line: 145,
            column: 50
          }
        }],
        line: 145
      },
      "17": {
        loc: {
          start: {
            line: 149,
            column: 32
          },
          end: {
            line: 149,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 32
          },
          end: {
            line: 149,
            column: 47
          }
        }, {
          start: {
            line: 149,
            column: 51
          },
          end: {
            line: 149,
            column: 52
          }
        }],
        line: 149
      },
      "18": {
        loc: {
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 155,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 16
          },
          end: {
            line: 155,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "19": {
        loc: {
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 161,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 161
      },
      "20": {
        loc: {
          start: {
            line: 162,
            column: 33
          },
          end: {
            line: 164,
            column: 18
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 66
          },
          end: {
            line: 162,
            column: 69
          }
        }, {
          start: {
            line: 162,
            column: 72
          },
          end: {
            line: 164,
            column: 18
          }
        }],
        line: 162
      },
      "21": {
        loc: {
          start: {
            line: 162,
            column: 92
          },
          end: {
            line: 162,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 115
          },
          end: {
            line: 162,
            column: 126
          }
        }, {
          start: {
            line: 162,
            column: 129
          },
          end: {
            line: 162,
            column: 140
          }
        }],
        line: 162
      },
      "22": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "23": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "24": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 195,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "25": {
        loc: {
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 8
          },
          end: {
            line: 204,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "26": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "27": {
        loc: {
          start: {
            line: 216,
            column: 21
          },
          end: {
            line: 216,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 21
          },
          end: {
            line: 216,
            column: 35
          }
        }, {
          start: {
            line: 216,
            column: 39
          },
          end: {
            line: 216,
            column: 82
          }
        }],
        line: 216
      },
      "28": {
        loc: {
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 216,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 53
          },
          end: {
            line: 216,
            column: 76
          }
        }, {
          start: {
            line: 216,
            column: 80
          },
          end: {
            line: 216,
            column: 81
          }
        }],
        line: 216
      },
      "29": {
        loc: {
          start: {
            line: 227,
            column: 42
          },
          end: {
            line: 227,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 227,
            column: 52
          },
          end: {
            line: 227,
            column: 54
          }
        }],
        line: 227
      },
      "30": {
        loc: {
          start: {
            line: 235,
            column: 15
          },
          end: {
            line: 235,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 15
          },
          end: {
            line: 235,
            column: 28
          }
        }, {
          start: {
            line: 235,
            column: 32
          },
          end: {
            line: 235,
            column: 42
          }
        }],
        line: 235
      },
      "31": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 240,
            column: 13
          }
        }, {
          start: {
            line: 238,
            column: 19
          },
          end: {
            line: 240,
            column: 13
          }
        }],
        line: 236
      },
      "32": {
        loc: {
          start: {
            line: 245,
            column: 40
          },
          end: {
            line: 245,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 245,
            column: 50
          },
          end: {
            line: 245,
            column: 52
          }
        }],
        line: 245
      },
      "33": {
        loc: {
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "34": {
        loc: {
          start: {
            line: 250,
            column: 119
          },
          end: {
            line: 250,
            column: 199
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 144
          },
          end: {
            line: 250,
            column: 169
          }
        }, {
          start: {
            line: 250,
            column: 172
          },
          end: {
            line: 250,
            column: 199
          }
        }],
        line: 250
      },
      "35": {
        loc: {
          start: {
            line: 256,
            column: 27
          },
          end: {
            line: 256,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 27
          },
          end: {
            line: 256,
            column: 57
          }
        }, {
          start: {
            line: 256,
            column: 61
          },
          end: {
            line: 256,
            column: 65
          }
        }],
        line: 256
      },
      "36": {
        loc: {
          start: {
            line: 259,
            column: 45
          },
          end: {
            line: 259,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 259,
            column: 55
          },
          end: {
            line: 259,
            column: 57
          }
        }],
        line: 259
      },
      "37": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "38": {
        loc: {
          start: {
            line: 267,
            column: 38
          },
          end: {
            line: 267,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 38
          },
          end: {
            line: 267,
            column: 51
          }
        }, {
          start: {
            line: 267,
            column: 55
          },
          end: {
            line: 267,
            column: 77
          }
        }],
        line: 267
      },
      "39": {
        loc: {
          start: {
            line: 282,
            column: 27
          },
          end: {
            line: 282,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 27
          },
          end: {
            line: 282,
            column: 52
          }
        }, {
          start: {
            line: 282,
            column: 56
          },
          end: {
            line: 282,
            column: 60
          }
        }],
        line: 282
      },
      "40": {
        loc: {
          start: {
            line: 285,
            column: 41
          },
          end: {
            line: 285,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 285,
            column: 51
          },
          end: {
            line: 285,
            column: 53
          }
        }],
        line: 285
      },
      "41": {
        loc: {
          start: {
            line: 305,
            column: 37
          },
          end: {
            line: 305,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 305,
            column: 47
          },
          end: {
            line: 305,
            column: 49
          }
        }],
        line: 305
      },
      "42": {
        loc: {
          start: {
            line: 321,
            column: 41
          },
          end: {
            line: 321,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 321,
            column: 51
          },
          end: {
            line: 321,
            column: 53
          }
        }],
        line: 321
      },
      "43": {
        loc: {
          start: {
            line: 331,
            column: 27
          },
          end: {
            line: 331,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 27
          },
          end: {
            line: 331,
            column: 52
          }
        }, {
          start: {
            line: 331,
            column: 56
          },
          end: {
            line: 331,
            column: 61
          }
        }],
        line: 331
      },
      "44": {
        loc: {
          start: {
            line: 334,
            column: 45
          },
          end: {
            line: 334,
            column: 57
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 334,
            column: 55
          },
          end: {
            line: 334,
            column: 57
          }
        }],
        line: 334
      },
      "45": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 34
          }
        }],
        line: 335
      },
      "46": {
        loc: {
          start: {
            line: 340,
            column: 27
          },
          end: {
            line: 340,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 27
          },
          end: {
            line: 340,
            column: 57
          }
        }, {
          start: {
            line: 340,
            column: 61
          },
          end: {
            line: 340,
            column: 66
          }
        }],
        line: 340
      },
      "47": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 344,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 344,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "48": {
        loc: {
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 344,
            column: 22
          }
        }, {
          start: {
            line: 344,
            column: 26
          },
          end: {
            line: 344,
            column: 38
          }
        }],
        line: 344
      },
      "49": {
        loc: {
          start: {
            line: 362,
            column: 48
          },
          end: {
            line: 362,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 362,
            column: 58
          },
          end: {
            line: 362,
            column: 60
          }
        }],
        line: 362
      },
      "50": {
        loc: {
          start: {
            line: 373,
            column: 27
          },
          end: {
            line: 373,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 373,
            column: 27
          },
          end: {
            line: 373,
            column: 52
          }
        }, {
          start: {
            line: 373,
            column: 56
          },
          end: {
            line: 373,
            column: 60
          }
        }],
        line: 373
      },
      "51": {
        loc: {
          start: {
            line: 381,
            column: 50
          },
          end: {
            line: 381,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 381,
            column: 60
          },
          end: {
            line: 381,
            column: 62
          }
        }],
        line: 381
      },
      "52": {
        loc: {
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "53": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 396,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 396,
            column: 19
          }
        }, {
          start: {
            line: 396,
            column: 23
          },
          end: {
            line: 396,
            column: 49
          }
        }],
        line: 396
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0],
      "3": [0],
      "4": [0],
      "5": [0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0],
      "41": [0],
      "42": [0],
      "43": [0, 0],
      "44": [0],
      "45": [0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0],
      "50": [0, 0],
      "51": [0],
      "52": [0, 0],
      "53": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/Users/cheolhyun/Repositories/picnic-web/hooks/useRetryableQuery.ts"],
      sourcesContent: ["/**\n * React Query\uC640 \uC7AC\uC2DC\uB3C4 \uB85C\uC9C1\uC744 \uD1B5\uD569\uD55C \uCEE4\uC2A4\uD140 \uD6C5\n * \n * \uD074\uB77C\uC774\uC5B8\uD2B8 \uC0AC\uC774\uB4DC\uC5D0\uC11C \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uB370\uC774\uD130 \uD398\uCE6D\uC744 \uC704\uD55C \uD6C5\uC785\uB2C8\uB2E4.\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n// React Query \uD0C0\uC785 \uC815\uC758 (\uC790\uCCB4 \uAD6C\uD604)\ninterface UseQueryOptions<T> {\n  enabled?: boolean;\n  onError?: (error: Error) => void;\n  onSuccess?: (data: T) => void;\n}\n\ninterface UseMutationOptions<T, TError, TVariables> {\n  onError?: (error: TError) => void;\n  onSuccess?: (data: T, variables: TVariables) => void;\n  onMutate?: (variables: TVariables) => void;\n  mutationFn: (variables: TVariables) => Promise<T>;\n}\n\n// \uAC04\uB2E8\uD55C useMutation \uAD6C\uD604\nfunction useMutation<T, TError = Error, TVariables = void>(options: UseMutationOptions<T, TError, TVariables>) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<TError | null>(null);\n  const [data, setData] = useState<T | null>(null);\n\n  const mutate = useCallback(async (variables: TVariables) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      options.onMutate?.(variables);\n      const result = await options.mutationFn(variables);\n      setData(result);\n      options.onSuccess?.(result, variables);\n      return result;\n    } catch (err) {\n      const error = err as TError;\n      setError(error);\n      options.onError?.(error);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [options]);\n\n  return {\n    mutate,\n    isLoading,\n    error,\n    data,\n  };\n}\nimport { \n  ExtendedRetryUtility, \n  withNetworkRetry, \n  withExternalApiRetry,\n  ExtendedRetryConfig,\n  NETWORK_RETRY_CONFIG,\n  createRetryCondition \n} from '@/utils/retry';\nimport { AppError, ErrorCategory, ErrorSeverity } from '@/utils/error';\nimport { logger } from '@/utils/logger';\nimport { useErrorHandler } from '@/contexts/ErrorContext';\n\n/**\n * \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uCFFC\uB9AC \uC635\uC158\n */\nexport interface RetryableQueryOptions<T> {\n  enabled?: boolean;\n  fallbackData?: T | null;\n  retryConfig?: Partial<ExtendedRetryConfig>;\n  onError?: (error: AppError) => void;\n  onRetry?: (attempt: number, error: AppError) => void;\n  onSuccess?: (data: T) => void;\n  operationName?: string;\n  propagateToGlobal?: boolean; // \uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC0C1\uD0DC\uB85C \uC804\uD30C\uD560\uC9C0 \uC5EC\uBD80\n  globalErrorOptions?: { autoHide?: boolean; duration?: number }; // \uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC635\uC158\n}\n\n/**\n * \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uBBA4\uD14C\uC774\uC158 \uC635\uC158\n */\nexport interface RetryableMutationOptions<T, V> extends Omit<UseMutationOptions<T, Error, V>, 'mutationFn'> {\n  retryConfig?: Partial<ExtendedRetryConfig>;\n  operationName?: string;\n}\n\n/**\n * \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uCFFC\uB9AC \uACB0\uACFC\n */\nexport interface RetryableQueryResult<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: AppError | null;\n  retryCount: number;\n  canRetry: boolean;\n  refetch: () => Promise<T | null>;\n  retry: () => void;\n}\n\n/**\n * \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uCFFC\uB9AC \uD6C5 (\uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC2DC\uC2A4\uD15C \uD1B5\uD569)\n * \n * \uBE44\uB3D9\uAE30 \uC791\uC5C5\uC744 \uC2E4\uD589\uD558\uACE0 \uC2E4\uD328 \uC2DC \uC790\uB3D9\uC73C\uB85C \uC7AC\uC2DC\uB3C4\uD569\uB2C8\uB2E4.\n * \uC5D0\uB7EC\uB97C \uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC0C1\uD0DC\uB85C \uC804\uD30C\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.\n */\nexport function useRetryableQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n): RetryableQueryResult<T> {\n  const {\n    enabled = true,\n    fallbackData = null,\n    retryConfig = {},\n    onError,\n    onRetry,\n    onSuccess,\n    operationName = 'query',\n    propagateToGlobal = false,\n    globalErrorOptions = { autoHide: true, duration: 5000 }\n  } = options;\n\n  const { handleError: addGlobalError } = useErrorHandler();\n\n  const [data, setData] = useState<T | null>(fallbackData);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<AppError | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const queryKeyRef = useRef<string>('');\n\n  // \uCFFC\uB9AC \uD0A4 \uBB38\uC790\uC5F4\uD654\n  const queryKeyString = JSON.stringify(queryKey);\n\n  // \uCFFC\uB9AC \uC2E4\uD589 \uD568\uC218\n  const executeQuery = useCallback(async (): Promise<T | null> => {\n    // \uC774\uC804 \uC694\uCCAD \uCDE8\uC18C\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    // \uC0C8 AbortController \uC0DD\uC131\n    abortControllerRef.current = new AbortController();\n    const currentQueryKey = queryKeyString;\n    queryKeyRef.current = currentQueryKey;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const result = await ExtendedRetryUtility.withRetry(\n        async () => {\n          // \uCFFC\uB9AC \uD0A4\uAC00 \uBCC0\uACBD\uB418\uC5C8\uC73C\uBA74 \uC911\uB2E8\n          if (queryKeyRef.current !== currentQueryKey) {\n            throw new Error('Query cancelled due to key change');\n          }\n\n          return await queryFn();\n        },\n        {\n          maxAttempts: 3,\n          baseDelay: 1000,\n          retryableCategories: [\n            ErrorCategory.NETWORK,\n            ErrorCategory.SERVER,\n            ErrorCategory.EXTERNAL_SERVICE,\n          ],\n          ...retryConfig,\n          onRetry: (error, attempt) => {\n            setRetryCount(attempt);\n            const appError = error instanceof AppError ? error : new AppError(\n              error.message,\n              ErrorCategory.UNKNOWN,\n              ErrorSeverity.MEDIUM,\n              500,\n              { originalError: error }\n            );\n            onRetry?.(attempt, appError);\n          },\n        },\n        operationName\n      );\n\n      if (result.success && queryKeyRef.current === currentQueryKey) {\n        setData(result.data!);\n        setRetryCount(0);\n        onSuccess?.(result.data!);\n        return result.data!;\n      } else if (!result.success && queryKeyRef.current === currentQueryKey) {\n        const appError = result.error instanceof AppError \n          ? result.error \n          : result.error \n            ? new AppError(\n                result.error.message,\n                ErrorCategory.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                500,\n                { originalError: result.error }\n              )\n            : new AppError(\n                'Unknown error occurred',\n                ErrorCategory.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                500\n              );\n        setError(appError);\n        setRetryCount(result.attempts || 0);\n\n        // \uC5D0\uB7EC \uB85C\uAE45\n        await logger.error(`Query failed: ${operationName}`, appError, {\n          queryKey: queryKeyString,\n          retryCount: result.attempts || 0,\n          operationName,\n        });\n\n        // \uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC0C1\uD0DC\uB85C \uC804\uD30C\n        if (propagateToGlobal) {\n          addGlobalError(appError, globalErrorOptions);\n        }\n\n        // \uC0AC\uC6A9\uC790 \uC815\uC758 \uC5D0\uB7EC \uD578\uB4E4\uB7EC \uD638\uCD9C\n        onError?.(appError);\n\n        return null;\n      }\n    } catch (err) {\n      if (queryKeyRef.current === currentQueryKey) {\n        const appError = err instanceof AppError \n          ? err \n          : new AppError(\n              err instanceof Error ? err.message : String(err),\n              ErrorCategory.UNKNOWN,\n              ErrorSeverity.MEDIUM,\n              500,\n              { originalError: err }\n            );\n\n        setError(appError);\n\n        // \uAE00\uB85C\uBC8C \uC5D0\uB7EC \uC0C1\uD0DC\uB85C \uC804\uD30C\n        if (propagateToGlobal) {\n          addGlobalError(appError, globalErrorOptions);\n        }\n\n        onError?.(appError);\n        return null;\n      }\n    } finally {\n      if (queryKeyRef.current === currentQueryKey) {\n        setIsLoading(false);\n      }\n    }\n\n    return null;\n  }, [queryKeyString, queryFn, operationName, retryConfig, onError, onRetry, onSuccess, propagateToGlobal, globalErrorOptions, addGlobalError]);\n\n  // \uC218\uB3D9 \uC7AC\uC2DC\uB3C4 \uD568\uC218\n  const retry = useCallback(() => {\n    if (error) {\n      executeQuery();\n    }\n  }, [error, executeQuery]);\n\n  // \uCFFC\uB9AC \uD0A4 \uBCC0\uACBD \uC2DC \uC790\uB3D9 \uC2E4\uD589\n  useEffect(() => {\n    if (enabled) {\n      executeQuery();\n    }\n\n    return () => {\n      // \uCEF4\uD3EC\uB10C\uD2B8 \uC5B8\uB9C8\uC6B4\uD2B8 \uC2DC \uC694\uCCAD \uCDE8\uC18C\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [enabled, executeQuery]);\n\n  // \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5 \uC5EC\uBD80 \uACC4\uC0B0\n  const canRetry = error !== null && retryCount < (retryConfig.maxAttempts || 3);\n\n  return {\n    data,\n    isLoading,\n    error,\n    retryCount,\n    canRetry,\n    refetch: executeQuery,\n    retry,\n  };\n}\n\n/**\n * \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uBBA4\uD14C\uC774\uC158 \uD6C5\n */\nexport function useRetryableMutation<T, V = void>(\n  mutationFn: (variables: V) => Promise<T>,\n  options: RetryableMutationOptions<T, V> = {}\n) {\n  const { retryConfig, operationName, ...mutationOptions } = options;\n\n  return useMutation({\n    mutationFn: async (variables: V) => {\n      const result = await ExtendedRetryUtility.withRetry(\n        () => mutationFn(variables),\n        { \n          ...NETWORK_RETRY_CONFIG, \n          maxAttempts: 2, // \uBBA4\uD14C\uC774\uC158\uC740 \uC7AC\uC2DC\uB3C4 \uD69F\uC218 \uC81C\uD55C\n          ...retryConfig \n        },\n        operationName || 'mutation'\n      );\n\n      if (result.success) {\n        return result.data!;\n      } else {\n        throw result.error;\n      }\n    },\n    ...mutationOptions,\n  });\n}\n\n/**\n * \uB124\uD2B8\uC6CC\uD06C \uC694\uCCAD\uC6A9 \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uCFFC\uB9AC \uD6C5 (\uAE00\uB85C\uBC8C \uC5D0\uB7EC \uD1B5\uD569)\n */\nexport function useNetworkQuery<T>(\n  queryKey: any[],\n  url: string,\n  options: RetryableQueryOptions<T> & { fetchOptions?: RequestInit } = {}\n) {\n  const { fetchOptions, ...queryOptions } = options;\n\n  return useRetryableQuery(\n    queryKey,\n    async () => {\n      const response = await fetch(url, fetchOptions);\n      \n      if (!response.ok) {\n        throw new AppError(\n          `HTTP ${response.status}: ${response.statusText}`,\n          ErrorCategory.NETWORK,\n          response.status >= 500 ? ErrorSeverity.HIGH : ErrorSeverity.MEDIUM,\n          response.status\n        );\n      }\n      \n      return response.json();\n    },\n    {\n      ...queryOptions,\n      operationName: `network-${url}`,\n      propagateToGlobal: queryOptions.propagateToGlobal ?? true, // \uB124\uD2B8\uC6CC\uD06C \uC5D0\uB7EC\uB294 \uAE30\uBCF8\uC801\uC73C\uB85C \uAE00\uB85C\uBC8C\uB85C \uC804\uD30C\n    }\n  );\n}\n\n/**\n * Supabase \uCFFC\uB9AC\uC6A9 \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uD6C5 (\uAE00\uB85C\uBC8C \uC5D0\uB7EC \uD1B5\uD569)\n */\nexport function useSupabaseQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<{ data: T | null; error: any }>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    async () => {\n      const { data, error } = await queryFn();\n      \n      if (error) {\n        await logger.error('Supabase query error', error, {\n          operation: 'useSupabaseQuery',\n          queryKey: queryKey.join('-'),\n        });\n        \n        throw new AppError(\n          error.message || '\uB370\uC774\uD130 \uC870\uD68C \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.',\n          ErrorCategory.DATA_FETCHING,\n          ErrorSeverity.MEDIUM,\n          500,\n          { originalError: error }\n        );\n      }\n      \n      return data!;\n    },\n    {\n      retryConfig: {\n        retryableCategories: [\n          ErrorCategory.NETWORK,\n          ErrorCategory.SERVER,\n          ErrorCategory.DATA_FETCHING,\n        ],\n      },\n      ...options,\n      operationName: `supabase-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? true, // Supabase \uC5D0\uB7EC\uB3C4 \uAE30\uBCF8\uC801\uC73C\uB85C \uAE00\uB85C\uBC8C\uB85C \uC804\uD30C\n    }\n  );\n}\n\n/**\n * \uD22C\uD45C \uAD00\uB828 \uCFFC\uB9AC\uC6A9 \uD2B9\uD654\uB41C \uD6C5\n */\nexport function useVoteQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      retryConfig: {\n        maxAttempts: 3,\n        baseDelay: 1000,\n        retryCondition: createRetryCondition.or(\n          createRetryCondition.httpStatus([500, 502, 503, 504]),\n          createRetryCondition.errorMessage(['network', 'timeout', 'connection'])\n        ),\n      },\n\n      ...options,\n      operationName: `vote-${queryKey.join('-')}`,\n    }\n  );\n}\n\n/**\n * \uD22C\uD45C \uC81C\uCD9C\uC6A9 \uBBA4\uD14C\uC774\uC158 \uD6C5\n */\nexport function useVoteMutation<T, V = void>(\n  mutationFn: (variables: V) => Promise<T>,\n  options: RetryableMutationOptions<T, V> = {}\n) {\n  return useRetryableMutation(\n    mutationFn,\n    {\n      retryConfig: {\n        maxAttempts: 2, // \uD22C\uD45C\uB294 \uC911\uBCF5 \uBC29\uC9C0\uB97C \uC704\uD574 \uC7AC\uC2DC\uB3C4 \uC81C\uD55C\n        baseDelay: 1000,\n        retryCondition: createRetryCondition.and(\n          createRetryCondition.httpStatus([500, 502, 503, 504]),\n          createRetryCondition.maxAttempts(2)\n        ),\n      },\n      ...options,\n      operationName: 'vote-mutation',\n    }\n  );\n}\n\n/**\n * \uC778\uC99D \uAD00\uB828 \uCFFC\uB9AC\uC6A9 \uD2B9\uD654\uB41C \uD6C5\n */\nexport function useAuthQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      retryConfig: {\n        maxAttempts: 2, // \uC778\uC99D \uC5D0\uB7EC\uB294 \uC7AC\uC2DC\uB3C4 \uD69F\uC218 \uC81C\uD55C\n        retryableCategories: [ErrorCategory.NETWORK],\n      },\n      ...options,\n      operationName: `auth-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? false, // \uC778\uC99D \uC5D0\uB7EC\uB294 \uAE30\uBCF8\uC801\uC73C\uB85C \uAE00\uB85C\uBC8C\uB85C \uC804\uD30C\uD558\uC9C0 \uC54A\uC74C\n    }\n  );\n}\n\n/**\n * \uC2E4\uC2DC\uAC04 \uB370\uC774\uD130\uC6A9 \uCFFC\uB9AC \uD6C5\n */\nexport function useRealtimeQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> & { pollingInterval?: number } = {}\n) {\n  const { pollingInterval = 1000, ...queryOptions } = options;\n  const [isPolling, setIsPolling] = useState(false);\n\n  const result = useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      ...queryOptions,\n      operationName: `realtime-${queryKey.join('-')}`,\n      propagateToGlobal: queryOptions.propagateToGlobal ?? false, // \uC2E4\uC2DC\uAC04 \uC5D0\uB7EC\uB294 \uC870\uC6A9\uD788 \uCC98\uB9AC\n    }\n  );\n\n  // \uD3F4\uB9C1 \uB85C\uC9C1\n  useEffect(() => {\n    if (!isPolling || !result.data) return;\n\n    const interval = setInterval(() => {\n      result.refetch();\n    }, pollingInterval);\n\n    return () => clearInterval(interval);\n  }, [isPolling, result.data, result.refetch, pollingInterval]);\n\n  return {\n    ...result,\n    startPolling: () => setIsPolling(true),\n    stopPolling: () => setIsPolling(false),\n    isPolling,\n  };\n}\n\n/**\n * \uD30C\uC77C \uC5C5\uB85C\uB4DC\uC6A9 \uCFFC\uB9AC \uD6C5\n */\nexport function useFileUploadQuery<T>(\n  queryKey: any[],\n  uploadFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    uploadFn,\n    {\n      retryConfig: {\n        maxAttempts: 2,\n        baseDelay: 2000,\n        retryableCategories: [ErrorCategory.NETWORK],\n      },\n      ...options,\n      operationName: `upload-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? true,\n      globalErrorOptions: {\n        autoHide: false, // \uC5C5\uB85C\uB4DC \uC5D0\uB7EC\uB294 \uC218\uB3D9\uC73C\uB85C \uD574\uC81C\n        duration: undefined,\n        ...options.globalErrorOptions,\n      },\n    }\n  );\n}\n\n/**\n * \uC5D0\uB7EC \uBC14\uC6B4\uB354\uB9AC\uC640 \uD568\uAED8 \uC0AC\uC6A9\uD560 \uC218 \uC788\uB294 \uC7AC\uC2DC\uB3C4 \uAC00\uB2A5\uD55C \uCFFC\uB9AC \uD6C5\n */\nexport function useSafeRetryableQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> & { \n    fallbackData?: T;\n    onError?: (error: Error) => void;\n  } = {}\n) {\n  const { fallbackData, onError, ...queryOptions } = options;\n\n  const query = useRetryableQuery(queryKey, queryFn, {\n    ...queryOptions,\n    onError: (error) => {\n      // \uC5D0\uB7EC \uB85C\uAE45\n      logger.error('Query failed after retries', error as Error, {\n        queryKey: queryKey.join('-'),\n        operation: 'useSafeRetryableQuery',\n      });\n      \n      // \uCEE4\uC2A4\uD140 \uC5D0\uB7EC \uD578\uB4E4\uB7EC \uC2E4\uD589\n      onError?.(error as Error);\n    },\n  });\n\n  // \uC5D0\uB7EC \uBC1C\uC0DD \uC2DC fallback \uB370\uC774\uD130 \uBC18\uD658\n  if (query.error && fallbackData !== undefined) {\n    return {\n      ...query,\n      data: fallbackData,\n      isError: false,\n      error: null,\n    };\n  }\n\n  return query;\n} "],
      names: ["useAuthQuery", "useFileUploadQuery", "useNetworkQuery", "useRealtimeQuery", "useRetryableMutation", "useRetryableQuery", "useSafeRetryableQuery", "useSupabaseQuery", "useVoteMutation", "useVoteQuery", "useMutation", "options", "isLoading", "setIsLoading", "useState", "error", "setError", "data", "setData", "mutate", "useCallback", "variables", "onMutate", "result", "mutationFn", "onSuccess", "err", "onError", "queryKey", "queryFn", "enabled", "fallbackData", "retryConfig", "onRetry", "operationName", "propagateToGlobal", "globalErrorOptions", "autoHide", "duration", "handleError", "addGlobalError", "useErrorHandler", "retryCount", "setRetryCount", "abortControllerRef", "useRef", "queryKeyRef", "queryKeyString", "JSON", "stringify", "executeQuery", "current", "abort", "AbortController", "currentQueryKey", "ExtendedRetryUtility", "withRetry", "Error", "maxAttempts", "baseDelay", "retryableCategories", "ErrorCategory", "NETWORK", "SERVER", "EXTERNAL_SERVICE", "attempt", "appError", "AppError", "message", "UNKNOWN", "ErrorSeverity", "MEDIUM", "originalError", "success", "attempts", "logger", "String", "retry", "useEffect", "canRetry", "refetch", "mutationOptions", "NETWORK_RETRY_CONFIG", "url", "fetchOptions", "queryOptions", "response", "fetch", "ok", "status", "statusText", "HIGH", "json", "operation", "join", "DATA_FETCHING", "retryCondition", "createRetryCondition", "or", "httpStatus", "errorMessage", "and", "pollingInterval", "isPolling", "setIsPolling", "interval", "setInterval", "clearInterval", "startPolling", "stopPolling", "uploadFn", "undefined", "query", "isError"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "debc458d033fba94b8c0e1be819338783a0cc298"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_icjicewh1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_icjicewh1();
cov_icjicewh1().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_icjicewh1().f[0]++;
  cov_icjicewh1().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_icjicewh1().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_icjicewh1().s[3]++;
_export(exports, {
  useAuthQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[1]++;
    cov_icjicewh1().s[4]++;
    return useAuthQuery;
  },
  useFileUploadQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[2]++;
    cov_icjicewh1().s[5]++;
    return useFileUploadQuery;
  },
  useNetworkQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[3]++;
    cov_icjicewh1().s[6]++;
    return useNetworkQuery;
  },
  useRealtimeQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[4]++;
    cov_icjicewh1().s[7]++;
    return useRealtimeQuery;
  },
  useRetryableMutation: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[5]++;
    cov_icjicewh1().s[8]++;
    return useRetryableMutation;
  },
  useRetryableQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[6]++;
    cov_icjicewh1().s[9]++;
    return useRetryableQuery;
  },
  useSafeRetryableQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[7]++;
    cov_icjicewh1().s[10]++;
    return useSafeRetryableQuery;
  },
  useSupabaseQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[8]++;
    cov_icjicewh1().s[11]++;
    return useSupabaseQuery;
  },
  useVoteMutation: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[9]++;
    cov_icjicewh1().s[12]++;
    return useVoteMutation;
  },
  useVoteQuery: function () {
    /* istanbul ignore next */
    cov_icjicewh1().f[10]++;
    cov_icjicewh1().s[13]++;
    return useVoteQuery;
  }
});
const _react =
/* istanbul ignore next */
(cov_icjicewh1().s[14]++, require("react"));
const _retry =
/* istanbul ignore next */
(cov_icjicewh1().s[15]++, require("../utils/retry"));
const _error =
/* istanbul ignore next */
(cov_icjicewh1().s[16]++, require("../utils/error"));
const _logger =
/* istanbul ignore next */
(cov_icjicewh1().s[17]++, require("../utils/logger"));
const _ErrorContext =
/* istanbul ignore next */
(cov_icjicewh1().s[18]++, require("../contexts/ErrorContext"));
// 간단한 useMutation 구현
function useMutation(options) {
  /* istanbul ignore next */
  cov_icjicewh1().f[11]++;
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[19]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[20]++, (0, _react.useState)(null));
  const [data, setData] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[21]++, (0, _react.useState)(null));
  const mutate =
  /* istanbul ignore next */
  (cov_icjicewh1().s[22]++, (0, _react.useCallback)(async variables => {
    /* istanbul ignore next */
    cov_icjicewh1().f[12]++;
    cov_icjicewh1().s[23]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_icjicewh1().s[24]++;
    setError(null);
    /* istanbul ignore next */
    cov_icjicewh1().s[25]++;
    try {
      /* istanbul ignore next */
      cov_icjicewh1().s[26]++;
      options.onMutate?.(variables);
      const result =
      /* istanbul ignore next */
      (cov_icjicewh1().s[27]++, await options.mutationFn(variables));
      /* istanbul ignore next */
      cov_icjicewh1().s[28]++;
      setData(result);
      /* istanbul ignore next */
      cov_icjicewh1().s[29]++;
      options.onSuccess?.(result, variables);
      /* istanbul ignore next */
      cov_icjicewh1().s[30]++;
      return result;
    } catch (err) {
      const error =
      /* istanbul ignore next */
      (cov_icjicewh1().s[31]++, err);
      /* istanbul ignore next */
      cov_icjicewh1().s[32]++;
      setError(error);
      /* istanbul ignore next */
      cov_icjicewh1().s[33]++;
      options.onError?.(error);
      /* istanbul ignore next */
      cov_icjicewh1().s[34]++;
      throw err;
    } finally {
      /* istanbul ignore next */
      cov_icjicewh1().s[35]++;
      setIsLoading(false);
    }
  }, [options]));
  /* istanbul ignore next */
  cov_icjicewh1().s[36]++;
  return {
    mutate,
    isLoading,
    error,
    data
  };
}
function useRetryableQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[0][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[13]++;
  const {
    enabled =
    /* istanbul ignore next */
    (cov_icjicewh1().b[1][0]++, true),
    fallbackData =
    /* istanbul ignore next */
    (cov_icjicewh1().b[2][0]++, null),
    retryConfig =
    /* istanbul ignore next */
    (cov_icjicewh1().b[3][0]++, {}),
    onError,
    onRetry,
    onSuccess,
    operationName =
    /* istanbul ignore next */
    (cov_icjicewh1().b[4][0]++, 'query'),
    propagateToGlobal =
    /* istanbul ignore next */
    (cov_icjicewh1().b[5][0]++, false),
    globalErrorOptions =
    /* istanbul ignore next */
    (cov_icjicewh1().b[6][0]++, {
      autoHide: true,
      duration: 5000
    })
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[37]++, options);
  const {
    handleError: addGlobalError
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[38]++, (0, _ErrorContext.useErrorHandler)());
  const [data, setData] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[39]++, (0, _react.useState)(fallbackData));
  const [isLoading, setIsLoading] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[40]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[41]++, (0, _react.useState)(null));
  const [retryCount, setRetryCount] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[42]++, (0, _react.useState)(0));
  const abortControllerRef =
  /* istanbul ignore next */
  (cov_icjicewh1().s[43]++, (0, _react.useRef)(null));
  const queryKeyRef =
  /* istanbul ignore next */
  (cov_icjicewh1().s[44]++, (0, _react.useRef)(''));
  // 쿼리 키 문자열화
  const queryKeyString =
  /* istanbul ignore next */
  (cov_icjicewh1().s[45]++, JSON.stringify(queryKey));
  // 쿼리 실행 함수
  const executeQuery =
  /* istanbul ignore next */
  (cov_icjicewh1().s[46]++, (0, _react.useCallback)(async () => {
    /* istanbul ignore next */
    cov_icjicewh1().f[14]++;
    cov_icjicewh1().s[47]++;
    // 이전 요청 취소
    if (abortControllerRef.current) {
      /* istanbul ignore next */
      cov_icjicewh1().b[7][0]++;
      cov_icjicewh1().s[48]++;
      abortControllerRef.current.abort();
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[7][1]++;
    }
    // 새 AbortController 생성
    cov_icjicewh1().s[49]++;
    abortControllerRef.current = new AbortController();
    const currentQueryKey =
    /* istanbul ignore next */
    (cov_icjicewh1().s[50]++, queryKeyString);
    /* istanbul ignore next */
    cov_icjicewh1().s[51]++;
    queryKeyRef.current = currentQueryKey;
    /* istanbul ignore next */
    cov_icjicewh1().s[52]++;
    setIsLoading(true);
    /* istanbul ignore next */
    cov_icjicewh1().s[53]++;
    setError(null);
    /* istanbul ignore next */
    cov_icjicewh1().s[54]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_icjicewh1().s[55]++, await _retry.ExtendedRetryUtility.withRetry(async () => {
        /* istanbul ignore next */
        cov_icjicewh1().f[15]++;
        cov_icjicewh1().s[56]++;
        // 쿼리 키가 변경되었으면 중단
        if (queryKeyRef.current !== currentQueryKey) {
          /* istanbul ignore next */
          cov_icjicewh1().b[8][0]++;
          cov_icjicewh1().s[57]++;
          throw new Error('Query cancelled due to key change');
        } else
        /* istanbul ignore next */
        {
          cov_icjicewh1().b[8][1]++;
        }
        cov_icjicewh1().s[58]++;
        return await queryFn();
      }, {
        maxAttempts: 3,
        baseDelay: 1000,
        retryableCategories: [_error.ErrorCategory.NETWORK, _error.ErrorCategory.SERVER, _error.ErrorCategory.EXTERNAL_SERVICE],
        ...retryConfig,
        onRetry: (error, attempt) => {
          /* istanbul ignore next */
          cov_icjicewh1().f[16]++;
          cov_icjicewh1().s[59]++;
          setRetryCount(attempt);
          const appError =
          /* istanbul ignore next */
          (cov_icjicewh1().s[60]++, error instanceof _error.AppError ?
          /* istanbul ignore next */
          (cov_icjicewh1().b[9][0]++, error) :
          /* istanbul ignore next */
          (cov_icjicewh1().b[9][1]++, new _error.AppError(error.message, _error.ErrorCategory.UNKNOWN, _error.ErrorSeverity.MEDIUM, 500, {
            originalError: error
          })));
          /* istanbul ignore next */
          cov_icjicewh1().s[61]++;
          onRetry?.(attempt, appError);
        }
      }, operationName));
      /* istanbul ignore next */
      cov_icjicewh1().s[62]++;
      if (
      /* istanbul ignore next */
      (cov_icjicewh1().b[11][0]++, result.success) &&
      /* istanbul ignore next */
      (cov_icjicewh1().b[11][1]++, queryKeyRef.current === currentQueryKey)) {
        /* istanbul ignore next */
        cov_icjicewh1().b[10][0]++;
        cov_icjicewh1().s[63]++;
        setData(result.data);
        /* istanbul ignore next */
        cov_icjicewh1().s[64]++;
        setRetryCount(0);
        /* istanbul ignore next */
        cov_icjicewh1().s[65]++;
        onSuccess?.(result.data);
        /* istanbul ignore next */
        cov_icjicewh1().s[66]++;
        return result.data;
      } else {
        /* istanbul ignore next */
        cov_icjicewh1().b[10][1]++;
        cov_icjicewh1().s[67]++;
        if (
        /* istanbul ignore next */
        (cov_icjicewh1().b[13][0]++, !result.success) &&
        /* istanbul ignore next */
        (cov_icjicewh1().b[13][1]++, queryKeyRef.current === currentQueryKey)) {
          /* istanbul ignore next */
          cov_icjicewh1().b[12][0]++;
          const appError =
          /* istanbul ignore next */
          (cov_icjicewh1().s[68]++, result.error instanceof _error.AppError ?
          /* istanbul ignore next */
          (cov_icjicewh1().b[14][0]++, result.error) :
          /* istanbul ignore next */
          (cov_icjicewh1().b[14][1]++, result.error ?
          /* istanbul ignore next */
          (cov_icjicewh1().b[15][0]++, new _error.AppError(result.error.message, _error.ErrorCategory.UNKNOWN, _error.ErrorSeverity.MEDIUM, 500, {
            originalError: result.error
          })) :
          /* istanbul ignore next */
          (cov_icjicewh1().b[15][1]++, new _error.AppError('Unknown error occurred', _error.ErrorCategory.UNKNOWN, _error.ErrorSeverity.MEDIUM, 500))));
          /* istanbul ignore next */
          cov_icjicewh1().s[69]++;
          setError(appError);
          /* istanbul ignore next */
          cov_icjicewh1().s[70]++;
          setRetryCount(
          /* istanbul ignore next */
          (cov_icjicewh1().b[16][0]++, result.attempts) ||
          /* istanbul ignore next */
          (cov_icjicewh1().b[16][1]++, 0));
          // 에러 로깅
          /* istanbul ignore next */
          cov_icjicewh1().s[71]++;
          await _logger.logger.error(`Query failed: ${operationName}`, appError, {
            queryKey: queryKeyString,
            retryCount:
            /* istanbul ignore next */
            (cov_icjicewh1().b[17][0]++, result.attempts) ||
            /* istanbul ignore next */
            (cov_icjicewh1().b[17][1]++, 0),
            operationName
          });
          // 글로벌 에러 상태로 전파
          /* istanbul ignore next */
          cov_icjicewh1().s[72]++;
          if (propagateToGlobal) {
            /* istanbul ignore next */
            cov_icjicewh1().b[18][0]++;
            cov_icjicewh1().s[73]++;
            addGlobalError(appError, globalErrorOptions);
          } else
          /* istanbul ignore next */
          {
            cov_icjicewh1().b[18][1]++;
          }
          // 사용자 정의 에러 핸들러 호출
          cov_icjicewh1().s[74]++;
          onError?.(appError);
          /* istanbul ignore next */
          cov_icjicewh1().s[75]++;
          return null;
        } else
        /* istanbul ignore next */
        {
          cov_icjicewh1().b[12][1]++;
        }
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_icjicewh1().s[76]++;
      if (queryKeyRef.current === currentQueryKey) {
        /* istanbul ignore next */
        cov_icjicewh1().b[19][0]++;
        const appError =
        /* istanbul ignore next */
        (cov_icjicewh1().s[77]++, err instanceof _error.AppError ?
        /* istanbul ignore next */
        (cov_icjicewh1().b[20][0]++, err) :
        /* istanbul ignore next */
        (cov_icjicewh1().b[20][1]++, new _error.AppError(err instanceof Error ?
        /* istanbul ignore next */
        (cov_icjicewh1().b[21][0]++, err.message) :
        /* istanbul ignore next */
        (cov_icjicewh1().b[21][1]++, String(err)), _error.ErrorCategory.UNKNOWN, _error.ErrorSeverity.MEDIUM, 500, {
          originalError: err
        })));
        /* istanbul ignore next */
        cov_icjicewh1().s[78]++;
        setError(appError);
        // 글로벌 에러 상태로 전파
        /* istanbul ignore next */
        cov_icjicewh1().s[79]++;
        if (propagateToGlobal) {
          /* istanbul ignore next */
          cov_icjicewh1().b[22][0]++;
          cov_icjicewh1().s[80]++;
          addGlobalError(appError, globalErrorOptions);
        } else
        /* istanbul ignore next */
        {
          cov_icjicewh1().b[22][1]++;
        }
        cov_icjicewh1().s[81]++;
        onError?.(appError);
        /* istanbul ignore next */
        cov_icjicewh1().s[82]++;
        return null;
      } else
      /* istanbul ignore next */
      {
        cov_icjicewh1().b[19][1]++;
      }
    } finally {
      /* istanbul ignore next */
      cov_icjicewh1().s[83]++;
      if (queryKeyRef.current === currentQueryKey) {
        /* istanbul ignore next */
        cov_icjicewh1().b[23][0]++;
        cov_icjicewh1().s[84]++;
        setIsLoading(false);
      } else
      /* istanbul ignore next */
      {
        cov_icjicewh1().b[23][1]++;
      }
    }
    /* istanbul ignore next */
    cov_icjicewh1().s[85]++;
    return null;
  }, [queryKeyString, queryFn, operationName, retryConfig, onError, onRetry, onSuccess, propagateToGlobal, globalErrorOptions, addGlobalError]));
  // 수동 재시도 함수
  const retry =
  /* istanbul ignore next */
  (cov_icjicewh1().s[86]++, (0, _react.useCallback)(() => {
    /* istanbul ignore next */
    cov_icjicewh1().f[17]++;
    cov_icjicewh1().s[87]++;
    if (error) {
      /* istanbul ignore next */
      cov_icjicewh1().b[24][0]++;
      cov_icjicewh1().s[88]++;
      executeQuery();
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[24][1]++;
    }
  }, [error, executeQuery]));
  // 쿼리 키 변경 시 자동 실행
  /* istanbul ignore next */
  cov_icjicewh1().s[89]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_icjicewh1().f[18]++;
    cov_icjicewh1().s[90]++;
    if (enabled) {
      /* istanbul ignore next */
      cov_icjicewh1().b[25][0]++;
      cov_icjicewh1().s[91]++;
      executeQuery();
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[25][1]++;
    }
    cov_icjicewh1().s[92]++;
    return () => {
      /* istanbul ignore next */
      cov_icjicewh1().f[19]++;
      cov_icjicewh1().s[93]++;
      // 컴포넌트 언마운트 시 요청 취소
      if (abortControllerRef.current) {
        /* istanbul ignore next */
        cov_icjicewh1().b[26][0]++;
        cov_icjicewh1().s[94]++;
        abortControllerRef.current.abort();
      } else
      /* istanbul ignore next */
      {
        cov_icjicewh1().b[26][1]++;
      }
    };
  }, [enabled, executeQuery]);
  // 재시도 가능 여부 계산
  const canRetry =
  /* istanbul ignore next */
  (cov_icjicewh1().s[95]++,
  /* istanbul ignore next */
  (cov_icjicewh1().b[27][0]++, error !== null) &&
  /* istanbul ignore next */
  (cov_icjicewh1().b[27][1]++, retryCount < (
  /* istanbul ignore next */
  (cov_icjicewh1().b[28][0]++, retryConfig.maxAttempts) ||
  /* istanbul ignore next */
  (cov_icjicewh1().b[28][1]++, 3))));
  /* istanbul ignore next */
  cov_icjicewh1().s[96]++;
  return {
    data,
    isLoading,
    error,
    retryCount,
    canRetry,
    refetch: executeQuery,
    retry
  };
}
function useRetryableMutation(mutationFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[29][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[20]++;
  const {
    retryConfig,
    operationName,
    ...mutationOptions
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[97]++, options);
  /* istanbul ignore next */
  cov_icjicewh1().s[98]++;
  return useMutation({
    mutationFn: async variables => {
      /* istanbul ignore next */
      cov_icjicewh1().f[21]++;
      const result =
      /* istanbul ignore next */
      (cov_icjicewh1().s[99]++, await _retry.ExtendedRetryUtility.withRetry(() => {
        /* istanbul ignore next */
        cov_icjicewh1().f[22]++;
        cov_icjicewh1().s[100]++;
        return mutationFn(variables);
      }, {
        ..._retry.NETWORK_RETRY_CONFIG,
        maxAttempts: 2,
        ...retryConfig
      },
      /* istanbul ignore next */
      (cov_icjicewh1().b[30][0]++, operationName) ||
      /* istanbul ignore next */
      (cov_icjicewh1().b[30][1]++, 'mutation')));
      /* istanbul ignore next */
      cov_icjicewh1().s[101]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_icjicewh1().b[31][0]++;
        cov_icjicewh1().s[102]++;
        return result.data;
      } else {
        /* istanbul ignore next */
        cov_icjicewh1().b[31][1]++;
        cov_icjicewh1().s[103]++;
        throw result.error;
      }
    },
    ...mutationOptions
  });
}
function useNetworkQuery(queryKey, url, options =
/* istanbul ignore next */
(cov_icjicewh1().b[32][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[23]++;
  const {
    fetchOptions,
    ...queryOptions
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[104]++, options);
  /* istanbul ignore next */
  cov_icjicewh1().s[105]++;
  return useRetryableQuery(queryKey, async () => {
    /* istanbul ignore next */
    cov_icjicewh1().f[24]++;
    const response =
    /* istanbul ignore next */
    (cov_icjicewh1().s[106]++, await fetch(url, fetchOptions));
    /* istanbul ignore next */
    cov_icjicewh1().s[107]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_icjicewh1().b[33][0]++;
      cov_icjicewh1().s[108]++;
      throw new _error.AppError(`HTTP ${response.status}: ${response.statusText}`, _error.ErrorCategory.NETWORK, response.status >= 500 ?
      /* istanbul ignore next */
      (cov_icjicewh1().b[34][0]++, _error.ErrorSeverity.HIGH) :
      /* istanbul ignore next */
      (cov_icjicewh1().b[34][1]++, _error.ErrorSeverity.MEDIUM), response.status);
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[33][1]++;
    }
    cov_icjicewh1().s[109]++;
    return response.json();
  }, {
    ...queryOptions,
    operationName: `network-${url}`,
    propagateToGlobal:
    /* istanbul ignore next */
    (cov_icjicewh1().b[35][0]++, queryOptions.propagateToGlobal) ??
    /* istanbul ignore next */
    (cov_icjicewh1().b[35][1]++, true)
  });
}
function useSupabaseQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[36][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[25]++;
  cov_icjicewh1().s[110]++;
  return useRetryableQuery(queryKey, async () => {
    /* istanbul ignore next */
    cov_icjicewh1().f[26]++;
    const {
      data,
      error
    } =
    /* istanbul ignore next */
    (cov_icjicewh1().s[111]++, await queryFn());
    /* istanbul ignore next */
    cov_icjicewh1().s[112]++;
    if (error) {
      /* istanbul ignore next */
      cov_icjicewh1().b[37][0]++;
      cov_icjicewh1().s[113]++;
      await _logger.logger.error('Supabase query error', error, {
        operation: 'useSupabaseQuery',
        queryKey: queryKey.join('-')
      });
      /* istanbul ignore next */
      cov_icjicewh1().s[114]++;
      throw new _error.AppError(
      /* istanbul ignore next */
      (cov_icjicewh1().b[38][0]++, error.message) ||
      /* istanbul ignore next */
      (cov_icjicewh1().b[38][1]++, '데이터 조회 중 오류가 발생했습니다.'), _error.ErrorCategory.DATA_FETCHING, _error.ErrorSeverity.MEDIUM, 500, {
        originalError: error
      });
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[37][1]++;
    }
    cov_icjicewh1().s[115]++;
    return data;
  }, {
    retryConfig: {
      retryableCategories: [_error.ErrorCategory.NETWORK, _error.ErrorCategory.SERVER, _error.ErrorCategory.DATA_FETCHING]
    },
    ...options,
    operationName: `supabase-${queryKey.join('-')}`,
    propagateToGlobal:
    /* istanbul ignore next */
    (cov_icjicewh1().b[39][0]++, options.propagateToGlobal) ??
    /* istanbul ignore next */
    (cov_icjicewh1().b[39][1]++, true)
  });
}
function useVoteQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[40][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[27]++;
  cov_icjicewh1().s[116]++;
  return useRetryableQuery(queryKey, queryFn, {
    retryConfig: {
      maxAttempts: 3,
      baseDelay: 1000,
      retryCondition: _retry.createRetryCondition.or(_retry.createRetryCondition.httpStatus([500, 502, 503, 504]), _retry.createRetryCondition.errorMessage(['network', 'timeout', 'connection']))
    },
    ...options,
    operationName: `vote-${queryKey.join('-')}`
  });
}
function useVoteMutation(mutationFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[41][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[28]++;
  cov_icjicewh1().s[117]++;
  return useRetryableMutation(mutationFn, {
    retryConfig: {
      maxAttempts: 2,
      baseDelay: 1000,
      retryCondition: _retry.createRetryCondition.and(_retry.createRetryCondition.httpStatus([500, 502, 503, 504]), _retry.createRetryCondition.maxAttempts(2))
    },
    ...options,
    operationName: 'vote-mutation'
  });
}
function useAuthQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[42][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[29]++;
  cov_icjicewh1().s[118]++;
  return useRetryableQuery(queryKey, queryFn, {
    retryConfig: {
      maxAttempts: 2,
      retryableCategories: [_error.ErrorCategory.NETWORK]
    },
    ...options,
    operationName: `auth-${queryKey.join('-')}`,
    propagateToGlobal:
    /* istanbul ignore next */
    (cov_icjicewh1().b[43][0]++, options.propagateToGlobal) ??
    /* istanbul ignore next */
    (cov_icjicewh1().b[43][1]++, false)
  });
}
function useRealtimeQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[44][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[30]++;
  const {
    pollingInterval =
    /* istanbul ignore next */
    (cov_icjicewh1().b[45][0]++, 1000),
    ...queryOptions
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[119]++, options);
  const [isPolling, setIsPolling] =
  /* istanbul ignore next */
  (cov_icjicewh1().s[120]++, (0, _react.useState)(false));
  const result =
  /* istanbul ignore next */
  (cov_icjicewh1().s[121]++, useRetryableQuery(queryKey, queryFn, {
    ...queryOptions,
    operationName: `realtime-${queryKey.join('-')}`,
    propagateToGlobal:
    /* istanbul ignore next */
    (cov_icjicewh1().b[46][0]++, queryOptions.propagateToGlobal) ??
    /* istanbul ignore next */
    (cov_icjicewh1().b[46][1]++, false)
  }));
  // 폴링 로직
  /* istanbul ignore next */
  cov_icjicewh1().s[122]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_icjicewh1().f[31]++;
    cov_icjicewh1().s[123]++;
    if (
    /* istanbul ignore next */
    (cov_icjicewh1().b[48][0]++, !isPolling) ||
    /* istanbul ignore next */
    (cov_icjicewh1().b[48][1]++, !result.data)) {
      /* istanbul ignore next */
      cov_icjicewh1().b[47][0]++;
      cov_icjicewh1().s[124]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_icjicewh1().b[47][1]++;
    }
    const interval =
    /* istanbul ignore next */
    (cov_icjicewh1().s[125]++, setInterval(() => {
      /* istanbul ignore next */
      cov_icjicewh1().f[32]++;
      cov_icjicewh1().s[126]++;
      result.refetch();
    }, pollingInterval));
    /* istanbul ignore next */
    cov_icjicewh1().s[127]++;
    return () => {
      /* istanbul ignore next */
      cov_icjicewh1().f[33]++;
      cov_icjicewh1().s[128]++;
      return clearInterval(interval);
    };
  }, [isPolling, result.data, result.refetch, pollingInterval]);
  /* istanbul ignore next */
  cov_icjicewh1().s[129]++;
  return {
    ...result,
    startPolling: () => {
      /* istanbul ignore next */
      cov_icjicewh1().f[34]++;
      cov_icjicewh1().s[130]++;
      return setIsPolling(true);
    },
    stopPolling: () => {
      /* istanbul ignore next */
      cov_icjicewh1().f[35]++;
      cov_icjicewh1().s[131]++;
      return setIsPolling(false);
    },
    isPolling
  };
}
function useFileUploadQuery(queryKey, uploadFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[49][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[36]++;
  cov_icjicewh1().s[132]++;
  return useRetryableQuery(queryKey, uploadFn, {
    retryConfig: {
      maxAttempts: 2,
      baseDelay: 2000,
      retryableCategories: [_error.ErrorCategory.NETWORK]
    },
    ...options,
    operationName: `upload-${queryKey.join('-')}`,
    propagateToGlobal:
    /* istanbul ignore next */
    (cov_icjicewh1().b[50][0]++, options.propagateToGlobal) ??
    /* istanbul ignore next */
    (cov_icjicewh1().b[50][1]++, true),
    globalErrorOptions: {
      autoHide: false,
      duration: undefined,
      ...options.globalErrorOptions
    }
  });
}
function useSafeRetryableQuery(queryKey, queryFn, options =
/* istanbul ignore next */
(cov_icjicewh1().b[51][0]++, {})) {
  /* istanbul ignore next */
  cov_icjicewh1().f[37]++;
  const {
    fallbackData,
    onError,
    ...queryOptions
  } =
  /* istanbul ignore next */
  (cov_icjicewh1().s[133]++, options);
  const query =
  /* istanbul ignore next */
  (cov_icjicewh1().s[134]++, useRetryableQuery(queryKey, queryFn, {
    ...queryOptions,
    onError: error => {
      /* istanbul ignore next */
      cov_icjicewh1().f[38]++;
      cov_icjicewh1().s[135]++;
      // 에러 로깅
      _logger.logger.error('Query failed after retries', error, {
        queryKey: queryKey.join('-'),
        operation: 'useSafeRetryableQuery'
      });
      // 커스텀 에러 핸들러 실행
      /* istanbul ignore next */
      cov_icjicewh1().s[136]++;
      onError?.(error);
    }
  }));
  // 에러 발생 시 fallback 데이터 반환
  /* istanbul ignore next */
  cov_icjicewh1().s[137]++;
  if (
  /* istanbul ignore next */
  (cov_icjicewh1().b[53][0]++, query.error) &&
  /* istanbul ignore next */
  (cov_icjicewh1().b[53][1]++, fallbackData !== undefined)) {
    /* istanbul ignore next */
    cov_icjicewh1().b[52][0]++;
    cov_icjicewh1().s[138]++;
    return {
      ...query,
      data: fallbackData,
      isError: false,
      error: null
    };
  } else
  /* istanbul ignore next */
  {
    cov_icjicewh1().b[52][1]++;
  }
  cov_icjicewh1().s[139]++;
  return query;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,