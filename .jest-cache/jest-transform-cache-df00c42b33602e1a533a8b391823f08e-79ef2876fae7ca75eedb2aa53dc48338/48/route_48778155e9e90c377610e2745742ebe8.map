{"version":3,"names":["GET","cov_bxo8gcwva","f","s","POST","request","searchParams","URL","url","voteId","get","b","_server","NextResponse","json","error","status","voteIdNumber","parseInt","isNaN","supabase","_supabaseserverclient","createClient","data","voteData","voteError","from","select","eq","is","single","console","code","now","Date","startAt","start_at","stopAt","stop_at","voteItems","itemsError","order","ascending","totalVotes","reduce","sum","item","vote_total","results","map","index","voteTotal","percentage","id","vote_id","artistId","artist_id","groupId","group_id","artist","name","image","artistGroup","artist_group","Math","round","rank","response","title","success"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/vote/results/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@/utils/supabase-server-client\";\n\ninterface VoteResultItem {\n    id: number;\n    voteId: number;\n    artistId: number | null;\n    groupId: number;\n    voteTotal: number | null;\n    artist: {\n        id: number;\n        name: string;\n        image: string | null;\n        artistGroup: {\n            id: number;\n            name: string;\n        } | null;\n    } | null;\n    percentage: number;\n    rank: number;\n}\n\ninterface VoteResultsResponse {\n    voteId: number;\n    title: string;\n    status: \"upcoming\" | \"ongoing\" | \"ended\";\n    totalVotes: number;\n    results: VoteResultItem[];\n}\n\nexport async function GET(request: NextRequest) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const voteId = searchParams.get(\"voteId\");\n\n        if (!voteId) {\n            return NextResponse.json(\n                { error: \"투표 ID가 필요합니다.\" },\n                { status: 400 }\n            );\n        }\n\n        const voteIdNumber = parseInt(voteId);\n        if (isNaN(voteIdNumber) || voteIdNumber <= 0) {\n            return NextResponse.json(\n                { error: \"유효한 투표 ID가 필요합니다.\" },\n                { status: 400 }\n            );\n        }\n\n        const supabase = await createClient();\n\n        // 투표 기본 정보 조회\n        const { data: voteData, error: voteError } = await supabase\n            .from(\"vote\")\n            .select(`\n                id,\n                title,\n                start_at,\n                stop_at,\n                deleted_at\n            `)\n            .eq(\"id\", voteIdNumber)\n            .is(\"deleted_at\", null)\n            .single();\n\n        if (voteError) {\n            console.error('투표 정보 조회 실패:', voteError);\n            if (voteError.code === 'PGRST116') { // No rows returned\n                return NextResponse.json(\n                    { error: \"투표를 찾을 수 없습니다.\" },\n                    { status: 404 }\n                );\n            }\n            return NextResponse.json(\n                { error: \"투표 정보 조회에 실패했습니다.\" },\n                { status: 500 }\n            );\n        }\n\n        if (!voteData) {\n            return NextResponse.json(\n                { error: \"투표를 찾을 수 없습니다.\" },\n                { status: 404 }\n            );\n        }\n\n        // 투표 상태 계산\n        const now = new Date();\n        const startAt = new Date(voteData.start_at);\n        const stopAt = new Date(voteData.stop_at);\n\n        let status: \"upcoming\" | \"ongoing\" | \"ended\";\n        if (now < startAt) {\n            status = \"upcoming\";\n        } else if (now >= startAt && now <= stopAt) {\n            status = \"ongoing\";\n        } else {\n            status = \"ended\";\n        }\n\n        // 투표 아이템 및 결과 조회\n        const { data: voteItems, error: itemsError } = await supabase\n            .from(\"vote_item\")\n            .select(`\n                id,\n                vote_id,\n                artist_id,\n                group_id,\n                vote_total,\n                artist (\n                    id,\n                    name,\n                    image,\n                    artist_group (\n                        id,\n                        name\n                    )\n                )\n            `)\n            .eq(\"vote_id\", voteIdNumber)\n            .is(\"deleted_at\", null)\n            .order(\"vote_total\", { ascending: false });\n\n        if (itemsError) {\n            console.error('투표 아이템 조회 실패:', itemsError);\n            return NextResponse.json(\n                { error: \"투표 아이템 조회에 실패했습니다.\" },\n                { status: 500 }\n            );\n        }\n\n        // 총 투표 수 계산\n        const totalVotes = voteItems?.reduce((sum, item) =>\n            sum + (item.vote_total || 0), 0) || 0;\n\n        // 결과 데이터 변환 및 순위 계산\n        const results: VoteResultItem[] = voteItems?.map((item: any, index) => {\n            const voteTotal = item.vote_total || 0;\n            const percentage = totalVotes > 0\n                ? (voteTotal / totalVotes) * 100\n                : 0;\n\n            return {\n                id: item.id,\n                voteId: item.vote_id,\n                artistId: item.artist_id,\n                groupId: item.group_id,\n                voteTotal,\n                artist: item.artist\n                    ? {\n                        id: item.artist.id,\n                        name: item.artist.name,\n                        image: item.artist.image,\n                        artistGroup: item.artist.artist_group,\n                    }\n                    : null,\n                percentage: Math.round(percentage * 100) / 100, // 소수점 2자리\n                rank: index + 1, // 이미 vote_total 내림차순으로 정렬됨\n            };\n        }) || [];\n\n        const response: VoteResultsResponse = {\n            voteId: voteIdNumber,\n            title: voteData.title,\n            status,\n            totalVotes,\n            results,\n        };\n\n        return NextResponse.json({\n            success: true,\n            data: response,\n        });\n    } catch (error) {\n        console.error('투표 결과 조회 처리 중 오류:', error);\n        return NextResponse.json(\n            { error: '서버 오류가 발생했습니다.' },\n            { status: 500 }\n        );\n    }\n}\n\nexport async function POST(request: NextRequest) {\n    return NextResponse.json(\n        { error: \"POST 메서드는 지원되지 않습니다.\" },\n        { status: 405 }\n    );\n}\n"],"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","ignoreList":[]}