{"version":3,"names":["useAuthQuery","cov_icjicewh1","f","s","useFileUploadQuery","useNetworkQuery","useRealtimeQuery","useRetryableMutation","useRetryableQuery","useSafeRetryableQuery","useSupabaseQuery","useVoteMutation","useVoteQuery","useMutation","options","isLoading","setIsLoading","_react","useState","error","setError","data","setData","mutate","useCallback","variables","onMutate","result","mutationFn","onSuccess","err","onError","queryKey","queryFn","b","enabled","fallbackData","retryConfig","onRetry","operationName","propagateToGlobal","globalErrorOptions","autoHide","duration","handleError","addGlobalError","_ErrorContext","useErrorHandler","retryCount","setRetryCount","abortControllerRef","useRef","queryKeyRef","queryKeyString","JSON","stringify","executeQuery","current","abort","AbortController","currentQueryKey","_retry","ExtendedRetryUtility","withRetry","Error","maxAttempts","baseDelay","retryableCategories","_error","ErrorCategory","NETWORK","SERVER","EXTERNAL_SERVICE","attempt","appError","AppError","message","UNKNOWN","ErrorSeverity","MEDIUM","originalError","success","attempts","_logger","logger","String","retry","useEffect","canRetry","refetch","mutationOptions","NETWORK_RETRY_CONFIG","url","fetchOptions","queryOptions","response","fetch","ok","status","statusText","HIGH","json","operation","join","DATA_FETCHING","retryCondition","createRetryCondition","or","httpStatus","errorMessage","and","pollingInterval","isPolling","setIsPolling","interval","setInterval","clearInterval","startPolling","stopPolling","uploadFn","undefined","query","isError"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useRetryableQuery.ts"],"sourcesContent":["/**\n * React Query와 재시도 로직을 통합한 커스텀 훅\n * \n * 클라이언트 사이드에서 재시도 가능한 데이터 페칭을 위한 훅입니다.\n */\n\n'use client';\n\nimport { useState, useEffect, useCallback, useRef } from 'react';\n// React Query 타입 정의 (자체 구현)\ninterface UseQueryOptions<T> {\n  enabled?: boolean;\n  onError?: (error: Error) => void;\n  onSuccess?: (data: T) => void;\n}\n\ninterface UseMutationOptions<T, TError, TVariables> {\n  onError?: (error: TError) => void;\n  onSuccess?: (data: T, variables: TVariables) => void;\n  onMutate?: (variables: TVariables) => void;\n  mutationFn: (variables: TVariables) => Promise<T>;\n}\n\n// 간단한 useMutation 구현\nfunction useMutation<T, TError = Error, TVariables = void>(options: UseMutationOptions<T, TError, TVariables>) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<TError | null>(null);\n  const [data, setData] = useState<T | null>(null);\n\n  const mutate = useCallback(async (variables: TVariables) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      options.onMutate?.(variables);\n      const result = await options.mutationFn(variables);\n      setData(result);\n      options.onSuccess?.(result, variables);\n      return result;\n    } catch (err) {\n      const error = err as TError;\n      setError(error);\n      options.onError?.(error);\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [options]);\n\n  return {\n    mutate,\n    isLoading,\n    error,\n    data,\n  };\n}\nimport { \n  ExtendedRetryUtility, \n  withNetworkRetry, \n  withExternalApiRetry,\n  ExtendedRetryConfig,\n  NETWORK_RETRY_CONFIG,\n  createRetryCondition \n} from '@/utils/retry';\nimport { AppError, ErrorCategory, ErrorSeverity } from '@/utils/error';\nimport { logger } from '@/utils/logger';\nimport { useErrorHandler } from '@/contexts/ErrorContext';\n\n/**\n * 재시도 가능한 쿼리 옵션\n */\nexport interface RetryableQueryOptions<T> {\n  enabled?: boolean;\n  fallbackData?: T | null;\n  retryConfig?: Partial<ExtendedRetryConfig>;\n  onError?: (error: AppError) => void;\n  onRetry?: (attempt: number, error: AppError) => void;\n  onSuccess?: (data: T) => void;\n  operationName?: string;\n  propagateToGlobal?: boolean; // 글로벌 에러 상태로 전파할지 여부\n  globalErrorOptions?: { autoHide?: boolean; duration?: number }; // 글로벌 에러 옵션\n}\n\n/**\n * 재시도 가능한 뮤테이션 옵션\n */\nexport interface RetryableMutationOptions<T, V> extends Omit<UseMutationOptions<T, Error, V>, 'mutationFn'> {\n  retryConfig?: Partial<ExtendedRetryConfig>;\n  operationName?: string;\n}\n\n/**\n * 재시도 가능한 쿼리 결과\n */\nexport interface RetryableQueryResult<T> {\n  data: T | null;\n  isLoading: boolean;\n  error: AppError | null;\n  retryCount: number;\n  canRetry: boolean;\n  refetch: () => Promise<T | null>;\n  retry: () => void;\n}\n\n/**\n * 재시도 가능한 쿼리 훅 (글로벌 에러 시스템 통합)\n * \n * 비동기 작업을 실행하고 실패 시 자동으로 재시도합니다.\n * 에러를 글로벌 에러 상태로 전파할 수 있습니다.\n */\nexport function useRetryableQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n): RetryableQueryResult<T> {\n  const {\n    enabled = true,\n    fallbackData = null,\n    retryConfig = {},\n    onError,\n    onRetry,\n    onSuccess,\n    operationName = 'query',\n    propagateToGlobal = false,\n    globalErrorOptions = { autoHide: true, duration: 5000 }\n  } = options;\n\n  const { handleError: addGlobalError } = useErrorHandler();\n\n  const [data, setData] = useState<T | null>(fallbackData);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<AppError | null>(null);\n  const [retryCount, setRetryCount] = useState(0);\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n  const queryKeyRef = useRef<string>('');\n\n  // 쿼리 키 문자열화\n  const queryKeyString = JSON.stringify(queryKey);\n\n  // 쿼리 실행 함수\n  const executeQuery = useCallback(async (): Promise<T | null> => {\n    // 이전 요청 취소\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n\n    // 새 AbortController 생성\n    abortControllerRef.current = new AbortController();\n    const currentQueryKey = queryKeyString;\n    queryKeyRef.current = currentQueryKey;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const result = await ExtendedRetryUtility.withRetry(\n        async () => {\n          // 쿼리 키가 변경되었으면 중단\n          if (queryKeyRef.current !== currentQueryKey) {\n            throw new Error('Query cancelled due to key change');\n          }\n\n          return await queryFn();\n        },\n        {\n          maxAttempts: 3,\n          baseDelay: 1000,\n          retryableCategories: [\n            ErrorCategory.NETWORK,\n            ErrorCategory.SERVER,\n            ErrorCategory.EXTERNAL_SERVICE,\n          ],\n          ...retryConfig,\n          onRetry: (error, attempt) => {\n            setRetryCount(attempt);\n            const appError = error instanceof AppError ? error : new AppError(\n              error.message,\n              ErrorCategory.UNKNOWN,\n              ErrorSeverity.MEDIUM,\n              500,\n              { originalError: error }\n            );\n            onRetry?.(attempt, appError);\n          },\n        },\n        operationName\n      );\n\n      if (result.success && queryKeyRef.current === currentQueryKey) {\n        setData(result.data!);\n        setRetryCount(0);\n        onSuccess?.(result.data!);\n        return result.data!;\n      } else if (!result.success && queryKeyRef.current === currentQueryKey) {\n        const appError = result.error instanceof AppError \n          ? result.error \n          : result.error \n            ? new AppError(\n                result.error.message,\n                ErrorCategory.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                500,\n                { originalError: result.error }\n              )\n            : new AppError(\n                'Unknown error occurred',\n                ErrorCategory.UNKNOWN,\n                ErrorSeverity.MEDIUM,\n                500\n              );\n        setError(appError);\n        setRetryCount(result.attempts || 0);\n\n        // 에러 로깅\n        await logger.error(`Query failed: ${operationName}`, appError, {\n          queryKey: queryKeyString,\n          retryCount: result.attempts || 0,\n          operationName,\n        });\n\n        // 글로벌 에러 상태로 전파\n        if (propagateToGlobal) {\n          addGlobalError(appError, globalErrorOptions);\n        }\n\n        // 사용자 정의 에러 핸들러 호출\n        onError?.(appError);\n\n        return null;\n      }\n    } catch (err) {\n      if (queryKeyRef.current === currentQueryKey) {\n        const appError = err instanceof AppError \n          ? err \n          : new AppError(\n              err instanceof Error ? err.message : String(err),\n              ErrorCategory.UNKNOWN,\n              ErrorSeverity.MEDIUM,\n              500,\n              { originalError: err }\n            );\n\n        setError(appError);\n\n        // 글로벌 에러 상태로 전파\n        if (propagateToGlobal) {\n          addGlobalError(appError, globalErrorOptions);\n        }\n\n        onError?.(appError);\n        return null;\n      }\n    } finally {\n      if (queryKeyRef.current === currentQueryKey) {\n        setIsLoading(false);\n      }\n    }\n\n    return null;\n  }, [queryKeyString, queryFn, operationName, retryConfig, onError, onRetry, onSuccess, propagateToGlobal, globalErrorOptions, addGlobalError]);\n\n  // 수동 재시도 함수\n  const retry = useCallback(() => {\n    if (error) {\n      executeQuery();\n    }\n  }, [error, executeQuery]);\n\n  // 쿼리 키 변경 시 자동 실행\n  useEffect(() => {\n    if (enabled) {\n      executeQuery();\n    }\n\n    return () => {\n      // 컴포넌트 언마운트 시 요청 취소\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, [enabled, executeQuery]);\n\n  // 재시도 가능 여부 계산\n  const canRetry = error !== null && retryCount < (retryConfig.maxAttempts || 3);\n\n  return {\n    data,\n    isLoading,\n    error,\n    retryCount,\n    canRetry,\n    refetch: executeQuery,\n    retry,\n  };\n}\n\n/**\n * 재시도 가능한 뮤테이션 훅\n */\nexport function useRetryableMutation<T, V = void>(\n  mutationFn: (variables: V) => Promise<T>,\n  options: RetryableMutationOptions<T, V> = {}\n) {\n  const { retryConfig, operationName, ...mutationOptions } = options;\n\n  return useMutation({\n    mutationFn: async (variables: V) => {\n      const result = await ExtendedRetryUtility.withRetry(\n        () => mutationFn(variables),\n        { \n          ...NETWORK_RETRY_CONFIG, \n          maxAttempts: 2, // 뮤테이션은 재시도 횟수 제한\n          ...retryConfig \n        },\n        operationName || 'mutation'\n      );\n\n      if (result.success) {\n        return result.data!;\n      } else {\n        throw result.error;\n      }\n    },\n    ...mutationOptions,\n  });\n}\n\n/**\n * 네트워크 요청용 재시도 가능한 쿼리 훅 (글로벌 에러 통합)\n */\nexport function useNetworkQuery<T>(\n  queryKey: any[],\n  url: string,\n  options: RetryableQueryOptions<T> & { fetchOptions?: RequestInit } = {}\n) {\n  const { fetchOptions, ...queryOptions } = options;\n\n  return useRetryableQuery(\n    queryKey,\n    async () => {\n      const response = await fetch(url, fetchOptions);\n      \n      if (!response.ok) {\n        throw new AppError(\n          `HTTP ${response.status}: ${response.statusText}`,\n          ErrorCategory.NETWORK,\n          response.status >= 500 ? ErrorSeverity.HIGH : ErrorSeverity.MEDIUM,\n          response.status\n        );\n      }\n      \n      return response.json();\n    },\n    {\n      ...queryOptions,\n      operationName: `network-${url}`,\n      propagateToGlobal: queryOptions.propagateToGlobal ?? true, // 네트워크 에러는 기본적으로 글로벌로 전파\n    }\n  );\n}\n\n/**\n * Supabase 쿼리용 재시도 가능한 훅 (글로벌 에러 통합)\n */\nexport function useSupabaseQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<{ data: T | null; error: any }>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    async () => {\n      const { data, error } = await queryFn();\n      \n      if (error) {\n        await logger.error('Supabase query error', error, {\n          operation: 'useSupabaseQuery',\n          queryKey: queryKey.join('-'),\n        });\n        \n        throw new AppError(\n          error.message || '데이터 조회 중 오류가 발생했습니다.',\n          ErrorCategory.DATA_FETCHING,\n          ErrorSeverity.MEDIUM,\n          500,\n          { originalError: error }\n        );\n      }\n      \n      return data!;\n    },\n    {\n      retryConfig: {\n        retryableCategories: [\n          ErrorCategory.NETWORK,\n          ErrorCategory.SERVER,\n          ErrorCategory.DATA_FETCHING,\n        ],\n      },\n      ...options,\n      operationName: `supabase-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? true, // Supabase 에러도 기본적으로 글로벌로 전파\n    }\n  );\n}\n\n/**\n * 투표 관련 쿼리용 특화된 훅\n */\nexport function useVoteQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      retryConfig: {\n        maxAttempts: 3,\n        baseDelay: 1000,\n        retryCondition: createRetryCondition.or(\n          createRetryCondition.httpStatus([500, 502, 503, 504]),\n          createRetryCondition.errorMessage(['network', 'timeout', 'connection'])\n        ),\n      },\n\n      ...options,\n      operationName: `vote-${queryKey.join('-')}`,\n    }\n  );\n}\n\n/**\n * 투표 제출용 뮤테이션 훅\n */\nexport function useVoteMutation<T, V = void>(\n  mutationFn: (variables: V) => Promise<T>,\n  options: RetryableMutationOptions<T, V> = {}\n) {\n  return useRetryableMutation(\n    mutationFn,\n    {\n      retryConfig: {\n        maxAttempts: 2, // 투표는 중복 방지를 위해 재시도 제한\n        baseDelay: 1000,\n        retryCondition: createRetryCondition.and(\n          createRetryCondition.httpStatus([500, 502, 503, 504]),\n          createRetryCondition.maxAttempts(2)\n        ),\n      },\n      ...options,\n      operationName: 'vote-mutation',\n    }\n  );\n}\n\n/**\n * 인증 관련 쿼리용 특화된 훅\n */\nexport function useAuthQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      retryConfig: {\n        maxAttempts: 2, // 인증 에러는 재시도 횟수 제한\n        retryableCategories: [ErrorCategory.NETWORK],\n      },\n      ...options,\n      operationName: `auth-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? false, // 인증 에러는 기본적으로 글로벌로 전파하지 않음\n    }\n  );\n}\n\n/**\n * 실시간 데이터용 쿼리 훅\n */\nexport function useRealtimeQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> & { pollingInterval?: number } = {}\n) {\n  const { pollingInterval = 1000, ...queryOptions } = options;\n  const [isPolling, setIsPolling] = useState(false);\n\n  const result = useRetryableQuery(\n    queryKey,\n    queryFn,\n    {\n      ...queryOptions,\n      operationName: `realtime-${queryKey.join('-')}`,\n      propagateToGlobal: queryOptions.propagateToGlobal ?? false, // 실시간 에러는 조용히 처리\n    }\n  );\n\n  // 폴링 로직\n  useEffect(() => {\n    if (!isPolling || !result.data) return;\n\n    const interval = setInterval(() => {\n      result.refetch();\n    }, pollingInterval);\n\n    return () => clearInterval(interval);\n  }, [isPolling, result.data, result.refetch, pollingInterval]);\n\n  return {\n    ...result,\n    startPolling: () => setIsPolling(true),\n    stopPolling: () => setIsPolling(false),\n    isPolling,\n  };\n}\n\n/**\n * 파일 업로드용 쿼리 훅\n */\nexport function useFileUploadQuery<T>(\n  queryKey: any[],\n  uploadFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> = {}\n) {\n  return useRetryableQuery(\n    queryKey,\n    uploadFn,\n    {\n      retryConfig: {\n        maxAttempts: 2,\n        baseDelay: 2000,\n        retryableCategories: [ErrorCategory.NETWORK],\n      },\n      ...options,\n      operationName: `upload-${queryKey.join('-')}`,\n      propagateToGlobal: options.propagateToGlobal ?? true,\n      globalErrorOptions: {\n        autoHide: false, // 업로드 에러는 수동으로 해제\n        duration: undefined,\n        ...options.globalErrorOptions,\n      },\n    }\n  );\n}\n\n/**\n * 에러 바운더리와 함께 사용할 수 있는 재시도 가능한 쿼리 훅\n */\nexport function useSafeRetryableQuery<T>(\n  queryKey: any[],\n  queryFn: () => Promise<T>,\n  options: RetryableQueryOptions<T> & { \n    fallbackData?: T;\n    onError?: (error: Error) => void;\n  } = {}\n) {\n  const { fallbackData, onError, ...queryOptions } = options;\n\n  const query = useRetryableQuery(queryKey, queryFn, {\n    ...queryOptions,\n    onError: (error) => {\n      // 에러 로깅\n      logger.error('Query failed after retries', error as Error, {\n        queryKey: queryKey.join('-'),\n        operation: 'useSafeRetryableQuery',\n      });\n      \n      // 커스텀 에러 핸들러 실행\n      onError?.(error as Error);\n    },\n  });\n\n  // 에러 발생 시 fallback 데이터 반환\n  if (query.error && fallbackData !== undefined) {\n    return {\n      ...query,\n      data: fallbackData,\n      isError: false,\n      error: null,\n    };\n  }\n\n  return query;\n} "],"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","ignoreList":[]}