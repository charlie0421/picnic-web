{"version":3,"names":["PerformanceMonitor","useFPS","cov_2fvqpaxrey","f","fps","setFps","s","_react","useState","frameCountRef","useRef","lastTimeRef","performance","now","useEffect","animationId","calculateFPS","current","b","requestAnimationFrame","cancelAnimationFrame","useMemoryUsage","memoryUsage","setMemoryUsage","updateMemoryUsage","window","memory","Math","round","usedJSHeapSize","interval","setInterval","clearInterval","useNetworkStatus","status","setStatus","isOnline","navigator","onLine","connectionType","updateOnlineStatus","connection","effectiveType","type","addEventListener","removeEventListener","useRenderCount","renderCountRef","memo","enabled","process","env","NODE_ENV","position","showDetails","isExpanded","setIsExpanded","loadTime","renderCount","networkStatus","domNodes","setDomNodes","updateDomNodes","document","querySelectorAll","length","positionClasses","metrics","onlineStatus","getStatusColor","metric","value","_jsxruntime","jsx","className","jsxs","onClick","displayName"],"sources":["/Users/cheolhyun/Repositories/picnic-web/components/debug/PerformanceMonitor.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect, useRef, memo } from 'react';\n\ninterface PerformanceMetrics {\n  fps: number;\n  memoryUsage: number;\n  renderCount: number;\n  loadTime: number;\n  domNodes: number;\n  onlineStatus: boolean;\n  connectionType?: string;\n}\n\ninterface PerformanceMonitorProps {\n  enabled?: boolean;\n  position?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  showDetails?: boolean;\n}\n\n// FPS 계산을 위한 훅\nfunction useFPS() {\n  const [fps, setFps] = useState(0);\n  const frameCountRef = useRef(0);\n  const lastTimeRef = useRef(performance.now());\n\n  useEffect(() => {\n    let animationId: number;\n\n    const calculateFPS = () => {\n      frameCountRef.current++;\n      const now = performance.now();\n      \n      if (now - lastTimeRef.current >= 1000) {\n        setFps(frameCountRef.current);\n        frameCountRef.current = 0;\n        lastTimeRef.current = now;\n      }\n      \n      animationId = requestAnimationFrame(calculateFPS);\n    };\n\n    animationId = requestAnimationFrame(calculateFPS);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n    };\n  }, []);\n\n  return fps;\n}\n\n// 메모리 사용량 모니터링 훅\nfunction useMemoryUsage() {\n  const [memoryUsage, setMemoryUsage] = useState(0);\n\n  useEffect(() => {\n    const updateMemoryUsage = () => {\n      if (typeof window !== 'undefined' && 'performance' in window && 'memory' in (window.performance as any)) {\n        const memory = (window.performance as any).memory;\n        setMemoryUsage(Math.round(memory.usedJSHeapSize / 1024 / 1024)); // MB\n      }\n    };\n\n    updateMemoryUsage();\n    const interval = setInterval(updateMemoryUsage, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return memoryUsage;\n}\n\n// 네트워크 상태 모니터링 훅\nfunction useNetworkStatus() {\n  const [status, setStatus] = useState({\n    isOnline: typeof navigator !== 'undefined' ? navigator.onLine : true,\n    connectionType: 'unknown'\n  });\n\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    const updateOnlineStatus = () => {\n      let connectionType = 'unknown';\n      \n      if ('connection' in navigator) {\n        const connection = (navigator as any).connection;\n        connectionType = connection?.effectiveType || connection?.type || 'unknown';\n      }\n\n      setStatus({\n        isOnline: navigator.onLine,\n        connectionType\n      });\n    };\n\n    updateOnlineStatus();\n\n    window.addEventListener('online', updateOnlineStatus);\n    window.addEventListener('offline', updateOnlineStatus);\n\n    if ('connection' in navigator) {\n      (navigator as any).connection?.addEventListener('change', updateOnlineStatus);\n    }\n\n    return () => {\n      window.removeEventListener('online', updateOnlineStatus);\n      window.removeEventListener('offline', updateOnlineStatus);\n      \n      if ('connection' in navigator) {\n        (navigator as any).connection?.removeEventListener('change', updateOnlineStatus);\n      }\n    };\n  }, []);\n\n  return status;\n}\n\n// 렌더링 카운터 훅\nfunction useRenderCount() {\n  const renderCountRef = useRef(0);\n  \n  useEffect(() => {\n    renderCountRef.current++;\n  });\n\n  return renderCountRef.current;\n}\n\nexport const PerformanceMonitor = memo<PerformanceMonitorProps>(({\n  enabled = process.env.NODE_ENV === 'development',\n  position = 'bottom-right',\n  showDetails = true\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [loadTime] = useState(() => {\n    if (typeof window !== 'undefined' && window.performance) {\n      return Math.round(performance.now());\n    }\n    return 0;\n  });\n\n  const fps = useFPS();\n  const memoryUsage = useMemoryUsage();\n  const renderCount = useRenderCount();\n  const networkStatus = useNetworkStatus();\n  const [domNodes, setDomNodes] = useState(0);\n\n  // DOM 노드 수 계산\n  useEffect(() => {\n    const updateDomNodes = () => {\n      if (typeof document !== 'undefined') {\n        setDomNodes(document.querySelectorAll('*').length);\n      }\n    };\n\n    updateDomNodes();\n    const interval = setInterval(updateDomNodes, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  if (!enabled) return null;\n\n  const positionClasses = {\n    'top-left': 'top-4 left-4',\n    'top-right': 'top-4 right-4',\n    'bottom-left': 'bottom-4 left-4',\n    'bottom-right': 'bottom-4 right-4'\n  };\n\n  const metrics: PerformanceMetrics = {\n    fps,\n    memoryUsage,\n    renderCount,\n    loadTime,\n    domNodes,\n    onlineStatus: networkStatus.isOnline,\n    connectionType: networkStatus.connectionType\n  };\n\n  const getStatusColor = (metric: keyof PerformanceMetrics, value: any) => {\n    switch (metric) {\n      case 'fps':\n        return value >= 55 ? 'text-green-600' : value >= 30 ? 'text-yellow-600' : 'text-red-600';\n      case 'memoryUsage':\n        return value <= 50 ? 'text-green-600' : value <= 100 ? 'text-yellow-600' : 'text-red-600';\n      case 'domNodes':\n        return value <= 1000 ? 'text-green-600' : value <= 2000 ? 'text-yellow-600' : 'text-red-600';\n      case 'onlineStatus':\n        return value ? 'text-green-600' : 'text-red-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  return (\n    <div className={`fixed ${positionClasses[position]} z-50 font-mono text-xs`}>\n      <div className=\"bg-black/80 text-white rounded-lg shadow-lg overflow-hidden\">\n        {/* Header */}\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"w-full px-3 py-2 bg-gray-900 hover:bg-gray-800 transition-colors duration-200 flex items-center justify-between\"\n        >\n          <span className=\"font-semibold\">Performance</span>\n          <span className={`transform transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`}>\n            ▼\n          </span>\n        </button>\n\n        {/* Compact view */}\n        {!isExpanded && (\n          <div className=\"px-3 py-2 space-y-1\">\n            <div className={`${getStatusColor('fps', fps)}`}>\n              FPS: {fps}\n            </div>\n            <div className={`${getStatusColor('memoryUsage', memoryUsage)}`}>\n              Memory: {memoryUsage}MB\n            </div>\n          </div>\n        )}\n\n        {/* Expanded view */}\n        {isExpanded && showDetails && (\n          <div className=\"px-3 py-2 space-y-2 max-w-xs\">\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div>\n                <span className=\"text-gray-400\">FPS:</span>\n                <span className={`ml-1 ${getStatusColor('fps', metrics.fps)}`}>\n                  {metrics.fps}\n                </span>\n              </div>\n              \n              <div>\n                <span className=\"text-gray-400\">Memory:</span>\n                <span className={`ml-1 ${getStatusColor('memoryUsage', metrics.memoryUsage)}`}>\n                  {metrics.memoryUsage}MB\n                </span>\n              </div>\n              \n              <div>\n                <span className=\"text-gray-400\">Renders:</span>\n                <span className=\"ml-1 text-blue-400\">{metrics.renderCount}</span>\n              </div>\n              \n              <div>\n                <span className=\"text-gray-400\">Load:</span>\n                <span className=\"ml-1 text-blue-400\">{metrics.loadTime}ms</span>\n              </div>\n              \n              <div>\n                <span className=\"text-gray-400\">DOM:</span>\n                <span className={`ml-1 ${getStatusColor('domNodes', metrics.domNodes)}`}>\n                  {metrics.domNodes}\n                </span>\n              </div>\n              \n              <div>\n                <span className=\"text-gray-400\">Network:</span>\n                <span className={`ml-1 ${getStatusColor('onlineStatus', metrics.onlineStatus)}`}>\n                  {metrics.onlineStatus ? '●' : '○'}\n                </span>\n              </div>\n            </div>\n            \n            {metrics.connectionType && metrics.connectionType !== 'unknown' && (\n              <div className=\"text-gray-400 text-xs\">\n                Connection: {metrics.connectionType}\n              </div>\n            )}\n            \n            {/* Performance warnings */}\n            <div className=\"space-y-1 text-xs\">\n              {metrics.fps < 30 && (\n                <div className=\"text-red-400\">⚠️ Low FPS detected</div>\n              )}\n              {metrics.memoryUsage > 100 && (\n                <div className=\"text-red-400\">⚠️ High memory usage</div>\n              )}\n              {metrics.domNodes > 2000 && (\n                <div className=\"text-yellow-400\">⚠️ Many DOM nodes</div>\n              )}\n              {!metrics.onlineStatus && (\n                <div className=\"text-red-400\">⚠️ Offline</div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n});\n\nPerformanceMonitor.displayName = 'PerformanceMonitor'; "],"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","ignoreList":[]}