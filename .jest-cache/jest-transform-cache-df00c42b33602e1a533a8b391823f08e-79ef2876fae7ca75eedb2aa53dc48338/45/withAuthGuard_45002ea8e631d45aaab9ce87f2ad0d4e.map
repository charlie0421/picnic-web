{"version":3,"names":["cov_1hesencwfy","actualCoverage","s","withAuthGuard","f","withOptionalAuth","withRequireAuth","WrappedComponent","options","b","redirectUrl","fallback","FallbackComponent","loadingComponent","LoadingComponent","onAuthRequired","onAuthSuccess","requireAuth","AuthGuardedComponent","props","isAuthenticated","isLoading","user","_authprovider","useAuth","router","_navigation","useRouter","pathname","usePathname","showLoginRequired","_Dialog","useLoginRequired","t","_languageStore","useLanguageStore","hasCheckedAuth","setHasCheckedAuth","_react","useState","useEffect","checkAuth","currentRedirectUrl","_authredirect","saveRedirectUrl","confirmed","title","description","back","_jsxruntime","jsx","className","jsxs","displayName","name"],"sources":["/Users/cheolhyun/Repositories/picnic-web/components/auth/withAuthGuard.tsx"],"sourcesContent":["'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from '@/lib/supabase/auth-provider';\nimport { useLoginRequired } from '@/components/ui/Dialog';\nimport { saveRedirectUrl } from '@/utils/auth-redirect';\nimport { useLanguageStore } from '@/stores/languageStore';\n\nexport interface WithAuthGuardOptions {\n  redirectUrl?: string;\n  fallback?: React.ComponentType;\n  loadingComponent?: React.ComponentType;\n  onAuthRequired?: (redirectUrl?: string) => void;\n  onAuthSuccess?: () => void;\n  requireAuth?: boolean;\n}\n\nexport function withAuthGuard<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  options: WithAuthGuardOptions = {},\n) {\n  const {\n    redirectUrl,\n    fallback: FallbackComponent,\n    loadingComponent: LoadingComponent,\n    onAuthRequired,\n    onAuthSuccess,\n    requireAuth = true,\n  } = options;\n\n  const AuthGuardedComponent = (props: P) => {\n    const { isAuthenticated, isLoading, user } = useAuth();\n    const router = useRouter();\n    const pathname = usePathname();\n    const showLoginRequired = useLoginRequired();\n    const { t } = useLanguageStore();\n    const [hasCheckedAuth, setHasCheckedAuth] = useState(false);\n\n    useEffect(() => {\n      const checkAuth = async () => {\n        // 로딩 중이면 대기\n        if (isLoading) {\n          return;\n        }\n\n        // 인증이 필요하지 않으면 통과\n        if (!requireAuth) {\n          setHasCheckedAuth(true);\n          return;\n        }\n\n        // 인증되어 있으면 성공 콜백 실행\n        if (isAuthenticated && user) {\n          if (onAuthSuccess) {\n            onAuthSuccess();\n          }\n          setHasCheckedAuth(true);\n          return;\n        }\n\n        // 인증되지 않았으면 로그인 다이얼로그 표시\n        const currentRedirectUrl = redirectUrl || pathname;\n\n        // 리다이렉트 URL 미리 저장\n        if (currentRedirectUrl) {\n          saveRedirectUrl(currentRedirectUrl);\n        }\n\n        if (onAuthRequired) {\n          onAuthRequired(currentRedirectUrl);\n          return;\n        }\n\n        // 기본 로그인 다이얼로그 표시\n        const confirmed = await showLoginRequired({\n          redirectUrl: currentRedirectUrl,\n          title: t('dialog.login_required.title') || '로그인이 필요합니다',\n          description:\n            t('dialog.login_required.description') ||\n            '이 페이지에 접근하려면 로그인이 필요합니다. 로그인 페이지로 이동하시겠습니까?',\n        });\n\n        if (!confirmed) {\n          // 사용자가 로그인을 거부한 경우 이전 페이지로 이동\n          router.back();\n        }\n      };\n\n      checkAuth();\n    }, [\n      isLoading,\n      isAuthenticated,\n      user,\n      pathname,\n      router,\n      showLoginRequired,\n      t,\n    ]);\n\n    // 로딩 중\n    if (isLoading || !hasCheckedAuth) {\n      if (LoadingComponent) {\n        return <LoadingComponent />;\n      }\n\n      return (\n        <div className='flex items-center justify-center min-h-screen'>\n          <div className='animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600'></div>\n        </div>\n      );\n    }\n\n    // 인증이 필요하지만 인증되지 않은 경우\n    if (requireAuth && !isAuthenticated) {\n      if (FallbackComponent) {\n        return <FallbackComponent />;\n      }\n\n      return (\n        <div className='flex items-center justify-center min-h-screen'>\n          <div className='text-center'>\n            <h2 className='text-xl font-semibold text-gray-900 dark:text-white mb-2'>\n              {t('dialog.login_required.title') || '로그인이 필요합니다'}\n            </h2>\n            <p className='text-gray-600 dark:text-gray-400'>\n              {t('dialog.login_required.description') ||\n                '이 페이지에 접근하려면 로그인이 필요합니다.'}\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    // 인증 통과 - 원래 컴포넌트 렌더링\n    return <WrappedComponent {...props} />;\n  };\n\n  // 디스플레이 이름 설정 (디버깅용)\n  AuthGuardedComponent.displayName = `withAuthGuard(${\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\n  })`;\n\n  return AuthGuardedComponent;\n}\n\n// 편의 HOC들\nexport function withRequireAuth<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  options?: Omit<WithAuthGuardOptions, 'requireAuth'>,\n) {\n  return withAuthGuard(WrappedComponent, { ...options, requireAuth: true });\n}\n\nexport function withOptionalAuth<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  options?: Omit<WithAuthGuardOptions, 'requireAuth'>,\n) {\n  return withAuthGuard(WrappedComponent, { ...options, requireAuth: false });\n}\n"],"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","ignoreList":[]}