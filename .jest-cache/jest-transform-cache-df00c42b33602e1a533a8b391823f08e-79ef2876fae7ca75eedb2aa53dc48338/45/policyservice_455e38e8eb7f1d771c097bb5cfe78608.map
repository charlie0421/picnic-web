{"version":3,"names":["getAllPoliciesByType","cov_1d4odfl30q","f","s","getPolicyByTypeAndLanguage","getPolicyForCurrentLanguage","type","language","supabase","_supabaseserverclient","createClient","data","error","from","select","eq","is","order","ascending","limit","single","b","console","currentLang","policyLanguage","policy","warn"],"sources":["/Users/cheolhyun/Repositories/picnic-web/lib/data-fetching/policy-service.ts"],"sourcesContent":["import { createClient } from '@/utils/supabase-server-client';\nimport { Database } from '@/types/supabase';\n\ntype PolicyLanguage = 'ko' | 'en';\ntype PolicyType = 'privacy' | 'terms';\n\ninterface PolicyData {\n  id: number;\n  type: string | null;\n  language: PolicyLanguage | null;\n  content: string;\n  version: string;\n  created_at: string;\n  updated_at: string;\n}\n\n/**\n * 정책 데이터를 가져오는 함수\n * @param type - 정책 타입 ('privacy' | 'terms')\n * @param language - 언어 코드 ('ko' | 'en')\n * @returns 정책 데이터 또는 null\n */\nexport async function getPolicyByTypeAndLanguage(\n  type: PolicyType,\n  language: PolicyLanguage\n): Promise<PolicyData | null> {\n  try {\n    const supabase = await createClient();\n    \n    const { data, error } = await supabase\n      .from('policy')\n      .select('*')\n      .eq('type', type)\n      .eq('language', language)\n      .is('deleted_at', null)\n      .order('version', { ascending: false })\n      .limit(1)\n      .single();\n\n    if (error) {\n      console.error(`정책 데이터 조회 실패 (${type}, ${language}):`, error);\n      return null;\n    }\n\n    return data;\n  } catch (error) {\n    console.error(`정책 데이터 조회 예외 (${type}, ${language}):`, error);\n    return null;\n  }\n}\n\n/**\n * 현재 언어에 맞는 정책 데이터를 가져오는 함수\n * 한글이면 'ko', 그 외는 'en' 사용\n * @param type - 정책 타입 ('privacy' | 'terms')\n * @param currentLang - 현재 언어 코드\n * @returns 정책 데이터 또는 null\n */\nexport async function getPolicyForCurrentLanguage(\n  type: PolicyType,\n  currentLang: string\n): Promise<PolicyData | null> {\n  // 한글이면 'ko', 그 외는 'en' 사용\n  const policyLanguage: PolicyLanguage = currentLang === 'ko' ? 'ko' : 'en';\n  \n  let policy = await getPolicyByTypeAndLanguage(type, policyLanguage);\n  \n  // 만약 해당 언어의 정책이 없다면 영어 버전으로 폴백\n  if (!policy && policyLanguage === 'ko') {\n    console.warn(`한글 ${type} 정책을 찾을 수 없어 영어 버전으로 폴백합니다.`);\n    policy = await getPolicyByTypeAndLanguage(type, 'en');\n  }\n  \n  return policy;\n}\n\n/**\n * 모든 언어의 특정 정책 타입 데이터를 가져오는 함수\n * @param type - 정책 타입 ('privacy' | 'terms')\n * @returns 정책 데이터 배열\n */\nexport async function getAllPoliciesByType(type: PolicyType): Promise<PolicyData[]> {\n  try {\n    const supabase = await createClient();\n    \n    const { data, error } = await supabase\n      .from('policy')\n      .select('*')\n      .eq('type', type)\n      .is('deleted_at', null)\n      .order('language', { ascending: true })\n      .order('version', { ascending: false });\n\n    if (error) {\n      console.error(`모든 ${type} 정책 조회 실패:`, error);\n      return [];\n    }\n\n    return data || [];\n  } catch (error) {\n    console.error(`모든 ${type} 정책 조회 예외:`, error);\n    return [];\n  }\n} "],"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","ignoreList":[]}