{"version":3,"names":["cov_1a305own5h","actualCoverage","s","useVoteSubmit","f","isSubmitting","setIsSubmitting","_react","useState","error","setError","submitVote","voteData","result","_retry","withNetworkRetry","response","fetch","method","headers","body","JSON","stringify","ok","b","json","errorMessage","isBusinessLogicError","status","_error","AppError","ErrorCategory","VALIDATION","SERVER","ErrorSeverity","MEDIUM","originalError","isRetryable","success","data","message","console","clearError","useCallback"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteSubmit.ts"],"sourcesContent":["\"use client\";\n\nimport { useState, useCallback } from \"react\";\nimport { AppError, ErrorCategory, ErrorSeverity } from \"@/utils/error\";\nimport { withNetworkRetry } from \"@/utils/retry\";\n\ninterface VoteSubmissionData {\n    voteId: number;\n    voteItemId: number;\n    amount: number;\n    userId: string;\n    totalBonusRemain: number;\n}\n\ninterface VoteSubmissionResponse {\n    success: boolean;\n    data?: any;\n    message?: string;\n    error?: string;\n}\n\n/**\n * 투표 제출을 처리하는 훅 (재시도 로직 포함)\n * \n * 새로운 재시도 시스템을 사용하여 네트워크 오류나 일시적인 서버 오류에 대해\n * 자동으로 재시도를 수행합니다.\n */\nexport function useVoteSubmit() {\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n\n    const submitVote = async (\n        voteData: VoteSubmissionData,\n    ): Promise<VoteSubmissionResponse | null> => {\n        setIsSubmitting(true);\n        setError(null);\n\n        const result = await withNetworkRetry(async () => {\n            const response = await fetch(\"/api/vote/submit\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify(voteData),\n            });\n\n            if (!response.ok) {\n                const result = await response.json();\n                const errorMessage = result.error || \"Failed to submit vote\";\n                \n                // 비즈니스 로직 에러 (잔액 부족, 중복 투표 등)는 재시도하지 않음\n                const isBusinessLogicError = response.status === 400 || response.status === 409;\n                \n                throw new AppError(\n                    errorMessage,\n                    isBusinessLogicError ? ErrorCategory.VALIDATION : \n                    response.status >= 500 ? ErrorCategory.SERVER : ErrorCategory.VALIDATION,\n                    ErrorSeverity.MEDIUM,\n                    response.status,\n                    { \n                        originalError: result,\n                        isRetryable: !isBusinessLogicError \n                    }\n                );\n            }\n\n            return response.json() as Promise<VoteSubmissionResponse>;\n        }, 'submitVote');\n\n        setIsSubmitting(false);\n\n        if (result.success) {\n            return result.data!;\n        } else {\n            const errorMessage = result.error?.message || \"투표 제출 중 오류가 발생했습니다.\";\n            setError(errorMessage);\n            console.error(\"[useVoteSubmit] 에러:\", result.error);\n            return null;\n        }\n    };\n\n    const clearError = useCallback(() => {\n        setError(null);\n    }, []);\n\n    return {\n        submitVote,\n        isSubmitting,\n        error,\n        clearError,\n    };\n}\n"],"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","ignoreList":[]}