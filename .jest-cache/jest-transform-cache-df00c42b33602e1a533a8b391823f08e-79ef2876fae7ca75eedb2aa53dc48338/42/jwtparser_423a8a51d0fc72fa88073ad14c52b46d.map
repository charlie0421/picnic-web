{"version":3,"names":["cov_1gfgqupevh","actualCoverage","s","debugJWTInfo","f","debugLocalCookies","getInstantUserFromCookies","getTokenExpiry","isTokenExpiringSoon","decodeJWTPayload","token","parts","split","length","b","payload","replace","padded","repeat","JSON","parse","atob","error","console","warn","getSupabaseTokenFromCookies","document","log","isLocal","window","location","hostname","protocol","port","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","substring","urlParts","projectId","allCookies","cookie","forEach","index","name","trim","chunkPattern","chunks","value","startsWith","chunkMatch","match","chunkIndex","decodeURIComponent","Object","keys","sort","sortedChunkKeys","a","parseInt","combinedValue","key","totalChunks","totalLength","preview","processedValue","base64Data","원본길이","디코딩후길이","base64Error","parsed","hasAccessToken","access_token","hasRefreshToken","refresh_token","tokenType","token_type","jsonError","tokenPatterns","pattern","includes","decoded","expiresAt","expires_at","parseError","getSupabaseTokenFromStorage","storedData","localStorage","getItem","allKeys","i","endsWith","push","extractUserFromJWT","sub","email","exp","iat","provider","app_metadata","user","id","user_metadata","aud","created_at","Date","toISOString","updated_at","email_confirmed_at","phone_confirmed_at","confirmation_sent_at","recovery_sent_at","invited_at","action_link","role","now","Math","floor","expired","expiredSecondsAgo","userId","expiry","thirtyMinutes","getTime","map","c","localStorageKeys","supabaseKeys","cookieToken","storageToken","success","message","expiringSoon","result","tokenSource","prefix","isJWT","isExpired","isValid","cookies","analysis","total","supabaseCookies","authCookies","otherCookies","valueLength","hasValue","debugJWT"],"sources":["/Users/cheolhyun/Repositories/picnic-web/utils/jwt-parser.ts"],"sourcesContent":["// JWT 토큰을 쿠키에서 직접 파싱하여 즉시 사용자 정보 추출\n\nimport type { User } from '@supabase/supabase-js';\n\n/**\n * JWT 토큰을 디코딩하여 payload 추출\n */\nfunction decodeJWTPayload(token: string): any | null {\n  try {\n    const parts = token.split('.');\n    if (parts.length !== 3) return null;\n\n    // Base64 URL 디코딩\n    const payload = parts[1]\n      .replace(/-/g, '+')\n      .replace(/_/g, '/');\n    \n    // 패딩 추가\n    const padded = payload + '='.repeat((4 - payload.length % 4) % 4);\n    \n    return JSON.parse(atob(padded));\n  } catch (error) {\n    console.warn('🔍 [JWT Parser] JWT 디코딩 실패:', error);\n    return null;\n  }\n}\n\n/**\n * 쿠키에서 Supabase 인증 토큰 찾기 (로컬 환경 대응 강화)\n */\nfunction getSupabaseTokenFromCookies(): string | null {\n  if (typeof document === 'undefined') return null;\n\n  try {\n    console.log('🔍 [JWT Parser] 쿠키 검색 시작 (로컬 환경 대응)');\n    \n    // 환경 정보 확인\n    const isLocal = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    const protocol = window.location.protocol;\n    const hostname = window.location.hostname;\n    \n    console.log('🌐 [JWT Parser] 환경 정보:', {\n      hostname,\n      protocol,\n      isLocal,\n      port: window.location.port\n    });\n\n    // Supabase 프로젝트 ID 추출 (여러 방법 시도)\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (!supabaseUrl) {\n      console.warn('🔍 [JWT Parser] NEXT_PUBLIC_SUPABASE_URL 없음');\n      return null;\n    }\n    \n    console.log('🔗 [JWT Parser] Supabase URL:', supabaseUrl.substring(0, 30) + '...');\n    \n    const urlParts = supabaseUrl.split('.');\n    const projectId = urlParts[0]?.split('://')[1];\n    if (!projectId) {\n      console.warn('🔍 [JWT Parser] 프로젝트 ID 추출 실패');\n      return null;\n    }\n\n    console.log('🏷️ [JWT Parser] 프로젝트 ID:', projectId);\n\n    // 모든 쿠키 로깅 (디버깅용)\n    const allCookies = document.cookie.split(';');\n    console.log('🍪 [JWT Parser] 전체 쿠키 목록:');\n    allCookies.forEach((cookie, index) => {\n      const [name] = cookie.trim().split('=');\n      console.log(`  ${index + 1}. ${name}`);\n    });\n\n    // 🎯 분할된 쿠키 우선 처리 (.0, .1, .2 등)\n    const chunkPattern = `sb-${projectId}-auth-token`;\n    const chunks: { [key: string]: string } = {};\n    \n    console.log('🧩 [JWT Parser] 분할된 쿠키 검색:', chunkPattern);\n    \n    for (const cookie of allCookies) {\n      const [name, value] = cookie.trim().split('=');\n      \n      if (name && name.startsWith(chunkPattern) && value) {\n        // 분할된 쿠키 패턴 확인 (.0, .1, .2 등)\n        const chunkMatch = name.match(/\\.(\\d+)$/);\n        if (chunkMatch) {\n          const chunkIndex = chunkMatch[1];\n          chunks[chunkIndex] = decodeURIComponent(value);\n          console.log(`🧩 [JWT Parser] 쿠키 조각 발견: ${name} (${value.length}자)`);\n        }\n      }\n    }\n\n    // 분할된 쿠키 조합\n    if (Object.keys(chunks).length > 0) {\n      console.log('🔧 [JWT Parser] 분할된 쿠키 조합 시작:', Object.keys(chunks).sort());\n      \n      // 순서대로 정렬하여 조합\n      const sortedChunkKeys = Object.keys(chunks).sort((a, b) => parseInt(a) - parseInt(b));\n      let combinedValue = '';\n      \n      for (const key of sortedChunkKeys) {\n        combinedValue += chunks[key];\n        console.log(`🔧 [JWT Parser] 조각 ${key} 추가: ${chunks[key].substring(0, 20)}... (총 길이: ${combinedValue.length})`);\n      }\n      \n      console.log('✅ [JWT Parser] 분할된 쿠키 조합 완료:', {\n        totalChunks: sortedChunkKeys.length,\n        totalLength: combinedValue.length,\n        preview: combinedValue.substring(0, 50) + '...'\n      });\n\n      // base64- 접두사 제거 및 디코딩 시도\n      let processedValue = combinedValue;\n      \n      if (processedValue.startsWith('base64-')) {\n        console.log('🔍 [JWT Parser] base64- 접두사 발견, 제거 후 디코딩 시도');\n        const base64Data = processedValue.substring(7); // 'base64-' 제거\n        \n        try {\n          processedValue = atob(base64Data);\n          console.log('✅ [JWT Parser] base64 디코딩 성공:', {\n            원본길이: base64Data.length,\n            디코딩후길이: processedValue.length,\n            preview: processedValue.substring(0, 50) + '...'\n          });\n        } catch (base64Error) {\n          console.warn('⚠️ [JWT Parser] base64 디코딩 실패, 원본 사용:', base64Error);\n        }\n      }\n\n      // JWT 패턴 확인\n      if (processedValue.startsWith('eyJ')) {\n        console.log('🎯 [JWT Parser] 분할된 쿠키에서 JWT 발견!');\n        return processedValue;\n      }\n\n      // JSON 파싱 시도\n      try {\n        const parsed = JSON.parse(processedValue);\n        console.log('✅ [JWT Parser] 분할된 쿠키 JSON 파싱 성공:', {\n          hasAccessToken: !!parsed.access_token,\n          hasRefreshToken: !!parsed.refresh_token,\n          tokenType: parsed.token_type\n        });\n        \n        if (parsed.access_token) {\n          console.log('🎯 [JWT Parser] 분할된 쿠키에서 access_token 추출 성공!');\n          return parsed.access_token;\n        }\n      } catch (jsonError) {\n        console.warn('⚠️ [JWT Parser] 분할된 쿠키 JSON 파싱 실패:', jsonError);\n      }\n    }\n\n    // 다양한 패턴으로 토큰 검색 (기존 로직)\n    const tokenPatterns = [\n      `sb-${projectId}-auth-token`, // 기본 패턴\n      `supabase-auth-token`, // 대안 패턴\n      `sb-auth-token` // 단순 패턴\n    ];\n\n    console.log('🔍 [JWT Parser] 검색할 토큰 패턴들:', tokenPatterns);\n    \n    for (const pattern of tokenPatterns) {\n      console.log(`🔎 [JWT Parser] \"${pattern}\" 패턴으로 검색 중...`);\n      \n      for (const cookie of allCookies) {\n        const [name, value] = cookie.trim().split('=');\n        \n        if (name && (name === pattern || name.startsWith(pattern)) && value) {\n          // 분할된 쿠키는 이미 처리했으므로 건너뛰기\n          if (name.includes('.')) continue;\n          \n          console.log(`✅ [JWT Parser] 쿠키 매칭: ${name}`);\n          \n          try {\n            // URL 디코딩 후 JSON 파싱\n            const decoded = decodeURIComponent(value);\n            console.log('🔍 [JWT Parser] 디코딩된 쿠키 길이:', decoded.length);\n            \n            let parsed: any;\n            \n            // JSON 파싱 시도\n            try {\n              parsed = JSON.parse(decoded);\n              console.log('✅ [JWT Parser] JSON 파싱 성공:', {\n                hasAccessToken: !!parsed.access_token,\n                hasRefreshToken: !!parsed.refresh_token,\n                tokenType: parsed.token_type,\n                expiresAt: parsed.expires_at\n              });\n            } catch (jsonError) {\n              // JSON이 아닌 경우 직접 토큰일 수 있음\n              console.log('🔍 [JWT Parser] JSON 파싱 실패, 직접 토큰으로 시도');\n              \n              // JWT 패턴 확인 (eyJ로 시작하는지)\n              if (decoded.startsWith('eyJ')) {\n                console.log('✅ [JWT Parser] 직접 JWT 토큰 발견');\n                return decoded;\n              }\n              \n              console.warn('🔍 [JWT Parser] JSON 파싱 실패:', jsonError);\n              continue;\n            }\n            \n            // access_token 추출\n            if (parsed.access_token) {\n              console.log('🍪 [JWT Parser] 쿠키에서 토큰 추출 성공');\n              return parsed.access_token;\n            } else {\n              console.warn('🔍 [JWT Parser] access_token 필드 없음:', Object.keys(parsed));\n            }\n          } catch (parseError) {\n            console.warn('🔍 [JWT Parser] 쿠키 파싱 실패:', parseError);\n          }\n        }\n      }\n    }\n\n    // 로컬 환경 특별 처리: 모든 sb- 쿠키 검색 (분할 쿠키 제외)\n    if (isLocal) {\n      console.log('🏠 [JWT Parser] 로컬 환경 - 모든 sb- 쿠키 검색');\n      \n      for (const cookie of allCookies) {\n        const [name, value] = cookie.trim().split('=');\n        \n        if (name && name.includes('sb-') && name.includes('auth') && !name.includes('.') && value) {\n          console.log(`🔍 [JWT Parser] 로컬 환경에서 발견된 sb- 쿠키: ${name}`);\n          \n          try {\n            const decoded = decodeURIComponent(value);\n            \n            // JWT 패턴 확인\n            if (decoded.startsWith('eyJ')) {\n              console.log('✅ [JWT Parser] 로컬 환경에서 직접 JWT 발견');\n              return decoded;\n            }\n            \n            // JSON 파싱 시도\n            try {\n              const parsed = JSON.parse(decoded);\n              if (parsed.access_token) {\n                console.log('✅ [JWT Parser] 로컬 환경에서 토큰 추출 성공');\n                return parsed.access_token;\n              }\n            } catch {\n              // JSON이 아니면 무시\n            }\n          } catch (error) {\n            console.warn('🔍 [JWT Parser] 로컬 쿠키 파싱 오류:', error);\n          }\n        }\n      }\n    }\n\n    console.log('❌ [JWT Parser] 유효한 토큰을 찾을 수 없음');\n    return null;\n  } catch (error) {\n    console.warn('🔍 [JWT Parser] 쿠키 검색 중 오류:', error);\n    return null;\n  }\n}\n\n/**\n * localStorage에서 Supabase 토큰 찾기\n */\nfunction getSupabaseTokenFromStorage(): string | null {\n  try {\n    console.log('🔍 [JWT Parser] localStorage 검색 시작');\n    \n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    if (!supabaseUrl) {\n      console.warn('🔍 [JWT Parser] NEXT_PUBLIC_SUPABASE_URL 없음 (localStorage)');\n      return null;\n    }\n    \n    const urlParts = supabaseUrl.split('.');\n    const projectId = urlParts[0]?.split('://')[1];\n    \n    if (projectId) {\n      const key = `sb-${projectId}-auth-token`;\n      const storedData = localStorage.getItem(key);\n      \n      if (storedData) {\n        console.log(`✅ [JWT Parser] localStorage에서 토큰 발견: ${key}`);\n        \n        try {\n          const parsed = JSON.parse(storedData);\n          if (parsed?.access_token) {\n            console.log('✅ [JWT Parser] localStorage에서 access_token 추출 성공');\n            return parsed.access_token;\n          } else {\n            console.warn('🔍 [JWT Parser] localStorage 데이터에 access_token 없음:', Object.keys(parsed));\n          }\n        } catch (parseError) {\n          console.warn('⚠️ [JWT Parser] localStorage 데이터 파싱 실패:', parseError);\n          // 직접 JWT일 수 있음\n          if (storedData.startsWith('eyJ')) {\n            console.log('✅ [JWT Parser] localStorage에서 직접 JWT 발견');\n            return storedData;\n          }\n        }\n      }\n    }\n\n    // 모든 Supabase 키 확인\n    console.log('🔍 [JWT Parser] 모든 localStorage sb- 키 검색');\n    const allKeys: string[] = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith('sb-') && key.endsWith('-auth-token')) {\n        allKeys.push(key);\n        \n        try {\n          const storedData = localStorage.getItem(key);\n          if (storedData) {\n            console.log(`🔍 [JWT Parser] localStorage 키 확인: ${key}`);\n            \n            // JWT 직접 확인\n            if (storedData.startsWith('eyJ')) {\n              console.log(`✅ [JWT Parser] localStorage에서 직접 JWT 발견: ${key}`);\n              return storedData;\n            }\n            \n            // JSON 파싱 시도\n            try {\n              const parsed = JSON.parse(storedData);\n              if (parsed?.access_token) {\n                console.log(`✅ [JWT Parser] localStorage에서 토큰 추출 성공: ${key}`);\n                return parsed.access_token;\n              }\n            } catch {\n              // JSON이 아니면 무시\n            }\n          }\n        } catch (error) {\n          console.warn(`⚠️ [JWT Parser] localStorage 키 처리 실패: ${key}`, error);\n        }\n      }\n    }\n\n    console.log('🔍 [JWT Parser] localStorage 검색된 키:', allKeys);\n    console.log('❌ [JWT Parser] localStorage에서 유효한 토큰을 찾을 수 없음');\n    return null;\n  } catch (error) {\n    console.error('❌ [JWT Parser] localStorage 검색 중 오류:', error);\n    return null;\n  }\n}\n\n/**\n * JWT 토큰에서 사용자 정보 추출\n */\nfunction extractUserFromJWT(token: string): User | null {\n  try {\n    const payload = decodeJWTPayload(token);\n    if (!payload) return null;\n\n    console.log('🔍 [JWT Parser] JWT payload 확인:', {\n      sub: payload.sub?.substring(0, 8) + '...',\n      email: payload.email,\n      exp: payload.exp,\n      iat: payload.iat,\n      provider: payload.app_metadata?.provider\n    });\n\n    // JWT payload에서 사용자 정보 추출\n    const user: User = {\n      id: payload.sub,\n      email: payload.email,\n      user_metadata: payload.user_metadata || {},\n      app_metadata: payload.app_metadata || {},\n      aud: payload.aud,\n      created_at: payload.created_at || new Date().toISOString(),\n      updated_at: payload.updated_at || new Date().toISOString(),\n      email_confirmed_at: payload.email_confirmed_at,\n      phone_confirmed_at: payload.phone_confirmed_at,\n      confirmation_sent_at: payload.confirmation_sent_at,\n      recovery_sent_at: payload.recovery_sent_at,\n      invited_at: payload.invited_at,\n      action_link: payload.action_link,\n      role: payload.role\n    };\n\n    // 토큰 만료 시간 확인\n    const now = Math.floor(Date.now() / 1000);\n    if (payload.exp && payload.exp < now) {\n      console.warn('🔍 [JWT Parser] 토큰이 만료됨:', {\n        exp: payload.exp,\n        now,\n        expired: payload.exp < now,\n        expiredSecondsAgo: now - payload.exp\n      });\n      return null;\n    }\n\n    console.log('✅ [JWT Parser] 사용자 정보 추출 성공:', {\n      userId: user.id?.substring(0, 8) + '...',\n      email: user.email,\n      provider: user.app_metadata?.provider,\n      exp: payload.exp ? new Date(payload.exp * 1000).toISOString() : 'N/A'\n    });\n\n    return user;\n  } catch (error) {\n    console.warn('🔍 [JWT Parser] 사용자 정보 추출 실패:', error);\n    return null;\n  }\n}\n\n/**\n * 쿠키와 localStorage에서 즉시 사용자 정보 추출 (네트워크 요청 없음)\n */\nexport function getInstantUserFromCookies(): User | null {\n  console.log('🚀 [JWT Parser] 즉시 사용자 정보 추출 시작 (쿠키 + localStorage)');\n  \n  // 1순위: 쿠키에서 토큰 찾기\n  let token = getSupabaseTokenFromCookies();\n  \n  // 2순위: localStorage에서 토큰 찾기\n  if (!token) {\n    console.log('🔄 [JWT Parser] 쿠키에서 토큰 없음 → localStorage 확인');\n    token = getSupabaseTokenFromStorage();\n  }\n  \n  if (!token) {\n    console.log('❌ [JWT Parser] 쿠키와 localStorage 모두에서 토큰 없음');\n    return null;\n  }\n\n  console.log('🎯 [JWT Parser] 토큰 발견 - JWT 파싱 시작');\n  return extractUserFromJWT(token);\n}\n\n/**\n * 토큰 만료 시간 확인\n */\nexport function getTokenExpiry(): Date | null {\n  const token = getSupabaseTokenFromCookies();\n  if (!token) return null;\n\n  const payload = decodeJWTPayload(token);\n  if (!payload?.exp) return null;\n\n  return new Date(payload.exp * 1000);\n}\n\n/**\n * 토큰이 곧 만료되는지 확인 (30분 이내)\n */\nexport function isTokenExpiringSoon(): boolean {\n  const expiry = getTokenExpiry();\n  if (!expiry) return false;\n\n  const now = new Date();\n  const thirtyMinutes = 30 * 60 * 1000; // 30분\n  \n  return (expiry.getTime() - now.getTime()) < thirtyMinutes;\n}\n\n/**\n * 개발자 디버깅 함수 - 브라우저 콘솔용 (로컬 환경 특화)\n */\nexport function debugJWTInfo() {\n  if (typeof window === 'undefined') return;\n\n  console.log('🔍 [JWT Debug] 환경 정보:', {\n    hostname: window.location.hostname,\n    protocol: window.location.protocol,\n    port: window.location.port,\n    isLocal: window.location.hostname === 'localhost',\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL?.substring(0, 30) + '...'\n  });\n\n  // 모든 쿠키 출력\n  const allCookies = document.cookie.split(';');\n  console.log('🍪 [JWT Debug] 모든 쿠키:', allCookies.map(c => c.trim().split('=')[0]));\n\n  // localStorage 정보 출력\n  console.log('💾 [JWT Debug] localStorage 정보:');\n  const localStorageKeys: string[] = [];\n  const supabaseKeys: string[] = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    const key = localStorage.key(i);\n    if (key) {\n      localStorageKeys.push(key);\n      if (key.startsWith('sb-') && key.includes('auth')) {\n        supabaseKeys.push(key);\n      }\n    }\n  }\n  console.log(`💾 [JWT Debug] 총 localStorage 키: ${localStorageKeys.length}개, Supabase 인증 키: ${supabaseKeys.length}개`);\n\n  // 쿠키에서 토큰 시도\n  const cookieToken = getSupabaseTokenFromCookies();\n  console.log('🍪 [JWT Debug] 쿠키 토큰:', cookieToken ? '✅ 발견' : '❌ 없음');\n  \n  // localStorage에서 토큰 시도\n  const storageToken = getSupabaseTokenFromStorage();\n  console.log('💾 [JWT Debug] localStorage 토큰:', storageToken ? '✅ 발견' : '❌ 없음');\n\n  // 최종 토큰 결정\n  const token = cookieToken || storageToken;\n  if (!token) {\n    console.log('❌ [JWT Debug] 토큰 없음 (쿠키와 localStorage 모두)');\n    return { success: false, message: '토큰 없음' };\n  }\n\n  console.log('🎯 [JWT Debug] 최종 선택된 토큰 소스:', cookieToken ? '쿠키' : 'localStorage');\n\n  const payload = decodeJWTPayload(token);\n  const user = extractUserFromJWT(token);\n  const expiry = getTokenExpiry();\n  const expiringSoon = isTokenExpiringSoon();\n\n  const result = {\n    success: true,\n    tokenSource: cookieToken ? 'cookie' : 'localStorage',\n    token: {\n      length: token.length,\n      prefix: token.substring(0, 20) + '...',\n      isJWT: token.startsWith('eyJ')\n    },\n    payload: payload ? {\n      sub: payload.sub?.substring(0, 8) + '...',\n      email: payload.email,\n      exp: payload.exp,\n      iat: payload.iat,\n      provider: payload.app_metadata?.provider,\n      isExpired: payload.exp ? (Math.floor(Date.now() / 1000) > payload.exp) : null\n    } : null,\n    user: user ? {\n      id: user.id?.substring(0, 8) + '...',\n      email: user.email,\n      provider: user.app_metadata?.provider\n    } : null,\n    expiry: expiry?.toISOString(),\n    expiringSoon,\n    isValid: !!user\n  };\n\n  console.log('🔍 [JWT Debug] 완전한 토큰 정보:', result);\n  return result;\n}\n\n/**\n * 로컬 환경 전용 쿠키 리스트 함수\n */\nexport function debugLocalCookies() {\n  if (typeof window === 'undefined') return;\n\n  console.log('🏠 [Local Debug] 로컬 환경 쿠키 분석');\n  \n  const cookies = document.cookie.split(';');\n  const analysis = {\n    total: cookies.length,\n    supabaseCookies: [],\n    authCookies: [],\n    otherCookies: []\n  } as any;\n\n  cookies.forEach(cookie => {\n    const [name, value] = cookie.trim().split('=');\n    \n    if (name.includes('sb-')) {\n      analysis.supabaseCookies.push({\n        name,\n        valueLength: value?.length || 0,\n        hasValue: !!value,\n        isJWT: value?.startsWith('eyJ') || false\n      });\n    } else if (name.includes('auth')) {\n      analysis.authCookies.push({ name, valueLength: value?.length || 0 });\n    } else {\n      analysis.otherCookies.push(name);\n    }\n  });\n\n  console.log('🏠 [Local Debug] 쿠키 분석 결과:', analysis);\n  return analysis;\n}\n\n// 브라우저 환경에서 디버깅 함수 등록\nif (typeof window !== 'undefined') {\n  (window as any).debugJWT = debugJWTInfo;\n  (window as any).debugLocalCookies = debugLocalCookies;\n  console.log('🛠️ [JWT Parser] 디버깅 함수 등록:');\n  console.log('  - debugJWT() : JWT 토큰 정보 확인');\n  console.log('  - debugLocalCookies() : 로컬 환경 쿠키 분석');\n} "],"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","ignoreList":[]}