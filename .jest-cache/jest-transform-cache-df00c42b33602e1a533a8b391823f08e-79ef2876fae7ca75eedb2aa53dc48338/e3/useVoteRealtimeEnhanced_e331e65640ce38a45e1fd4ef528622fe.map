{"version":3,"names":["cov_wuktz08uq","actualCoverage","s","useVoteRealtimeEnhanced","options","b","f","voteId","artistVoteId","enabled","pollingInterval","enableDataSync","maxRetries","enableSmartReconnect","enableBatterySaver","onConnectionStatusChange","onVoteUpdate","onError","voteItems","setVoteItems","_react","useState","totalVotes","setTotalVotes","isLoading","setIsLoading","connectionStatus","setConnectionStatus","connectionInfo","setConnectionInfo","status","reconnectAttempts","maxReconnectAttempts","isOnline","window","navigator","onLine","isVisible","document","hidden","lastUpdated","setLastUpdated","error","setError","lastEvent","setLastEvent","eventCount","setEventCount","networkStatus","setNetworkStatus","isSlowConnection","connectionType","batteryStatus","setBatteryStatus","isCharging","level","chargingTime","dischargingTime","isPageVisible","setIsPageVisible","smartReconnectEnabled","setSmartReconnectEnabled","batterySaverEnabled","setBatterySaverEnabled","serviceRef","useRef","eventListenerRef","statusListenerRef","pollingIntervalRef","reconnectTimeoutRef","loadVoteResults","results","_voteStore","useVoteStore","updateNetworkStatus","useCallback","connection","effectiveType","type","prev","process","env","NODE_ENV","console","log","updateBatteryStatus","battery","getBattery","charging","Math","round","warn","updatePageVisibility","shouldReconnect","refreshData","currentResults","getState","Date","length","err","Error","dataSyncCallback","syncVoteId","createEventListener","event","catch","createStatusListener","info","prevInfo","delay","current","clearTimeout","setTimeout","manualReconnect","initializeService","_realtime","VoteRealtimeService","addEventListener","addStatusListener","addDataSyncCallback","subscribeToArtistVote","subscribeToVote","setupPolling","adjustedInterval","max","setInterval","clearPolling","clearInterval","cleanupService","removeEventListener","removeStatusListener","removeDataSyncCallback","unsubscribeAll","toggleSmartReconnect","toggleBatterySaver","useEffect","handleOnline","handleOffline","handleVisibilityChange","handleConnectionChange","isConnected","realtimeService"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteRealtimeEnhanced.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { \n  VoteRealtimeService,\n  VoteRealtimeEvent, \n  ConnectionStatus,\n  ConnectionInfo,\n  VoteEventListener,\n  ConnectionStatusListener,\n  DataSyncCallback\n} from '@/lib/supabase/realtime';\nimport { VoteItem } from '@/types/interfaces';\nimport { useVoteStore } from '@/stores/voteStore';\n\n// 훅 옵션 타입\nexport interface UseVoteRealtimeEnhancedOptions {\n  /** 투표 ID */\n  voteId?: number;\n  /** 아티스트 투표 ID */\n  artistVoteId?: number;\n  /** 실시간 기능 활성화 여부 */\n  enabled?: boolean;\n  /** 폴링 간격 (ms) - 실시간 연결 실패 시 폴백 */\n  pollingInterval?: number;\n  /** 데이터 동기화 활성화 */\n  enableDataSync?: boolean;\n  /** 최대 재연결 시도 횟수 */\n  maxRetries?: number;\n  /** 스마트 재연결 활성화 (페이지 가시성, 네트워크 상태 기반) */\n  enableSmartReconnect?: boolean;\n  /** 배터리 절약 모드 활성화 */\n  enableBatterySaver?: boolean;\n  /** 연결 상태 변경 콜백 */\n  onConnectionStatusChange?: (status: ConnectionStatus, info: ConnectionInfo) => void;\n  /** 투표 업데이트 이벤트 콜백 */\n  onVoteUpdate?: (event: VoteRealtimeEvent) => void;\n  /** 오류 콜백 */\n  onError?: (error: Error) => void;\n}\n\n// 훅 반환 타입\nexport interface UseVoteRealtimeEnhancedReturn {\n  /** 투표 아이템 데이터 */\n  voteItems: VoteItem[] | null;\n  /** 총 투표 수 */\n  totalVotes: number | null;\n  /** 로딩 상태 */\n  isLoading: boolean;\n  /** 현재 연결 상태 */\n  connectionStatus: ConnectionStatus;\n  /** 연결 여부 */\n  isConnected: boolean;\n  /** 연결 정보 */\n  connectionInfo: ConnectionInfo;\n  /** 실시간 서비스 인스턴스 */\n  realtimeService: VoteRealtimeService | null;\n  /** 마지막 업데이트 시간 */\n  lastUpdated: Date | null;\n  /** 오류 정보 */\n  error: Error | null;\n  /** 마지막 수신 이벤트 */\n  lastEvent: VoteRealtimeEvent | null;\n  /** 이벤트 수신 횟수 */\n  eventCount: number;\n  /** 네트워크 상태 */\n  networkStatus: {\n    isOnline: boolean;\n    isSlowConnection: boolean;\n    connectionType: string | null;\n  };\n  /** 배터리 상태 */\n  batteryStatus: {\n    isCharging: boolean | null;\n    level: number | null;\n    chargingTime: number | null;\n    dischargingTime: number | null;\n  };\n  /** 페이지 가시성 */\n  isPageVisible: boolean;\n  /** 수동 재연결 */\n  manualReconnect: () => void;\n  /** 데이터 새로고침 */\n  refreshData: () => Promise<void>;\n  /** 스마트 재연결 토글 */\n  toggleSmartReconnect: () => void;\n  /** 배터리 절약 모드 토글 */\n  toggleBatterySaver: () => void;\n}\n\n/**\n * 고급 오류 처리 및 데이터 관리 기능을 포함한 실시간 투표 훅\n */\nexport function useVoteRealtimeEnhanced(\n  options: UseVoteRealtimeEnhancedOptions = {}\n): UseVoteRealtimeEnhancedReturn {\n  const {\n    voteId,\n    artistVoteId,\n    enabled = true,\n    pollingInterval = 30000,\n    enableDataSync = true,\n    maxRetries = 10,\n    enableSmartReconnect = true,\n    enableBatterySaver = true,\n    onConnectionStatusChange,\n    onVoteUpdate,\n    onError\n  } = options;\n\n  // 기본 상태 관리\n  const [voteItems, setVoteItems] = useState<VoteItem[] | null>(null);\n  const [totalVotes, setTotalVotes] = useState<number | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected');\n  const [connectionInfo, setConnectionInfo] = useState<ConnectionInfo>({\n    status: 'disconnected',\n    reconnectAttempts: 0,\n    maxReconnectAttempts: maxRetries,\n    isOnline: typeof window !== 'undefined' && typeof navigator !== 'undefined' ? navigator.onLine : true,\n    isVisible: typeof window !== 'undefined' && typeof document !== 'undefined' ? !document.hidden : true\n  });\n  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [lastEvent, setLastEvent] = useState<VoteRealtimeEvent | null>(null);\n  const [eventCount, setEventCount] = useState(0);\n\n  // 새로 추가된 상태들\n  const [networkStatus, setNetworkStatus] = useState({\n    isOnline: typeof window !== 'undefined' && navigator ? navigator.onLine : true,\n    isSlowConnection: false,\n    connectionType: null as string | null\n  });\n\n  const [batteryStatus, setBatteryStatus] = useState({\n    isCharging: null as boolean | null,\n    level: null as number | null,\n    chargingTime: null as number | null,\n    dischargingTime: null as number | null\n  });\n\n  const [isPageVisible, setIsPageVisible] = useState(\n    typeof window !== 'undefined' && typeof document !== 'undefined' ? !document.hidden : true\n  );\n\n  const [smartReconnectEnabled, setSmartReconnectEnabled] = useState(enableSmartReconnect);\n  const [batterySaverEnabled, setBatterySaverEnabled] = useState(enableBatterySaver);\n\n  // 서비스 및 리스너 참조\n  const serviceRef = useRef<VoteRealtimeService | null>(null);\n  const eventListenerRef = useRef<VoteEventListener | null>(null);\n  const statusListenerRef = useRef<ConnectionStatusListener | null>(null);\n  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Vote 스토어 접근\n  const { loadVoteResults, results } = useVoteStore();\n\n  // 네트워크 상태 감지\n  const updateNetworkStatus = useCallback(() => {\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') return;\n\n    const isOnline = navigator.onLine;\n    let connectionType = null;\n    let isSlowConnection = false;\n\n    // Connection API 지원 여부 확인\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      connectionType = connection?.effectiveType || connection?.type || null;\n      isSlowConnection = connection?.effectiveType === 'slow-2g' || connection?.effectiveType === '2g';\n    }\n\n    setNetworkStatus({ isOnline, isSlowConnection, connectionType });\n    \n    // ConnectionInfo 업데이트\n    setConnectionInfo(prev => ({ ...prev, isOnline }));\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtimeEnhanced] 네트워크 상태 업데이트:', { isOnline, connectionType, isSlowConnection });\n    }\n  }, []);\n\n  // 배터리 상태 감지\n  const updateBatteryStatus = useCallback(async () => {\n    if (typeof window === 'undefined' || !('getBattery' in navigator)) return;\n\n    try {\n      const battery = await (navigator as any).getBattery();\n      \n      setBatteryStatus({\n        isCharging: battery.charging,\n        level: battery.level,\n        chargingTime: battery.chargingTime,\n        dischargingTime: battery.dischargingTime\n      });\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 배터리 상태 업데이트:', {\n          charging: battery.charging,\n          level: Math.round(battery.level * 100) + '%'\n        });\n      }\n    } catch (error) {\n      console.warn('[useVoteRealtimeEnhanced] 배터리 상태 조회 실패:', error);\n    }\n  }, []);\n\n  // 페이지 가시성 감지\n  const updatePageVisibility = useCallback(() => {\n    if (typeof window === 'undefined' || typeof document === 'undefined') return;\n\n    const isVisible = !document.hidden;\n    setIsPageVisible(isVisible);\n    \n    // ConnectionInfo 업데이트\n    setConnectionInfo(prev => ({ ...prev, isVisible }));\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtimeEnhanced] 페이지 가시성 변경:', isVisible);\n    }\n  }, []);\n\n  // 스마트 재연결 로직\n  const shouldReconnect = useCallback(() => {\n    if (!smartReconnectEnabled) return true;\n\n    // 페이지가 숨겨져 있으면 재연결하지 않음\n    if (!isPageVisible) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 페이지가 숨겨져 있어 재연결 건너뜀');\n      }\n      return false;\n    }\n\n    // 오프라인이면 재연결하지 않음\n    if (!networkStatus.isOnline) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 오프라인 상태여서 재연결 건너뜀');\n      }\n      return false;\n    }\n\n    // 배터리 절약 모드가 활성화되어 있고 배터리가 낮으면 재연결하지 않음\n    if (batterySaverEnabled && batteryStatus.level !== null && !batteryStatus.isCharging) {\n      if (batteryStatus.level < 0.15) { // 15% 미만\n        if (process.env.NODE_ENV === 'development') {\n          console.log('[useVoteRealtimeEnhanced] 배터리 부족으로 재연결 건너뜀');\n        }\n        return false;\n      }\n    }\n\n    // 느린 연결에서는 재연결 간격을 늘림\n    if (networkStatus.isSlowConnection) {\n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 느린 연결 감지, 재연결 지연');\n      }\n      return false; // 이 경우는 별도 로직으로 처리\n    }\n\n    return true;\n  }, [smartReconnectEnabled, isPageVisible, networkStatus, batterySaverEnabled, batteryStatus]);\n\n  // 데이터 새로고침 함수\n  const refreshData = useCallback(async () => {\n    if (!voteId) return;\n    \n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      await loadVoteResults(voteId);\n      const currentResults = useVoteStore.getState().results;\n      \n      setVoteItems(currentResults.voteItems);\n      setTotalVotes(currentResults.totalVotes);\n      setLastUpdated(new Date());\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 데이터 새로고침 완료:', currentResults.voteItems.length);\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('투표 데이터 로드 실패');\n      setError(error);\n      onError?.(error);\n      console.error('[useVoteRealtimeEnhanced] 데이터 새로고침 실패:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [voteId, loadVoteResults, onError]);\n\n  // 데이터 동기화 콜백\n  const dataSyncCallback: DataSyncCallback = useCallback(async (syncVoteId: number) => {\n    if (syncVoteId === voteId) {\n      await refreshData();\n    }\n  }, [voteId, refreshData]);\n\n  // 이벤트 리스너 생성\n  const createEventListener = useCallback((): VoteEventListener => {\n    return (event: VoteRealtimeEvent) => {\n      setLastEvent(event);\n      setEventCount(prev => prev + 1);\n      setLastUpdated(new Date());\n      \n      // 외부 콜백 호출\n      onVoteUpdate?.(event);\n      \n      // 이벤트 타입에 따른 데이터 업데이트\n      if (event.type === 'vote_item_updated' || event.type === 'vote_pick_created') {\n        // 실시간 이벤트가 있으면 데이터 새로고침\n        refreshData().catch(console.error);\n      }\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 이벤트 수신:', event);\n      }\n    };\n  }, [onVoteUpdate, refreshData]);\n\n  // 연결 상태 리스너 생성\n  const createStatusListener = useCallback((): ConnectionStatusListener => {\n    return (status: ConnectionStatus, info: ConnectionInfo) => {\n      setConnectionStatus(status);\n      setConnectionInfo(prevInfo => ({\n        ...prevInfo,\n        ...info,\n        // 기존 브라우저 상태 정보 유지\n        isOnline: networkStatus.isOnline,\n        isVisible: isPageVisible\n      }));\n      \n      // 외부 콜백 호출\n      onConnectionStatusChange?.(status, info);\n      \n      // 연결 상태가 오류인 경우 스마트 재연결 시도\n      if ((status === 'error' || status === 'network_error') && shouldReconnect()) {\n        const delay = networkStatus.isSlowConnection ? 10000 : 1000; // 느린 연결에서는 더 긴 지연\n        \n        if (reconnectTimeoutRef.current) {\n          clearTimeout(reconnectTimeoutRef.current);\n        }\n        \n        reconnectTimeoutRef.current = setTimeout(() => {\n          if (serviceRef.current && shouldReconnect()) {\n            serviceRef.current.manualReconnect();\n          }\n        }, delay);\n      }\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 연결 상태 변경:', status, info);\n      }\n    };\n  }, [onConnectionStatusChange, networkStatus, isPageVisible, shouldReconnect]);\n\n  // 실시간 서비스 초기화\n  const initializeService = useCallback(() => {\n    if (!enabled || !voteId) return;\n\n    try {\n      serviceRef.current = new VoteRealtimeService();\n      \n      // 최대 재연결 시도 횟수 설정\n      (serviceRef.current as any).maxReconnectAttempts = maxRetries;\n      \n      // 리스너 등록\n      eventListenerRef.current = createEventListener();\n      statusListenerRef.current = createStatusListener();\n      \n      serviceRef.current.addEventListener(eventListenerRef.current);\n      serviceRef.current.addStatusListener(statusListenerRef.current);\n      \n      // 데이터 동기화 콜백 등록\n      if (enableDataSync) {\n        serviceRef.current.addDataSyncCallback(voteId, dataSyncCallback);\n      }\n      \n      // 구독 시작 (스마트 재연결 조건 확인)\n      if (shouldReconnect()) {\n        if (artistVoteId) {\n          serviceRef.current.subscribeToArtistVote(artistVoteId);\n        } else {\n          serviceRef.current.subscribeToVote(voteId);\n        }\n      }\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtimeEnhanced] 실시간 서비스 초기화 완료');\n      }\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('실시간 서비스 초기화 실패');\n      setError(error);\n      onError?.(error);\n      console.error('[useVoteRealtimeEnhanced] 서비스 초기화 실패:', error);\n    }\n  }, [enabled, voteId, artistVoteId, maxRetries, createEventListener, createStatusListener, enableDataSync, dataSyncCallback, shouldReconnect, onError]);\n\n  // 폴링 설정 (실시간 연결 실패 시 폴백)\n  const setupPolling = useCallback(() => {\n    if (!enabled || !voteId || pollingInterval <= 0) return;\n\n    // 배터리 절약 모드에서는 폴링 간격을 늘림\n    let adjustedInterval = pollingInterval;\n    if (batterySaverEnabled && batteryStatus.level !== null && !batteryStatus.isCharging) {\n      if (batteryStatus.level < 0.15) {\n        adjustedInterval = pollingInterval * 3; // 3배 늘림\n      } else if (batteryStatus.level < 0.3) {\n        adjustedInterval = pollingInterval * 2; // 2배 늘림\n      }\n    }\n\n    // 느린 연결에서는 폴링 간격을 늘림\n    if (networkStatus.isSlowConnection) {\n      adjustedInterval = Math.max(adjustedInterval * 2, 60000); // 최소 1분\n    }\n\n    pollingIntervalRef.current = setInterval(() => {\n      // 연결이 안 되어 있고, 페이지가 보이고, 온라인인 경우만 폴링\n      if (connectionStatus !== 'connected' && isPageVisible && networkStatus.isOnline) {\n        refreshData().catch(console.error);\n      }\n    }, adjustedInterval);\n\n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtimeEnhanced] 폴링 설정:', adjustedInterval + 'ms');\n    }\n  }, [enabled, voteId, pollingInterval, connectionStatus, isPageVisible, networkStatus, batterySaverEnabled, batteryStatus, refreshData]);\n\n  // 폴링 정리\n  const clearPolling = useCallback(() => {\n    if (pollingIntervalRef.current) {\n      clearInterval(pollingIntervalRef.current);\n      pollingIntervalRef.current = null;\n    }\n  }, []);\n\n  // 서비스 정리\n  const cleanupService = useCallback(() => {\n    if (serviceRef.current) {\n      if (eventListenerRef.current) {\n        serviceRef.current.removeEventListener(eventListenerRef.current);\n      }\n      if (statusListenerRef.current) {\n        serviceRef.current.removeStatusListener(statusListenerRef.current);\n      }\n      if (voteId && enableDataSync) {\n        serviceRef.current.removeDataSyncCallback(voteId);\n      }\n      \n      serviceRef.current.unsubscribeAll();\n      serviceRef.current = null;\n    }\n    \n    clearPolling();\n    \n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n  }, [voteId, enableDataSync, clearPolling]);\n\n  // 수동 재연결\n  const manualReconnect = useCallback(() => {\n    if (serviceRef.current) {\n      serviceRef.current.manualReconnect();\n    } else {\n      initializeService();\n    }\n  }, [initializeService]);\n\n  // 스마트 재연결 토글\n  const toggleSmartReconnect = useCallback(() => {\n    setSmartReconnectEnabled(prev => !prev);\n  }, []);\n\n  // 배터리 절약 모드 토글\n  const toggleBatterySaver = useCallback(() => {\n    setBatterySaverEnabled(prev => !prev);\n  }, []);\n\n  // 브라우저 이벤트 리스너 설정\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n\n    // 네트워크 상태 이벤트\n    const handleOnline = () => {\n      updateNetworkStatus();\n      // 온라인이 되면 재연결 시도\n      if (serviceRef.current && shouldReconnect()) {\n        serviceRef.current.manualReconnect();\n      }\n    };\n    \n    const handleOffline = () => {\n      updateNetworkStatus();\n    };\n\n    // 페이지 가시성 이벤트\n    const handleVisibilityChange = () => {\n      updatePageVisibility();\n      \n      // 페이지가 보이게 되면 재연결 시도\n      if (!document.hidden && serviceRef.current && shouldReconnect()) {\n        serviceRef.current.manualReconnect();\n      }\n    };\n\n    // 네트워크 연결 변경 이벤트\n    const handleConnectionChange = () => {\n      updateNetworkStatus();\n    };\n\n    // 이벤트 리스너 등록\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    if ('connection' in navigator) {\n      (navigator as any).connection?.addEventListener('change', handleConnectionChange);\n    }\n\n    // 초기 상태 업데이트\n    updateNetworkStatus();\n    updatePageVisibility();\n    updateBatteryStatus();\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      \n      if ('connection' in navigator) {\n        (navigator as any).connection?.removeEventListener('change', handleConnectionChange);\n      }\n    };\n  }, [updateNetworkStatus, updatePageVisibility, updateBatteryStatus, shouldReconnect]);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    if (enabled && voteId) {\n      refreshData();\n    }\n  }, [enabled, voteId, refreshData]);\n\n  // 실시간 서비스 초기화\n  useEffect(() => {\n    if (enabled && voteId) {\n      initializeService();\n    }\n    \n    return cleanupService;\n  }, [enabled, voteId, initializeService, cleanupService]);\n\n  // 폴링 설정 (배터리 상태나 네트워크 상태 변경 시 재설정)\n  useEffect(() => {\n    clearPolling();\n    setupPolling();\n    return clearPolling;\n  }, [setupPolling, clearPolling, batterySaverEnabled, batteryStatus, networkStatus]);\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      cleanupService();\n    };\n  }, [cleanupService]);\n\n  return {\n    voteItems,\n    totalVotes,\n    isLoading,\n    connectionStatus,\n    isConnected: connectionStatus === 'connected',\n    connectionInfo,\n    realtimeService: serviceRef.current,\n    lastUpdated,\n    error,\n    lastEvent,\n    eventCount,\n    networkStatus,\n    batteryStatus,\n    isPageVisible,\n    manualReconnect,\n    refreshData,\n    toggleSmartReconnect,\n    toggleBatterySaver\n  };\n} "],"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","ignoreList":[]}