{"version":3,"names":["cov_1choe3kx9y","actualCoverage","s","useVoteConnectionStatus","f","useVoteEvents","useVoteRealtime","options","b","voteId","artistVoteId","autoConnect","autoCleanup","onConnectionStatusChange","onVoteUpdate","connectionStatus","setConnectionStatus","_react","useState","activeSubscriptionsCount","setActiveSubscriptionsCount","activeSubscriptions","setActiveSubscriptions","lastEvent","setLastEvent","eventCount","setEventCount","serviceRef","useRef","_realtime","getVoteRealtimeService","eventListenerRef","statusListenerRef","updateConnectionInfo","useCallback","service","current","getConnectionStatus","getActiveSubscriptionsCount","getActiveSubscriptions","createEventListener","event","prev","error","console","process","env","NODE_ENV","log","createStatusListener","status","connect","removeEventListener","removeStatusListener","addEventListener","addStatusListener","undefined","subscribeToVote","subscribeToArtistVote","disconnect","unsubscribeFromVote","unsubscribeFromArtistVote","cleanup","cleanupVoteRealtime","useEffect","isConnected","onEvent"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useVoteRealtime.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { \n  getVoteRealtimeService, \n  cleanupVoteRealtime,\n  VoteRealtimeEvent, \n  ConnectionStatus,\n  VoteEventListener,\n  ConnectionStatusListener\n} from '@/lib/supabase/realtime';\n\n// 훅 옵션 타입\ninterface UseVoteRealtimeOptions {\n  /** 투표 ID */\n  voteId?: number;\n  /** 아티스트 투표 ID */\n  artistVoteId?: number;\n  /** 자동 연결 여부 (기본값: true) */\n  autoConnect?: boolean;\n  /** 컴포넌트 언마운트 시 자동 정리 여부 (기본값: true) */\n  autoCleanup?: boolean;\n  /** 연결 상태 변경 콜백 */\n  onConnectionStatusChange?: (status: ConnectionStatus) => void;\n  /** 투표 업데이트 이벤트 콜백 */\n  onVoteUpdate?: (event: VoteRealtimeEvent) => void;\n}\n\n// 훅 반환 타입\ninterface UseVoteRealtimeReturn {\n  /** 현재 연결 상태 */\n  connectionStatus: ConnectionStatus;\n  /** 연결 여부 */\n  isConnected: boolean;\n  /** 수동으로 연결 시작 */\n  connect: () => void;\n  /** 연결 해제 */\n  disconnect: () => void;\n  /** 모든 연결 해제 및 정리 */\n  cleanup: () => void;\n  /** 활성 구독 수 */\n  activeSubscriptionsCount: number;\n  /** 활성 구독 목록 */\n  activeSubscriptions: string[];\n  /** 마지막 수신 이벤트 */\n  lastEvent: VoteRealtimeEvent | null;\n  /** 이벤트 수신 횟수 */\n  eventCount: number;\n}\n\n/**\n * 투표 실시간 업데이트를 위한 React 커스텀 훅\n * \n * @param options 훅 설정 옵션\n * @returns 실시간 연결 상태 및 제어 함수들\n * \n * @example\n * ```tsx\n * function VoteComponent({ voteId }: { voteId: number }) {\n *   const {\n *     connectionStatus,\n *     isConnected,\n *     lastEvent,\n *     eventCount\n *   } = useVoteRealtime({\n *     voteId,\n *     onVoteUpdate: (event) => {\n *       console.log('투표 업데이트:', event);\n *     },\n *     onConnectionStatusChange: (status) => {\n *       console.log('연결 상태:', status);\n *     }\n *   });\n * \n *   return (\n *     <div>\n *       <p>연결 상태: {connectionStatus}</p>\n *       <p>이벤트 수신: {eventCount}회</p>\n *       {lastEvent && (\n *         <p>마지막 이벤트: {lastEvent.type}</p>\n *       )}\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useVoteRealtime(options: UseVoteRealtimeOptions = {}): UseVoteRealtimeReturn {\n  const {\n    voteId,\n    artistVoteId,\n    autoConnect = true,\n    autoCleanup = true,\n    onConnectionStatusChange,\n    onVoteUpdate\n  } = options;\n\n  // 상태 관리\n  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected');\n  const [activeSubscriptionsCount, setActiveSubscriptionsCount] = useState(0);\n  const [activeSubscriptions, setActiveSubscriptions] = useState<string[]>([]);\n  const [lastEvent, setLastEvent] = useState<VoteRealtimeEvent | null>(null);\n  const [eventCount, setEventCount] = useState(0);\n\n  // 서비스 및 리스너 참조\n  const serviceRef = useRef(getVoteRealtimeService());\n  const eventListenerRef = useRef<VoteEventListener | null>(null);\n  const statusListenerRef = useRef<ConnectionStatusListener | null>(null);\n\n  // 연결 상태 업데이트\n  const updateConnectionInfo = useCallback(() => {\n    const service = serviceRef.current;\n    setConnectionStatus(service.getConnectionStatus());\n    setActiveSubscriptionsCount(service.getActiveSubscriptionsCount());\n    setActiveSubscriptions(service.getActiveSubscriptions());\n  }, []);\n\n  // 이벤트 리스너 생성\n  const createEventListener = useCallback((): VoteEventListener => {\n    return (event: VoteRealtimeEvent) => {\n      setLastEvent(event);\n      setEventCount(prev => prev + 1);\n      \n      // 외부 콜백 호출\n      if (onVoteUpdate) {\n        try {\n          onVoteUpdate(event);\n        } catch (error) {\n          console.error('[useVoteRealtime] 이벤트 콜백 오류:', error);\n        }\n      }\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtime] 이벤트 수신:', event);\n      }\n    };\n  }, [onVoteUpdate]);\n\n  // 연결 상태 리스너 생성\n  const createStatusListener = useCallback((): ConnectionStatusListener => {\n    return (status: ConnectionStatus) => {\n      setConnectionStatus(status);\n      \n      // 외부 콜백 호출\n      if (onConnectionStatusChange) {\n        try {\n          onConnectionStatusChange(status);\n        } catch (error) {\n          console.error('[useVoteRealtime] 상태 콜백 오류:', error);\n        }\n      }\n      \n      // 구독 정보 업데이트\n      updateConnectionInfo();\n      \n      if (process.env.NODE_ENV === 'development') {\n        console.log('[useVoteRealtime] 연결 상태 변경:', status);\n      }\n    };\n  }, [onConnectionStatusChange, updateConnectionInfo]);\n\n  // 연결 시작\n  const connect = useCallback(() => {\n    const service = serviceRef.current;\n    \n    // 기존 리스너 정리\n    if (eventListenerRef.current) {\n      service.removeEventListener(eventListenerRef.current);\n    }\n    if (statusListenerRef.current) {\n      service.removeStatusListener(statusListenerRef.current);\n    }\n    \n    // 새 리스너 등록\n    eventListenerRef.current = createEventListener();\n    statusListenerRef.current = createStatusListener();\n    \n    service.addEventListener(eventListenerRef.current);\n    service.addStatusListener(statusListenerRef.current);\n    \n    // 구독 시작\n    if (voteId !== undefined) {\n      service.subscribeToVote(voteId);\n    }\n    if (artistVoteId !== undefined) {\n      service.subscribeToArtistVote(artistVoteId);\n    }\n    \n    // 초기 상태 업데이트\n    updateConnectionInfo();\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtime] 연결 시작:', { voteId, artistVoteId });\n    }\n  }, [voteId, artistVoteId, createEventListener, createStatusListener, updateConnectionInfo]);\n\n  // 연결 해제\n  const disconnect = useCallback(() => {\n    const service = serviceRef.current;\n    \n    // 구독 해제\n    if (voteId !== undefined) {\n      service.unsubscribeFromVote(voteId);\n    }\n    if (artistVoteId !== undefined) {\n      service.unsubscribeFromArtistVote(artistVoteId);\n    }\n    \n    // 리스너 제거\n    if (eventListenerRef.current) {\n      service.removeEventListener(eventListenerRef.current);\n      eventListenerRef.current = null;\n    }\n    if (statusListenerRef.current) {\n      service.removeStatusListener(statusListenerRef.current);\n      statusListenerRef.current = null;\n    }\n    \n    // 상태 업데이트\n    updateConnectionInfo();\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtime] 연결 해제:', { voteId, artistVoteId });\n    }\n  }, [voteId, artistVoteId, updateConnectionInfo]);\n\n  // 전체 정리\n  const cleanup = useCallback(() => {\n    const service = serviceRef.current;\n    \n    // 리스너 제거\n    if (eventListenerRef.current) {\n      service.removeEventListener(eventListenerRef.current);\n      eventListenerRef.current = null;\n    }\n    if (statusListenerRef.current) {\n      service.removeStatusListener(statusListenerRef.current);\n      statusListenerRef.current = null;\n    }\n    \n    // 전체 정리\n    cleanupVoteRealtime();\n    \n    // 상태 초기화\n    setConnectionStatus('disconnected');\n    setActiveSubscriptionsCount(0);\n    setActiveSubscriptions([]);\n    setLastEvent(null);\n    setEventCount(0);\n    \n    if (process.env.NODE_ENV === 'development') {\n      console.log('[useVoteRealtime] 전체 정리 완료');\n    }\n  }, []);\n\n  // 자동 연결 효과\n  useEffect(() => {\n    if (autoConnect && (voteId !== undefined || artistVoteId !== undefined)) {\n      connect();\n    }\n    \n    return () => {\n      if (autoCleanup) {\n        disconnect();\n      }\n    };\n  }, [voteId, artistVoteId, autoConnect, autoCleanup, connect, disconnect]);\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (autoCleanup) {\n        cleanup();\n      }\n    };\n  }, [autoCleanup, cleanup]);\n\n  // 계산된 값들\n  const isConnected = connectionStatus === 'connected';\n\n  return {\n    connectionStatus,\n    isConnected,\n    connect,\n    disconnect,\n    cleanup,\n    activeSubscriptionsCount,\n    activeSubscriptions,\n    lastEvent,\n    eventCount\n  };\n}\n\n/**\n * 투표 실시간 연결 상태만 추적하는 간단한 훅\n * \n * @param voteId 투표 ID\n * @returns 연결 상태 정보\n */\nexport function useVoteConnectionStatus(voteId?: number) {\n  const { connectionStatus, isConnected, activeSubscriptionsCount } = useVoteRealtime({\n    voteId,\n    autoConnect: !!voteId,\n    autoCleanup: true\n  });\n\n  return {\n    connectionStatus,\n    isConnected,\n    activeSubscriptionsCount\n  };\n}\n\n/**\n * 투표 이벤트만 수신하는 훅\n * \n * @param voteId 투표 ID\n * @param onEvent 이벤트 콜백\n * @returns 이벤트 정보\n */\nexport function useVoteEvents(\n  voteId: number | undefined,\n  onEvent?: (event: VoteRealtimeEvent) => void\n) {\n  const { lastEvent, eventCount, isConnected } = useVoteRealtime({\n    voteId,\n    autoConnect: !!voteId,\n    autoCleanup: true,\n    onVoteUpdate: onEvent\n  });\n\n  return {\n    lastEvent,\n    eventCount,\n    isConnected\n  };\n} "],"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","ignoreList":[]}