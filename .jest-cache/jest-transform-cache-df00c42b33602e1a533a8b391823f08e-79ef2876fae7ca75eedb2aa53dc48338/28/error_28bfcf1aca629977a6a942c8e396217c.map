{"version":3,"names":["AppError","cov_khxtgp9rg","f","s","ErrorCode","handleError","handleSupabaseError","Error","constructor","message","code","details","status","name","toFriendlyMessage","b","PG_ERROR_CODES","UNDEFINED_TABLE","UNDEFINED_COLUMN","INVALID_TEXT_REPRESENTATION","FOREIGN_KEY_VIOLATION","INSUFFICIENT_PRIVILEGE","INVALID_PASSWORD","UNIQUE_VIOLATION","NOT_NULL_VIOLATION","CHECK_VIOLATION","STRING_DATA_RIGHT_TRUNCATION","RLS_POLICY_VIOLATION","RLS_NO_ROWS_RETURNED","RLS_PERMISSION_DENIED","error","toLowerCase","includes","startsWith","TypeError","errorMessage","String"],"sources":["/Users/cheolhyun/Repositories/picnic-web/lib/supabase/error.ts"],"sourcesContent":["import { PostgrestError } from '@supabase/supabase-js';\n\n/**\n * 애플리케이션에서 사용하는 에러 코드 열거형\n */\nexport enum ErrorCode {\n  NOT_FOUND = 'not_found',\n  UNAUTHORIZED = 'unauthorized',\n  FORBIDDEN = 'forbidden',\n  CONFLICT = 'conflict',\n  VALIDATION = 'validation',\n  SERVER_ERROR = 'server_error',\n  NETWORK_ERROR = 'network_error',\n  RLS_POLICY_VIOLATION = 'rls_policy_violation',\n  UNKNOWN = 'unknown',\n}\n\n/**\n * 애플리케이션 에러 클래스\n * \n * 모든 API 에러는 이 클래스를 사용하여 일관된 형식으로 반환됩니다.\n */\nexport class AppError extends Error {\n  code: ErrorCode;\n  status?: number;\n  details?: unknown;\n\n  constructor(message: string, code: ErrorCode, details?: unknown, status?: number) {\n    super(message);\n    this.name = 'AppError';\n    this.code = code;\n    this.details = details;\n    this.status = status;\n  }\n\n  /**\n   * 에러 메시지와 함께 토스트 등에 표시할 수 있는 사용자 친화적인 메시지를 반환합니다.\n   */\n  toFriendlyMessage(): string {\n    switch (this.code) {\n      case ErrorCode.NOT_FOUND:\n        return '요청한 데이터를 찾을 수 없습니다.';\n      case ErrorCode.UNAUTHORIZED:\n        return '로그인이 필요합니다.';\n      case ErrorCode.FORBIDDEN:\n        return '접근 권한이 없습니다.';\n      case ErrorCode.RLS_POLICY_VIOLATION:\n        return '데이터 접근 권한이 없습니다. 본인의 데이터만 접근할 수 있습니다.';\n      case ErrorCode.CONFLICT:\n        return '데이터 충돌이 발생했습니다.';\n      case ErrorCode.VALIDATION:\n        return '입력 데이터가 유효하지 않습니다.';\n      case ErrorCode.NETWORK_ERROR:\n        return '네트워크 연결을 확인해주세요.';\n      case ErrorCode.SERVER_ERROR:\n        return '서버 오류가 발생했습니다. 잠시 후 다시 시도해주세요.';\n      default:\n        return this.message || '알 수 없는 오류가 발생했습니다.';\n    }\n  }\n}\n\n/**\n * PostgreSQL 에러 코드와 관련 정보\n * \n * https://www.postgresql.org/docs/current/errcodes-appendix.html\n */\nconst PG_ERROR_CODES = {\n  // \"not_found\" 관련 에러\n  UNDEFINED_TABLE: '42P01',      // undefined_table\n  UNDEFINED_COLUMN: '42703',     // undefined_column\n  INVALID_TEXT_REPRESENTATION: '22P02',  // invalid_text_representation (e.g., UUID 포맷 오류)\n  FOREIGN_KEY_VIOLATION: '23503', // foreign_key_violation\n\n  // \"forbidden\" 관련 에러\n  INSUFFICIENT_PRIVILEGE: '42501', // insufficient_privilege\n  INVALID_PASSWORD: '28P01',      // invalid_password\n\n  // \"conflict\" 관련 에러\n  UNIQUE_VIOLATION: '23505',     // unique_violation\n\n  // \"validation\" 관련 에러\n  NOT_NULL_VIOLATION: '23502',   // not_null_violation\n  CHECK_VIOLATION: '23514',      // check_violation\n  STRING_DATA_RIGHT_TRUNCATION: '22001', // string_data_right_truncation\n\n  // RLS 정책 관련 에러 (Supabase/PostgREST 특화)\n  RLS_POLICY_VIOLATION: 'PGRST301', // RLS 정책 위반\n  RLS_NO_ROWS_RETURNED: 'PGRST204', // RLS로 인해 반환된 행이 없음\n  RLS_PERMISSION_DENIED: 'PGRST403', // RLS 권한 거부\n};\n\n/**\n * Supabase/Postgres 에러를 애플리케이션 표준 에러로 변환합니다.\n * \n * @param error Supabase에서 반환된 PostgrestError\n * @returns 애플리케이션 표준 에러 객체\n */\nexport function handleSupabaseError(error: PostgrestError): AppError {\n  const { code, message, details } = error;\n  \n  // PostgreSQL 에러 코드에 따라 적절한 에러 반환\n  \n  // RLS 정책 관련 에러 (최우선 처리)\n  if (\n    code === PG_ERROR_CODES.RLS_POLICY_VIOLATION ||\n    code === PG_ERROR_CODES.RLS_NO_ROWS_RETURNED ||\n    code === PG_ERROR_CODES.RLS_PERMISSION_DENIED ||\n    message?.toLowerCase().includes('row level security') ||\n    message?.toLowerCase().includes('policy')\n  ) {\n    return new AppError(\n      '데이터 접근 권한이 없습니다. 본인의 데이터만 접근할 수 있습니다.',\n      ErrorCode.RLS_POLICY_VIOLATION,\n      details,\n      403\n    );\n  }\n  \n  // NOT_FOUND 에러\n  if (\n    code === PG_ERROR_CODES.UNDEFINED_TABLE ||\n    code === PG_ERROR_CODES.UNDEFINED_COLUMN ||\n    code === PG_ERROR_CODES.INVALID_TEXT_REPRESENTATION ||\n    code === PG_ERROR_CODES.FOREIGN_KEY_VIOLATION\n  ) {\n    return new AppError(\n      '요청한 데이터를 찾을 수 없습니다', \n      ErrorCode.NOT_FOUND, \n      details,\n      404\n    );\n  }\n  \n  // FORBIDDEN 에러\n  if (\n    code === PG_ERROR_CODES.INSUFFICIENT_PRIVILEGE ||\n    code === PG_ERROR_CODES.INVALID_PASSWORD\n  ) {\n    return new AppError(\n      '접근 권한이 없습니다', \n      ErrorCode.FORBIDDEN, \n      details,\n      403\n    );\n  }\n  \n  // CONFLICT 에러\n  if (code === PG_ERROR_CODES.UNIQUE_VIOLATION) {\n    return new AppError(\n      '중복된 데이터가 존재합니다', \n      ErrorCode.CONFLICT, \n      details,\n      409\n    );\n  }\n  \n  // VALIDATION 에러\n  if (\n    code === PG_ERROR_CODES.NOT_NULL_VIOLATION ||\n    code === PG_ERROR_CODES.CHECK_VIOLATION ||\n    code === PG_ERROR_CODES.STRING_DATA_RIGHT_TRUNCATION ||\n    code?.startsWith('22') // 데이터 예외 클래스\n  ) {\n    return new AppError(\n      '데이터 유효성 검증에 실패했습니다', \n      ErrorCode.VALIDATION, \n      details,\n      400\n    );\n  }\n  \n  // 기타 서버 에러\n  return new AppError(\n    message || '서버 에러가 발생했습니다', \n    ErrorCode.SERVER_ERROR, \n    details,\n    500\n  );\n}\n\n/**\n * 일반 에러를 애플리케이션 표준 에러로 변환합니다.\n * \n * @param error 발생한 에러 객체\n * @returns 애플리케이션 표준 에러 객체\n */\nexport function handleError(error: unknown): AppError {\n  // 이미 AppError인 경우 그대로 반환\n  if (error instanceof AppError) {\n    return error;\n  }\n  \n  // PostgrestError인 경우 handleSupabaseError로 변환\n  if (error && typeof error === 'object' && 'code' in error && 'message' in error) {\n    return handleSupabaseError(error as PostgrestError);\n  }\n  \n  // 네트워크 에러\n  if (error instanceof TypeError && error.message.includes('fetch')) {\n    return new AppError(\n      '네트워크 연결을 확인해주세요',\n      ErrorCode.NETWORK_ERROR,\n      error,\n      0\n    );\n  }\n  \n  // 그 외 모든 에러는 UNKNOWN으로 처리\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  return new AppError(\n    errorMessage || '알 수 없는 오류가 발생했습니다',\n    ErrorCode.UNKNOWN,\n    error,\n    500\n  );\n} "],"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","ignoreList":[]}