{"version":3,"names":["cov_5j9v7ywcy","actualCoverage","s","portOneService","PortOneService","constructor","f","isInitialized","config","storeId","b","process","env","NEXT_PUBLIC_PORTONE_STORE_ID","channelKey","NEXT_PUBLIC_PORTONE_CHANNEL_KEY","environment","NEXT_PUBLIC_PORTONE_ENV","initialize","loadScript","console","log","error","Promise","resolve","reject","window","PortOne","script","document","createElement","src","async","onload","onerror","Error","head","appendChild","requestPayment","request","initialized","paymentRequest","paymentId","orderName","totalAmount","currency","payMethod","customer","fullName","email","phoneNumber","customData","productId","productInfo","id","starCandy","bonusAmount","redirectUrl","location","origin","noticeUrl","confirmUrl","response","code","success","transactionId","message","requestPaymentAuto","verifyPayment","fetch","method","headers","body","JSON","stringify","result","json","verified","getAvailablePaymentMethods","name","icon","formatPrice","amount","toLocaleString","isAvailableInCountry","countryCode","toUpperCase"],"sources":["/Users/cheolhyun/Repositories/picnic-web/lib/payment/portone.ts"],"sourcesContent":["interface PortOneConfig {\n  storeId: string;\n  channelKey: string;\n  environment: 'test' | 'production';\n}\n\ninterface PaymentRequest {\n  paymentId: string;\n  orderName: string;\n  totalAmount: number;\n  currency: 'KRW';\n  payMethod: 'CARD' | 'TRANS' | 'VBANK' | 'PHONE';\n  customer: {\n    fullName: string;\n    email: string;\n    phoneNumber?: string;\n  };\n  productInfo: {\n    id: string;\n    name: string;\n    starCandy: number;\n    bonusAmount: number;\n  };\n}\n\ninterface PaymentResponse {\n  success: boolean;\n  paymentId?: string;\n  transactionId?: string;\n  error?: {\n    code: string;\n    message: string;\n  };\n}\n\ndeclare global {\n  interface Window {\n    PortOne?: any;\n  }\n}\n\nclass PortOneService {\n  private config: PortOneConfig;\n  private isInitialized: boolean = false;\n\n  constructor() {\n    this.config = {\n      storeId: process.env.NEXT_PUBLIC_PORTONE_STORE_ID || '',\n      channelKey: process.env.NEXT_PUBLIC_PORTONE_CHANNEL_KEY || '',\n      environment: (process.env.NEXT_PUBLIC_PORTONE_ENV as 'test' | 'production') || 'test',\n    };\n  }\n\n  /**\n   * Initialize Port One v2 SDK\n   */\n  async initialize(): Promise<boolean> {\n    if (this.isInitialized) return true;\n\n    try {\n      // Load Port One v2 SDK script\n      await this.loadScript();\n      \n      this.isInitialized = true;\n      console.log('Port One v2 SDK initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize Port One v2 SDK:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load Port One v2 SDK script\n   */\n  private loadScript(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Check if already loaded\n      if (window.PortOne) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = 'https://cdn.portone.io/v2/browser-sdk.js';\n      script.async = true;\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load Port One v2 SDK'));\n      \n      document.head.appendChild(script);\n    });\n  }\n\n  /**\n   * Request payment through Port One v2 with simplified flow\n   */\n  async requestPayment(request: PaymentRequest): Promise<PaymentResponse> {\n    try {\n      // Ensure SDK is initialized\n      const initialized = await this.initialize();\n      if (!initialized) {\n        throw new Error('Port One v2 SDK not initialized');\n      }\n\n      // Prepare payment request for v2 API\n      const paymentRequest = {\n        storeId: this.config.storeId,\n        channelKey: this.config.channelKey,\n        paymentId: request.paymentId,\n        orderName: request.orderName,\n        totalAmount: request.totalAmount,\n        currency: request.currency,\n        payMethod: request.payMethod,\n        customer: {\n          fullName: request.customer.fullName,\n          email: request.customer.email,\n          phoneNumber: request.customer.phoneNumber,\n        },\n        customData: {\n          productId: request.productInfo.id,\n          starCandy: request.productInfo.starCandy,\n          bonusAmount: request.productInfo.bonusAmount,\n        },\n        redirectUrl: `${window.location.origin}/api/payment/portone/callback`,\n        noticeUrl: `${window.location.origin}/api/payment/portone/webhook`,\n        confirmUrl: `${window.location.origin}/api/payment/portone/confirm`,\n      };\n\n      // Request payment using v2 API\n      const response = await window.PortOne.requestPayment(paymentRequest);\n\n      if (response.code === null && response.paymentId) {\n        // Payment completed successfully\n        return {\n          success: true,\n          paymentId: response.paymentId,\n          transactionId: response.transactionId,\n        };\n      } else {\n        // Payment failed or cancelled\n        return {\n          success: false,\n          error: {\n            code: response.code || 'PAYMENT_FAILED',\n            message: response.message || 'Í≤∞Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',\n          },\n        };\n      }\n    } catch (error) {\n      console.error('Port One v2 payment request error:', error);\n      return {\n        success: false,\n        error: {\n          code: 'PAYMENT_ERROR',\n          message: error instanceof Error ? error.message : 'Í≤∞Ï†ú Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',\n        },\n      };\n    }\n  }\n\n  /**\n   * Request payment with automatic payment method detection\n   */\n  async requestPaymentAuto(request: Omit<PaymentRequest, 'payMethod'>): Promise<PaymentResponse> {\n    // For auto payment, we'll use CARD as default but let Port One handle the selection\n    return this.requestPayment({\n      ...request,\n      payMethod: 'CARD', // Port One v2 will show payment method selection UI\n    });\n  }\n\n  /**\n   * Verify payment status on server\n   */\n  async verifyPayment(paymentId: string): Promise<boolean> {\n    try {\n      const response = await fetch('/api/payment/portone/verify', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ paymentId }),\n      });\n\n      const result = await response.json();\n      return result.verified === true;\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available payment methods for Korean users\n   */\n  getAvailablePaymentMethods() {\n    return [\n      { id: 'CARD', name: 'Ïã†Ïö©/Ï≤¥ÌÅ¨Ïπ¥Îìú', icon: 'üí≥' },\n      { id: 'TRANS', name: 'Ïã§ÏãúÍ∞Ñ Í≥ÑÏ¢åÏù¥Ï≤¥', icon: 'üè¶' },\n      { id: 'VBANK', name: 'Í∞ÄÏÉÅÍ≥ÑÏ¢å', icon: 'üì±' },\n      { id: 'PHONE', name: 'Ìú¥ÎåÄÌè∞ ÏÜåÏï°Í≤∞Ï†ú', icon: 'üìû' },\n    ];\n  }\n\n  /**\n   * Format price for display\n   */\n  formatPrice(amount: number): string {\n    return `‚Ç©${amount.toLocaleString('ko-KR')}`;\n  }\n\n  /**\n   * Check if Port One is available (mainly for Korean users)\n   */\n  isAvailableInCountry(countryCode: string): boolean {\n    // Port One is primarily for Korean market\n    return countryCode.toUpperCase() === 'KR';\n  }\n}\n\n// Export singleton instance\nexport const portOneService = new PortOneService();"],"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","ignoreList":[]}