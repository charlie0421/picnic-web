{"version":3,"names":["formatDuration","cov_28qvhibufn","f","s","formatFileSize","getFileExtension","getMediaTypeFromMime","getMediaTypeIcon","getThumbnailUrl","isValidMediaType","sortMedia","bytes","b","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","type","icons","image","video","audio","document","mimeType","startsWith","filename","parts","split","length","toLowerCase","seconds","hours","minutes","secs","toString","padStart","media","size","thumbnailUrl","url","allowedTypes","includes","sortBy","sort","a","Date","uploadedAt","getTime","title","localeCompare"],"sources":["/Users/cheolhyun/Repositories/picnic-web/components/client/media/utils.ts"],"sourcesContent":["import { Media, MediaType } from './types';\n\n/**\n * 파일 크기를 읽기 쉬운 형식으로 변환\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * 미디어 타입에 따른 아이콘 반환\n */\nexport function getMediaTypeIcon(type: MediaType): string {\n  const icons = {\n    image: '🖼️',\n    video: '🎬',\n    audio: '🎵',\n    document: '📄'\n  };\n  \n  return icons[type] || '📎';\n}\n\n/**\n * MIME 타입으로부터 미디어 타입 추론\n */\nexport function getMediaTypeFromMime(mimeType: string): MediaType {\n  if (mimeType.startsWith('image/')) return 'image';\n  if (mimeType.startsWith('video/')) return 'video';\n  if (mimeType.startsWith('audio/')) return 'audio';\n  return 'document';\n}\n\n/**\n * 파일 확장자 추출\n */\nexport function getFileExtension(filename: string): string {\n  const parts = filename.split('.');\n  return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : '';\n}\n\n/**\n * 비디오/오디오 재생 시간 포맷\n */\nexport function formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  }\n  \n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n\n/**\n * 이미지 썸네일 URL 생성\n */\nexport function getThumbnailUrl(media: Media, size: 'small' | 'medium' | 'large' = 'medium'): string {\n  if (media.thumbnailUrl) return media.thumbnailUrl;\n  \n  // 이미지인 경우 원본 URL 사용\n  if (media.type === 'image') return media.url;\n  \n  // 다른 타입의 경우 기본 썸네일\n  return '/images/default-thumbnail.png';\n}\n\n/**\n * 미디어 업로드 가능 여부 확인\n */\nexport function isValidMediaType(mimeType: string): boolean {\n  const allowedTypes = [\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/svg+xml',\n    // Videos\n    'video/mp4',\n    'video/webm',\n    'video/ogg',\n    // Audio\n    'audio/mpeg',\n    'audio/wav',\n    'audio/ogg',\n    'audio/webm',\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'application/vnd.ms-excel',\n    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  ];\n  \n  return allowedTypes.includes(mimeType);\n}\n\n/**\n * 미디어 정렬 함수\n */\nexport function sortMedia(media: Media[], sortBy: 'date' | 'name' | 'size' = 'date'): Media[] {\n  return [...media].sort((a, b) => {\n    switch (sortBy) {\n      case 'date':\n        return new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime();\n      case 'name':\n        return a.title.localeCompare(b.title);\n      case 'size':\n        return (b.size || 0) - (a.size || 0);\n      default:\n        return 0;\n    }\n  });\n} "],"mappingskDgBA,cAAc,WAAAA,CAAA;IAAA;IAAAC,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdH,cAAA;;EA7CAI,cAAc,WAAAA,CAAA;IAAA;IAAAH,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAdC,cAAA;;EAqCAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAJ,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAhBE,gBAAA;;EAVAC,oBAAoB,WAAAA,CAAA;IAAA;IAAAL,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAApBG,oBAAA;;EAdAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAN,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAhBI,gBAAA;;EA+CAC,eAAe,WAAAA,CAAA;IAAA;IAAAP,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAfK,eAAA;;EAaAC,gBAAgB,WAAAA,CAAA;IAAA;IAAAR,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAAhBM,gBAAA;;EA+BAC,SAAS,WAAAA,CAAA;IAAA;IAAAT,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;WAATO,SAAA;;;AAxGT,SAASN,eAAeO,KAAa;EAAA;EAAAV,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EAC1C,IAAIQ,KAAA,KAAU,GAAG;IAAA;IAAAV,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAW,CAAA;EAAA;EAExB,MAAMC,CAAA;EAAA;EAAA,CAAAZ,cAAA,GAAAE,CAAA,QAAI;EACV,MAAMW,KAAA;EAAA;EAAA,CAAAb,cAAA,GAAAE,CAAA,QAAQ,CAAC,SAAS,MAAM,MAAM,MAAM,KAAK;EAC/C,MAAMY,CAAA;EAAA;EAAA,CAAAd,cAAA,GAAAE,CAAA,QAAIa,IAAA,CAAKC,KAAK,CAACD,IAAA,CAAKE,GAAG,CAACP,KAAA,IAASK,IAAA,CAAKE,GAAG,CAACL,CAAA;EAAA;EAAAZ,cAAA,GAAAE,CAAA;EAEhD,OAAOgB,UAAA,CAAW,CAACR,KAAA,GAAQK,IAAA,CAAKI,GAAG,CAACP,CAAA,EAAGE,CAAA,CAAC,EAAGM,OAAO,CAAC,MAAM,MAAMP,KAAK,CAACC,CAAA,CAAE;AACzE;AAKO,SAASR,iBAAiBe,IAAe;EAAA;EAAArB,cAAA,GAAAC,CAAA;EAC9C,MAAMqB,KAAA;EAAA;EAAA,CAAAtB,cAAA,GAAAE,CAAA,QAAQ;IACZqB,KAAA,EAAO;IACPC,KAAA,EAAO;IACPC,KAAA,EAAO;IACPC,QAAA,EAAU;EACZ;EAAA;EAAA1B,cAAA,GAAAE,CAAA;EAEA,OAAO,2BAAAF,cAAA,GAAAW,CAAA,UAAAW,KAAK,CAACD,IAAA,CAAK;EAAA;EAAA,CAAArB,cAAA,GAAAW,CAAA,UAAI;AACxB;AAKO,SAASN,qBAAqBsB,QAAgB;EAAA;EAAA3B,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACnD,IAAIyB,QAAA,CAASC,UAAU,CAAC,WAAW;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAW,CAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAC1C,IAAIyB,QAAA,CAASC,UAAU,CAAC,WAAW;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAW,CAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAC1C,IAAIyB,QAAA,CAASC,UAAU,CAAC,WAAW;IAAA;IAAA5B,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAO;EAAA;EAAA;EAAA;IAAAF,cAAA,GAAAW,CAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAC1C,OAAO;AACT;AAKO,SAASE,iBAAiByB,QAAgB;EAAA;EAAA7B,cAAA,GAAAC,CAAA;EAC/C,MAAM6B,KAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAQ2B,QAAA,CAASE,KAAK,CAAC;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EAC7B,OAAO4B,KAAA,CAAME,MAAM,GAAG;EAAA;EAAA,CAAAhC,cAAA,GAAAW,CAAA,UAAImB,KAAK,CAACA,KAAA,CAAME,MAAM,GAAG,EAAE,CAACC,WAAW;EAAA;EAAA,CAAAjC,cAAA,GAAAW,CAAA,UAAK;AACpE;AAKO,SAASZ,eAAemC,OAAe;EAAA;EAAAlC,cAAA,GAAAC,CAAA;EAC5C,MAAMkC,KAAA;EAAA;EAAA,CAAAnC,cAAA,GAAAE,CAAA,QAAQa,IAAA,CAAKC,KAAK,CAACkB,OAAA,GAAU;EACnC,MAAME,OAAA;EAAA;EAAA,CAAApC,cAAA,GAAAE,CAAA,QAAUa,IAAA,CAAKC,KAAK,CAACkB,OAAC,GAAU,OAAQ;EAC9C,MAAMG,IAAA;EAAA;EAAA,CAAArC,cAAA,GAAAE,CAAA,QAAOa,IAAA,CAAKC,KAAK,CAACkB,OAAA,GAAU;EAAA;EAAAlC,cAAA,GAAAE,CAAA;EAElC,IAAIiC,KAAA,GAAQ,GAAG;IAAA;IAAAnC,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IACb,OAAO,GAAGiC,KAAA,IAASC,OAAA,CAAQE,QAAQ,GAAGC,QAAQ,CAAC,GAAG,QAAQF,IAAA,CAAKC,QAAQ,GAAGC,QAAQ,CAAC,GAAG,MAAM;EAC9F;EAAA;EAAA;IAAAvC,cAAA,GAAAW,CAAA;EAAA;EAAAX,cAAA,GAAAE,CAAA;EAEA,OAAO,GAAGkC,OAAA,IAAWC,IAAA,CAAKC,QAAQ,GAAGC,QAAQ,CAAC,GAAG,MAAM;AACzD;AAKO,SAAShC,gBAAgBiC,KAAY,EAAEC,IAAA;AAAA;AAAA,CAAAzC,cAAA,GAAAW,CAAA,UAAqC,QAAQ;EAAA;EAAAX,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACzF,IAAIsC,KAAA,CAAME,YAAY,EAAE;IAAA;IAAA1C,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAOsC,KAAA,CAAME,YAAY;EAAA;EAAA;EAAA;IAAA1C,cAAA,GAAAW,CAAA;EAAA;EAEjD;EAAAX,cAAA,GAAAE,CAAA;EACA,IAAIsC,KAAA,CAAMnB,IAAI,KAAK,SAAS;IAAA;IAAArB,cAAA,GAAAW,CAAA;IAAAX,cAAA,GAAAE,CAAA;IAAA,OAAOsC,KAAA,CAAMG,GAAG;EAAA;EAAA;EAAA;IAAA3C,cAAA,GAAAW,CAAA;EAAA;EAE5C;EAAAX,cAAA,GAAAE,CAAA;EACA,OAAO;AACT;AAKO,SAASM,iBAAiBmB,QAAgB;EAAA;EAAA3B,cAAA,GAAAC,CAAA;EAC/C,MAAM2C,YAAA;EAAA;EAAA,CAAA5C,cAAA,GAAAE,CAAA,QAAe;EACnB;EACA,cACA,aACA,aACA,cACA;EACA;EACA,aACA,cACA;EACA;EACA,cACA,aACA,aACA;EACA;EACA,mBACA,sBACA,2EACA,4BACA,oEACD;EAAA;EAAAF,cAAA,GAAAE,CAAA;EAED,OAAO0C,YAAA,CAAaC,QAAQ,CAAClB,QAAA;AAC/B;AAKO,SAASlB,UAAU+B,KAAc,EAAEM,MAAA;AAAA;AAAA,CAAA9C,cAAA,GAAAW,CAAA,WAAmC,MAAM;EAAA;EAAAX,cAAA,GAAAC,CAAA;EAAAD,cAAA,GAAAE,CAAA;EACjF,OAAO,C,GAAIsC,KAAA,CAAM,CAACO,IAAI,CAAC,CAACC,CAAA,EAAGrC,CAAA;IAAA;IAAAX,cAAA,GAAAC,CAAA;IAAAD,cAAA,GAAAE,CAAA;IACzB,QAAQ4C,MAAA;MACN,KAAK;QAAA;QAAA9C,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACH,OAAO,IAAI+C,IAAA,CAAKtC,CAAA,CAAEuC,UAAU,EAAEC,OAAO,KAAK,IAAIF,IAAA,CAAKD,CAAA,CAAEE,UAAU,EAAEC,OAAO;MAC1E,KAAK;QAAA;QAAAnD,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACH,OAAO8C,CAAA,CAAEI,KAAK,CAACC,aAAa,CAAC1C,CAAA,CAAEyC,KAAK;MACtC,KAAK;QAAA;QAAApD,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACH,OAAO;QAAC;QAAA,CAAAF,cAAA,GAAAW,CAAA,WAAAA,CAAA,CAAE8B,IAAI;QAAA;QAAA,CAAAzC,cAAA,GAAAW,CAAA,WAAI;QAAM;QAAA,CAAAX,cAAA,GAAAW,CAAA,WAAAqC,CAAA,CAAEP,IAAI;QAAA;QAAA,CAAAzC,cAAA,GAAAW,CAAA,WAAI;MACpC;QAAA;QAAAX,cAAA,GAAAW,CAAA;QAAAX,cAAA,GAAAE,CAAA;QACE,OAAO;IACX;EACF;AACF","ignoreList":[]}