{"version":3,"names":["sitemap","detectAppPages","cov_1jy1qxcqzs","f","appDir","s","_path","default","join","process","cwd","detectedPaths","scanDir","dir","basePath","b","entries","_fs","readdirSync","withFileTypes","entry","name","startsWith","entryPath","isDirectory","endsWith","newBasePath","isFile","includes","push","error","console","languages","staticPagesMaps","flatMap","lang","_staticpages","STATIC_PAGES","map","page","url","SITE_URL","lastModified","Date","changeFrequency","priority","votesMaps","votes","_voteservice","getVotes","vote","id","updated_at","created_at","rewardsMaps","rewards","_queries","getRewards","reward"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/[lang]/sitemap.ts"],"sourcesContent":["import {MetadataRoute} from \"next\";\nimport {createClient} from \"@/utils/supabase-server-client\";\nimport {SITE_URL, STATIC_PAGES} from \"./constants/static-pages\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { getVotes } from '@/lib/data-fetching/vote-service';\nimport { getRewards } from '@/utils/api/queries';\n\ninterface Vote {\n    id: number;\n    title: any;\n    created_at: string;\n    updated_at: string;\n    status?: string; // 투표 상태 (활성/예정/종료)\n}\n\n// 파일 시스템에서 app 디렉토리의 페이지를 자동으로 탐지하는 함수\nfunction detectAppPages(): string[] {\n    const appDir = path.join(process.cwd(), \"app\");\n    const detectedPaths: string[] = [];\n\n    // 재귀적으로 디렉토리 탐색\n    function scanDir(dir: string, basePath: string = \"\") {\n        const entries = fs.readdirSync(dir, { withFileTypes: true });\n\n        for (const entry of entries) {\n            // 특수 디렉토리 스킵\n            if (\n                entry.name.startsWith(\"_\") || entry.name.startsWith(\".\") ||\n                entry.name === \"api\" || entry.name === \"components\" ||\n                entry.name === \"hooks\" || entry.name === \"utils\" ||\n                entry.name === \"constants\" || entry.name === \"types\" ||\n                entry.name === \"styles\"\n            ) {\n                continue;\n            }\n\n            const entryPath = path.join(dir, entry.name);\n\n            if (entry.isDirectory()) {\n                // 라우트 그룹 처리 ((main), (auth) 등)\n                if (entry.name.startsWith(\"(\") && entry.name.endsWith(\")\")) {\n                    scanDir(entryPath, basePath);\n                } else {\n                    const newBasePath = basePath\n                        ? `${basePath}/${entry.name}`\n                        : entry.name;\n                    scanDir(entryPath, newBasePath);\n                }\n            } else if (\n                entry.isFile() &&\n                (entry.name === \"page.tsx\" || entry.name === \"page.jsx\")\n            ) {\n                // page.tsx 또는 page.jsx 파일이 있으면 해당 경로는 페이지\n                if (basePath && !detectedPaths.includes(basePath)) {\n                    detectedPaths.push(basePath);\n                }\n            }\n        }\n    }\n\n    try {\n        scanDir(appDir);\n        return detectedPaths;\n    } catch (error) {\n        console.error(\"페이지 탐지 중 오류:\", error);\n        return [];\n    }\n}\n\n/**\n * 사이트맵 생성 함수\n * \n * Next.js의 메타데이터 API를 활용하여 동적으로 사이트맵을 생성합니다.\n * 정적 페이지와 동적 컨텐츠(투표, 리워드 등)를 모두 포함합니다.\n * \n * @return {Promise<MetadataRoute.Sitemap>} 사이트맵 객체 배열\n */\nexport default async function sitemap(): Promise<MetadataRoute.Sitemap> {\n    // 다국어 지원을 위한 언어 목록\n    const languages = ['ko', 'en'];\n\n    // 1. 정적 페이지 사이트맵 항목 생성\n    const staticPagesMaps = languages.flatMap(lang => \n        STATIC_PAGES.map(page => ({\n            url: `${SITE_URL}/${lang}${page === '/' ? '' : page}`,\n            lastModified: new Date(),\n            changeFrequency: 'weekly' as const,\n            priority: page === '/' ? 1.0 : 0.8,\n        }))\n    );\n\n    // 2. 투표 페이지 사이트맵 항목 생성\n    let votesMaps: MetadataRoute.Sitemap = [];\n    try {\n        const votes = await getVotes('all');\n        \n        votesMaps = languages.flatMap(lang => \n            votes.map(vote => ({\n                url: `${SITE_URL}/${lang}/vote/${vote.id}`,\n                lastModified: new Date(vote.updated_at || vote.created_at),\n                changeFrequency: 'daily' as const,\n                priority: 0.9,\n            }))\n        );\n    } catch (error) {\n        console.error('사이트맵 생성 중 투표 데이터 가져오기 실패:', error);\n    }\n\n    // 3. 리워드 페이지 사이트맵 항목 생성\n    let rewardsMaps: MetadataRoute.Sitemap = [];\n    try {\n        const rewards = await getRewards();\n        \n        rewardsMaps = languages.flatMap(lang => \n            rewards.map(reward => ({\n                url: `${SITE_URL}/${lang}/rewards/${reward.id}`,\n                lastModified: new Date(reward.updated_at || reward.created_at),\n                changeFrequency: 'weekly' as const,\n                priority: 0.8,\n            }))\n        );\n    } catch (error) {\n        console.error('사이트맵 생성 중 리워드 데이터 가져오기 실패:', error);\n    }\n\n    // 4. 사이트맵 병합 및 반환\n    return [\n        ...staticPagesMaps,\n        ...votesMaps,\n        ...rewardsMaps,\n    ];\n}\n"],"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","ignoreList":[]}