{"version":3,"names":["cov_1hcs2g9k6u","actualCoverage","s","VoteRealtimeProvider","f","useVoteItem","useVoteRealtimeContext","initialState","vote","voteItems","votePicks","connectionStatus","isConnected","totalVotes","lastUpdateTime","eventCount","isLoading","error","voteRealtimeReducer","state","action","type","b","payload","reduce","sum","pick","amount","Date","updatedItems","map","item","id","newPicks","VoteRealtimeContext","_react","createContext","children","voteId","autoLoad","dispatch","useReducer","t","_useLocaleRouter","useLocaleRouter","lastEvent","_useVoteRealtime","useVoteRealtime","autoConnect","onConnectionStatusChange","status","onVoteUpdate","event","handleRealtimeEvent","useCallback","console","warn","loadVoteData","targetVoteId","mockVote","area","created_at","toISOString","deleted_at","main_image","order","result_image","start_at","stop_at","now","title","ko","en","updated_at","visible_at","vote_category","vote_content","vote_sub_category","wait_image","mockVoteItems","artist_id","group_id","vote_id","vote_total","mockVotePicks","Error","message","resetState","getVoteItemById","itemId","find","getVotesByItemId","filter","vote_item_id","getTotalVotesByItemId","getVotePercentage","itemVotes","useEffect","contextValue","_jsxruntime","jsx","Provider","value","context","useContext","voteItem","percentage"],"sources":["/Users/cheolhyun/Repositories/picnic-web/contexts/VoteRealtimeContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useReducer, useEffect, useCallback, ReactNode } from 'react';\nimport { VoteRealtimeEvent, ConnectionStatus } from '@/lib/supabase/realtime';\nimport { useVoteRealtime } from '@/hooks/useVoteRealtime';\nimport { Database } from '@/types/supabase';\nimport { useLocaleRouter } from '@/hooks/useLocaleRouter';\n\n// 투표 관련 타입 정의\ntype VoteData = Database['public']['Tables']['vote']['Row'];\ntype VoteItemData = Database['public']['Tables']['vote_item']['Row'];\ntype VotePickData = Database['public']['Tables']['vote_pick']['Row'];\n\n// 상태 타입 정의\ninterface VoteRealtimeState {\n  // 투표 정보\n  vote: VoteData | null;\n  voteItems: VoteItemData[];\n  votePicks: VotePickData[];\n  \n  // 연결 상태\n  connectionStatus: ConnectionStatus;\n  isConnected: boolean;\n  \n  // 통계\n  totalVotes: number;\n  lastUpdateTime: Date | null;\n  eventCount: number;\n  \n  // 로딩 상태\n  isLoading: boolean;\n  error: string | null;\n}\n\n// 액션 타입 정의\ntype VoteRealtimeAction =\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'SET_ERROR'; payload: string | null }\n  | { type: 'SET_CONNECTION_STATUS'; payload: ConnectionStatus }\n  | { type: 'SET_VOTE_DATA'; payload: { vote: VoteData; voteItems: VoteItemData[]; votePicks: VotePickData[] } }\n  | { type: 'UPDATE_VOTE'; payload: VoteData }\n  | { type: 'UPDATE_VOTE_ITEM'; payload: VoteItemData }\n  | { type: 'ADD_VOTE_PICK'; payload: VotePickData }\n  | { type: 'INCREMENT_EVENT_COUNT' }\n  | { type: 'RESET_STATE' };\n\n// 초기 상태\nconst initialState: VoteRealtimeState = {\n  vote: null,\n  voteItems: [],\n  votePicks: [],\n  connectionStatus: 'disconnected',\n  isConnected: false,\n  totalVotes: 0,\n  lastUpdateTime: null,\n  eventCount: 0,\n  isLoading: false,\n  error: null\n};\n\n// 리듀서 함수\nfunction voteRealtimeReducer(state: VoteRealtimeState, action: VoteRealtimeAction): VoteRealtimeState {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return { ...state, isLoading: action.payload };\n      \n    case 'SET_ERROR':\n      return { ...state, error: action.payload, isLoading: false };\n      \n    case 'SET_CONNECTION_STATUS':\n      return { \n        ...state, \n        connectionStatus: action.payload,\n        isConnected: action.payload === 'connected'\n      };\n      \n    case 'SET_VOTE_DATA':\n      const { vote, voteItems, votePicks } = action.payload;\n      return {\n        ...state,\n        vote,\n        voteItems,\n        votePicks,\n        totalVotes: votePicks.reduce((sum, pick) => sum + (pick.amount || 0), 0),\n        lastUpdateTime: new Date(),\n        isLoading: false,\n        error: null\n      };\n      \n    case 'UPDATE_VOTE':\n      return {\n        ...state,\n        vote: action.payload,\n        lastUpdateTime: new Date()\n      };\n      \n    case 'UPDATE_VOTE_ITEM':\n      const updatedItems = state.voteItems.map(item =>\n        item.id === action.payload.id ? action.payload : item\n      );\n      return {\n        ...state,\n        voteItems: updatedItems,\n        lastUpdateTime: new Date()\n      };\n      \n    case 'ADD_VOTE_PICK':\n      const newPicks = [...state.votePicks, action.payload];\n      return {\n        ...state,\n        votePicks: newPicks,\n        totalVotes: newPicks.reduce((sum, pick) => sum + (pick.amount || 0), 0),\n        lastUpdateTime: new Date()\n      };\n      \n    case 'INCREMENT_EVENT_COUNT':\n      return {\n        ...state,\n        eventCount: state.eventCount + 1\n      };\n      \n    case 'RESET_STATE':\n      return initialState;\n      \n    default:\n      return state;\n  }\n}\n\n// Context 타입 정의\ninterface VoteRealtimeContextType extends VoteRealtimeState {\n  // 액션 함수들\n  loadVoteData: (voteId: number) => Promise<void>;\n  resetState: () => void;\n  \n  // 유틸리티 함수들\n  getVoteItemById: (itemId: number) => VoteItemData | undefined;\n  getVotesByItemId: (itemId: number) => VotePickData[];\n  getTotalVotesByItemId: (itemId: number) => number;\n  getVotePercentage: (itemId: number) => number;\n}\n\n// Context 생성\nconst VoteRealtimeContext = createContext<VoteRealtimeContextType | null>(null);\n\n// Provider Props 타입\ninterface VoteRealtimeProviderProps {\n  children: ReactNode;\n  voteId?: number;\n  autoLoad?: boolean;\n}\n\n/**\n * 실시간 투표 데이터를 관리하는 Context Provider\n */\nexport function VoteRealtimeProvider({ \n  children, \n  voteId, \n  autoLoad = true \n}: VoteRealtimeProviderProps) {\n  const [state, dispatch] = useReducer(voteRealtimeReducer, initialState);\n  const { t } = useLocaleRouter();\n\n  // 실시간 연결 관리\n  const { connectionStatus, lastEvent, eventCount } = useVoteRealtime({\n    voteId,\n    autoConnect: !!voteId,\n    onConnectionStatusChange: (status) => {\n      dispatch({ type: 'SET_CONNECTION_STATUS', payload: status });\n    },\n    onVoteUpdate: (event) => {\n      handleRealtimeEvent(event);\n    }\n  });\n\n  // 실시간 이벤트 처리\n  const handleRealtimeEvent = useCallback((event: VoteRealtimeEvent) => {\n    dispatch({ type: 'INCREMENT_EVENT_COUNT' });\n    \n    switch (event.type) {\n      case 'vote_updated':\n        dispatch({ type: 'UPDATE_VOTE', payload: event.payload });\n        break;\n        \n      case 'vote_item_updated':\n        dispatch({ type: 'UPDATE_VOTE_ITEM', payload: event.payload });\n        break;\n        \n      case 'vote_pick_created':\n        dispatch({ type: 'ADD_VOTE_PICK', payload: event.payload });\n        break;\n        \n      default:\n        console.warn(`[VoteRealtimeContext] ${t('vote.unknownEventType') || '알 수 없는 이벤트 타입'}:`, event);\n    }\n  }, [t]);\n\n  // 투표 데이터 로드\n  const loadVoteData = useCallback(async (targetVoteId: number) => {\n    dispatch({ type: 'SET_LOADING', payload: true });\n    dispatch({ type: 'SET_ERROR', payload: null });\n\n    try {\n      // TODO: 실제 API 호출로 교체\n      // 현재는 더미 데이터로 대체\n      const mockVote: VoteData = {\n        id: targetVoteId,\n        area: 'global',\n        created_at: new Date().toISOString(),\n        deleted_at: null,\n        main_image: null,\n        order: 1,\n        result_image: null,\n        start_at: new Date().toISOString(),\n        stop_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n        title: { ko: t('vote.testVote.title') || '테스트 투표', en: 'Test Vote' },\n        updated_at: new Date().toISOString(),\n        visible_at: new Date().toISOString(),\n        vote_category: 'artist',\n        vote_content: t('vote.testVote.content') || '가장 좋아하는 아티스트를 선택하세요',\n        vote_sub_category: 'kpop',\n        wait_image: null\n      };\n\n      const mockVoteItems: VoteItemData[] = [\n        {\n          id: 1,\n          artist_id: 1,\n          created_at: new Date().toISOString(),\n          deleted_at: null,\n          group_id: 1,\n          updated_at: new Date().toISOString(),\n          vote_id: targetVoteId,\n          vote_total: 150\n        },\n        {\n          id: 2,\n          artist_id: 2,\n          created_at: new Date().toISOString(),\n          deleted_at: null,\n          group_id: 2,\n          updated_at: new Date().toISOString(),\n          vote_id: targetVoteId,\n          vote_total: 120\n        }\n      ];\n\n      const mockVotePicks: VotePickData[] = [];\n\n      dispatch({\n        type: 'SET_VOTE_DATA',\n        payload: {\n          vote: mockVote,\n          voteItems: mockVoteItems,\n          votePicks: mockVotePicks\n        }\n      });\n    } catch (error) {\n      console.error(`[VoteRealtimeContext] ${t('vote.loadError') || '투표 데이터 로드 오류'}:`, error);\n      dispatch({ \n        type: 'SET_ERROR', \n        payload: error instanceof Error ? error.message : (t('vote.loadErrorMessage') || '투표 데이터를 불러오는데 실패했습니다.') \n      });\n    }\n  }, [t]);\n\n  // 상태 초기화\n  const resetState = useCallback(() => {\n    dispatch({ type: 'RESET_STATE' });\n  }, []);\n\n  // 유틸리티 함수들\n  const getVoteItemById = useCallback((itemId: number) => {\n    return state.voteItems.find(item => item.id === itemId);\n  }, [state.voteItems]);\n\n  const getVotesByItemId = useCallback((itemId: number) => {\n    return state.votePicks.filter(pick => pick.vote_item_id === itemId);\n  }, [state.votePicks]);\n\n  const getTotalVotesByItemId = useCallback((itemId: number) => {\n    return getVotesByItemId(itemId).reduce((sum, pick) => sum + (pick.amount || 0), 0);\n  }, [getVotesByItemId]);\n\n  const getVotePercentage = useCallback((itemId: number) => {\n    if (state.totalVotes === 0) return 0;\n    const itemVotes = getTotalVotesByItemId(itemId);\n    return (itemVotes / state.totalVotes) * 100;\n  }, [state.totalVotes, getTotalVotesByItemId]);\n\n  // 자동 로드 효과\n  useEffect(() => {\n    if (autoLoad && voteId && connectionStatus === 'connected') {\n      loadVoteData(voteId);\n    }\n  }, [autoLoad, voteId, connectionStatus, loadVoteData]);\n\n  // Context 값 생성\n  const contextValue: VoteRealtimeContextType = {\n    ...state,\n    loadVoteData,\n    resetState,\n    getVoteItemById,\n    getVotesByItemId,\n    getTotalVotesByItemId,\n    getVotePercentage\n  };\n\n  return (\n    <VoteRealtimeContext.Provider value={contextValue}>\n      {children}\n    </VoteRealtimeContext.Provider>\n  );\n}\n\n/**\n * VoteRealtimeContext를 사용하는 커스텀 훅\n */\nexport function useVoteRealtimeContext(): VoteRealtimeContextType {\n  const context = useContext(VoteRealtimeContext);\n  \n  if (!context) {\n    throw new Error('useVoteRealtimeContext는 VoteRealtimeProvider 내부에서 사용해야 합니다.');\n  }\n  \n  return context;\n}\n\n/**\n * 특정 투표 항목의 데이터만 반환하는 훅\n */\nexport function useVoteItem(itemId: number) {\n  const { getVoteItemById, getTotalVotesByItemId, getVotePercentage } = useVoteRealtimeContext();\n  \n  return {\n    voteItem: getVoteItemById(itemId),\n    totalVotes: getTotalVotesByItemId(itemId),\n    percentage: getVotePercentage(itemId)\n  };\n} "],"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","ignoreList":[]}