{"version":3,"names":["cov_2koq57btm5","actualCoverage","s","ComponentErrorBoundary","f","ErrorBoundary","PageErrorBoundary","SectionErrorBoundary","default","_default","registerGlobalErrorHandler","withErrorBoundary","globalErrorHandler","handler","DefaultErrorFallback","error","retry","level","b","enableRetry","retryCount","maxRetries","isRetrying","canRetry","getErrorIcon","severity","_error","ErrorSeverity","CRITICAL","HIGH","MEDIUM","LOW","getContainerClasses","getContentClasses","_jsxruntime","jsx","className","jsxs","toUserMessage","isRetryable","onClick","disabled","process","env","NODE_ENV","JSON","stringify","toLogData","_react","Component","constructor","props","retryTimeoutId","handleRetry","state","console","warn","retryDelay","Math","min","pow","setState","prevState","hasError","errorId","setTimeout","getDerivedStateFromError","Date","now","random","toString","substr","componentDidCatch","errorInfo","context","createContext","setUrl","window","location","href","setUserAgent","navigator","userAgent","setAdditionalData","componentStack","errorBoundary","identifier","build","appError","ErrorHandler","handle","propagateToGlobal","addError","shouldAutoHide","duration","undefined","autoHide","onError","handlingError","fallbackError","AppError","message","ErrorCategory","UNKNOWN","originalError","componentWillUnmount","clearTimeout","render","fallback","children","errorBoundaryProps","WrappedComponent","displayName","name"],"sources":["/Users/cheolhyun/Repositories/picnic-web/components/common/ErrorBoundary.tsx"],"sourcesContent":["'use client';\n\nimport React, { Component, ReactNode } from 'react';\nimport { AppError, ErrorCategory, ErrorSeverity, ErrorHandler, createContext } from '@/utils/error';\n\n// 글로벌 에러 컨텍스트 타입 (런타임에서 사용)\ninterface GlobalErrorHandler {\n  addError?: (error: AppError | Error | string, options?: { autoHide?: boolean; duration?: number }) => string;\n}\n\n// 글로벌 에러 핸들러 참조 (Context 외부에서 접근 가능)\nlet globalErrorHandler: GlobalErrorHandler = {};\n\n// 글로벌 에러 핸들러 등록 함수\nexport function registerGlobalErrorHandler(handler: GlobalErrorHandler) {\n  globalErrorHandler = handler;\n}\n\n/**\n * 에러 바운더리 Props 인터페이스\n */\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: (error: AppError, retry: () => void) => ReactNode;\n  onError?: (error: AppError) => void;\n  level?: 'page' | 'section' | 'component';\n  identifier?: string;\n  enableRetry?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  propagateToGlobal?: boolean; // 글로벌 에러 상태로 전파할지 여부\n}\n\n/**\n * 에러 바운더리 State 인터페이스\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: AppError | null;\n  errorId: string | null;\n  retryCount: number;\n  isRetrying: boolean;\n}\n\n/**\n * 기본 에러 Fallback UI 컴포넌트\n */\nfunction DefaultErrorFallback({ \n  error, \n  retry, \n  level = 'component',\n  enableRetry = true,\n  retryCount,\n  maxRetries,\n  isRetrying\n}: { \n  error: AppError; \n  retry: () => void; \n  level?: 'page' | 'section' | 'component';\n  enableRetry?: boolean;\n  retryCount: number;\n  maxRetries: number;\n  isRetrying: boolean;\n}) {\n  const canRetry = enableRetry && retryCount < maxRetries;\n\n  const getErrorIcon = () => {\n    switch (error.severity) {\n      case ErrorSeverity.CRITICAL:\n      case ErrorSeverity.HIGH:\n        return '🚨';\n      case ErrorSeverity.MEDIUM:\n        return '⚠️';\n      case ErrorSeverity.LOW:\n        return 'ℹ️';\n      default:\n        return '❌';\n    }\n  };\n\n  const getContainerClasses = () => {\n    switch (level) {\n      case 'page':\n        return 'min-h-screen flex items-center justify-center bg-gray-50';\n      case 'section':\n        return 'min-h-[400px] flex items-center justify-center bg-gray-50 rounded-lg';\n      case 'component':\n        return 'min-h-[200px] flex items-center justify-center bg-gray-50 rounded border';\n      default:\n        return 'min-h-[200px] flex items-center justify-center bg-gray-50 rounded';\n    }\n  };\n\n  const getContentClasses = () => {\n    switch (level) {\n      case 'page':\n        return 'text-center max-w-md';\n      case 'section':\n        return 'text-center max-w-sm';\n      default:\n        return 'text-center max-w-xs';\n    }\n  };\n\n  return (\n    <div className={getContainerClasses()}>\n      <div className={getContentClasses()}>\n        <div className=\"text-4xl mb-4\">{getErrorIcon()}</div>\n        <h2 className=\"text-lg font-semibold text-gray-800 mb-2\">\n          {level === 'page' ? '페이지 오류' : '오류가 발생했습니다'}\n        </h2>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          {error.toUserMessage()}\n        </p>\n        {error.isRetryable && (\n          <div className=\"space-y-2\">\n            <button\n              onClick={retry}\n              disabled={isRetrying}\n              className=\"px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isRetrying ? '재시도 중...' : `다시 시도 (${retryCount}/${maxRetries})`}\n            </button>\n          </div>\n        )}\n        {process.env.NODE_ENV === 'development' && (\n          <details className=\"mt-4 text-left\">\n            <summary className=\"text-xs text-gray-500 cursor-pointer\">\n              개발자 정보\n            </summary>\n            <pre className=\"text-xs text-gray-400 mt-2 overflow-auto\">\n              {JSON.stringify(error.toLogData(), null, 2)}\n            </pre>\n          </details>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * React Error Boundary 컴포넌트\n * \n * 중앙화된 에러 핸들링 시스템과 통합된 에러 바운더리입니다.\n * Next.js App Router와 호환되며, 다양한 레벨에서 사용할 수 있습니다.\n */\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private retryTimeoutId: NodeJS.Timeout | null = null;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorId: null,\n      retryCount: 0,\n      isRetrying: false,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    // 에러 ID 생성 (디버깅용)\n    const errorId = `error_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    return {\n      hasError: true,\n      errorId,\n    };\n  }\n\n  async componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    try {\n      // 에러 컨텍스트 생성\n      const context = createContext()\n        .setUrl(typeof window !== 'undefined' ? window.location.href : '')\n        .setUserAgent(typeof window !== 'undefined' ? window.navigator.userAgent : '')\n        .setAdditionalData({\n          componentStack: errorInfo.componentStack,\n          errorBoundary: this.props.identifier || 'unknown',\n          level: this.props.level || 'component',\n          errorId: this.state.errorId,\n          retryCount: this.state.retryCount,\n        })\n        .build();\n\n      // 중앙화된 에러 핸들러로 처리\n      const appError = await ErrorHandler.handle(error, context);\n      \n      this.setState({ error: appError });\n\n      // 글로벌 에러 상태로 전파 (옵션이 활성화된 경우)\n      if (this.props.propagateToGlobal !== false && globalErrorHandler.addError) {\n        const shouldAutoHide = this.props.level !== 'page'; // 페이지 레벨 에러는 자동 숨김 안함\n        const duration = this.props.level === 'page' ? undefined : 8000; // 페이지 에러는 수동 해제\n        \n        globalErrorHandler.addError(appError, {\n          autoHide: shouldAutoHide,\n          duration: duration,\n        });\n      }\n\n      // 사용자 정의 에러 핸들러 호출\n      this.props.onError?.(appError);\n\n    } catch (handlingError) {\n      console.error('에러 바운더리에서 에러 처리 중 오류:', handlingError);\n      \n      // 폴백 에러 생성\n      const fallbackError = new AppError(\n        error.message || '알 수 없는 오류가 발생했습니다.',\n        ErrorCategory.UNKNOWN,\n        ErrorSeverity.MEDIUM,\n        500,\n        { originalError: error }\n      );\n      \n      this.setState({ error: fallbackError });\n\n      // 폴백 에러도 글로벌로 전파\n      if (this.props.propagateToGlobal !== false && globalErrorHandler.addError) {\n        globalErrorHandler.addError(fallbackError);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  /**\n   * 에러 상태 초기화 및 재시도\n   */\n  handleRetry = () => {\n    // 빠른 연속 재시도 방지\n    if (this.retryTimeoutId) {\n      return;\n    }\n\n    // 최대 재시도 횟수 확인 (3회)\n    if (this.state.retryCount >= 3) {\n      console.warn('최대 재시도 횟수에 도달했습니다.');\n      return;\n    }\n\n    // 재시도 간격 계산 (지수 백오프)\n    const retryDelay = Math.min(1000 * Math.pow(2, this.state.retryCount), 8000);\n\n    this.setState(prevState => ({\n      hasError: false,\n      error: null,\n      errorId: null,\n      retryCount: prevState.retryCount + 1,\n      isRetrying: true,\n    }));\n\n    // 지연 후에 재시도 가능하도록 설정\n    this.retryTimeoutId = setTimeout(() => {\n      this.retryTimeoutId = null;\n    }, retryDelay);\n  };\n\n  render() {\n    if (this.state.hasError && this.state.error) {\n      // 사용자 정의 Fallback UI가 있으면 사용\n      if (this.props.fallback) {\n        return this.props.fallback(this.state.error, this.handleRetry);\n      }\n\n      // 기본 Fallback UI 사용\n      return (\n        <DefaultErrorFallback\n          error={this.state.error}\n          retry={this.handleRetry}\n          level={this.props.level}\n          enableRetry={this.props.enableRetry}\n          retryCount={this.state.retryCount}\n          maxRetries={this.props.maxRetries || 3}\n          isRetrying={this.state.isRetrying}\n        />\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * 페이지 레벨 에러 바운더리 컴포넌트\n */\nexport function PageErrorBoundary({ \n  children, \n  fallback,\n  onError,\n  identifier \n}: Omit<ErrorBoundaryProps, 'level'>) {\n  return (\n    <ErrorBoundary\n      level=\"page\"\n      fallback={fallback}\n      onError={onError}\n      identifier={identifier}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * 섹션 레벨 에러 바운더리 컴포넌트\n */\nexport function SectionErrorBoundary({ \n  children, \n  fallback,\n  onError,\n  identifier \n}: Omit<ErrorBoundaryProps, 'level'>) {\n  return (\n    <ErrorBoundary\n      level=\"section\"\n      fallback={fallback}\n      onError={onError}\n      identifier={identifier}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * 컴포넌트 레벨 에러 바운더리 컴포넌트\n */\nexport function ComponentErrorBoundary({ \n  children, \n  fallback,\n  onError,\n  identifier \n}: Omit<ErrorBoundaryProps, 'level'>) {\n  return (\n    <ErrorBoundary\n      level=\"component\"\n      fallback={fallback}\n      onError={onError}\n      identifier={identifier}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * 비동기 컴포넌트용 에러 바운더리 HOC\n */\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  errorBoundaryProps?: Omit<ErrorBoundaryProps, 'children'>\n) {\n  const WrappedComponent = (props: P) => (\n    <ErrorBoundary {...errorBoundaryProps}>\n      <Component {...props} />\n    </ErrorBoundary>\n  );\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n}\n\nexport default ErrorBoundary; "],"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","ignoreList":[]}