{"version":3,"names":["cov_22uvixzpho","actualCoverage","s","GET","request","f","user","_server1","getServerUser","b","_server","NextResponse","json","success","error","status","searchParams","URL","url","page","parseInt","get","limit","offset","supabase","createServerSupabaseClient","count","totalCount","countError","from","select","head","eq","id","is","console","data","posts","postsError","order","ascending","range","postIds","map","p","post_id","commentCounts","length","commentData","in","forEach","comment","formattedPosts","post","boardName","boards","name","boardNameObj","ko","en","title","content","viewCount","view_count","commentCount","createdAt","created_at","isAnonymous","is_anonymous","totalPages","Math","ceil","hasNext","hasPrevious","pagination"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/user/posts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient, getServerUser } from '@/lib/supabase/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // 1. 인증된 사용자 확인\n    const user = await getServerUser();\n    if (!user) {\n      return NextResponse.json(\n        { success: false, error: '로그인이 필요합니다.' },\n        { status: 401 }\n      );\n    }\n\n    // 2. 쿼리 파라미터 파싱\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const offset = (page - 1) * limit;\n\n    // 3. Supabase 클라이언트 생성\n    const supabase = await createServerSupabaseClient();\n\n    // 4. 총 게시물 수 조회 (삭제되지 않은 것만)\n    const { count: totalCount, error: countError } = await supabase\n      .from('posts')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', user.id)\n      .is('deleted_at', null);\n\n    if (countError) {\n      console.error('게시물 수 조회 에러:', countError);\n      return NextResponse.json(\n        { success: false, error: '게시물 수 조회에 실패했습니다.' },\n        { status: 500 }\n      );\n    }\n\n    // 5. 게시물 목록 조회 (게시판 정보 포함)\n    const { data: posts, error: postsError } = await supabase\n      .from('posts')\n      .select(`\n        post_id,\n        title,\n        content,\n        view_count,\n        created_at,\n        is_anonymous,\n        boards (\n          board_id,\n          name\n        )\n      `)\n      .eq('user_id', user.id)\n      .is('deleted_at', null)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (postsError) {\n      console.error('게시물 조회 에러:', postsError);\n      return NextResponse.json(\n        { success: false, error: '게시물 조회에 실패했습니다.' },\n        { status: 500 }\n      );\n    }\n\n    // 6. 각 게시물의 댓글 수를 별도 조회\n    const postIds = posts?.map(p => p.post_id) || [];\n    let commentCounts: { [key: string]: number } = {};\n    \n    if (postIds.length > 0) {\n      const { data: commentData } = await supabase\n        .from('comments')\n        .select('post_id')\n        .in('post_id', postIds)\n        .is('deleted_at', null);\n      \n      // 댓글 수 계산\n      commentData?.forEach(comment => {\n        commentCounts[comment.post_id] = (commentCounts[comment.post_id] || 0) + 1;\n      });\n    }\n\n    // 7. 데이터 변환\n    const formattedPosts = posts?.map(post => {\n      // 게시판 이름 추출 (다국어 지원)\n      let boardName: string | null = null;\n      if ((post as any).boards?.name) {\n        const boardNameObj = (post as any).boards.name;\n        if (typeof boardNameObj === 'object') {\n          boardName = boardNameObj.ko || boardNameObj.en || 'Unknown Board';\n        } else if (typeof boardNameObj === 'string') {\n          boardName = boardNameObj;\n        }\n      }\n\n      return {\n        id: post.post_id,\n        title: post.title || '제목 없음',\n        content: post.content || '',\n        viewCount: post.view_count || 0,\n        commentCount: commentCounts[post.post_id] || 0,\n        createdAt: post.created_at,\n        boardName,\n        isAnonymous: post.is_anonymous || false\n      };\n    }) || [];\n\n    // 8. 페이지네이션 계산\n    const totalPages = Math.ceil((totalCount || 0) / limit);\n    const hasNext = page < totalPages;\n    const hasPrevious = page > 1;\n\n    return NextResponse.json({\n      success: true,\n      data: formattedPosts,\n      pagination: {\n        page,\n        limit,\n        totalCount: totalCount || 0,\n        totalPages,\n        hasNext,\n        hasPrevious\n      }\n    });\n\n  } catch (error) {\n    console.error('게시물 내역 조회 에러:', error);\n    return NextResponse.json(\n      { success: false, error: '서버 오류가 발생했습니다.' },\n      { status: 500 }\n    );\n  }\n} "],"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","ignoreList":[]}