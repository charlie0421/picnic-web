{"version":3,"names":["cov_24ndyu6ih9","actualCoverage","s","usePeriodicAuthVerification","DEFAULT_VERIFICATION_INTERVAL","WECHAT_AUTH_KEYS","options","b","f","interval","onAuthFailure","onAuthSuccess","onNetworkError","enabled","includeWeChatVerification","isAuthenticated","user","session","_authprovider","useAuth","intervalRef","_react","useRef","isVerifyingRef","verificationCountRef","lastVerificationRef","verifyAuthState","useCallback","current","console","log","isValid","Date","hasUser","hasSession","timestamp","toISOString","warn","reason","expires_at","expiryTime","now","timeUntilExpiry","getTime","minutesLeft","Math","floor","provider","app_metadata","wechatTokenValid","some","key","value","localStorage","getItem","response","fetch","method","credentials","headers","ok","status","data","json","valid","message","error","networkError","Error","authError","manualVerification","result","startPeriodicVerification","clearInterval","setInterval","stopPeriodicVerification","useEffect","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","isVerifying","verificationCount","lastVerification"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/usePeriodicAuthVerification.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useRef, useCallback } from 'react';\nimport { createBrowserSupabaseClient } from '@/lib/supabase/client';\nimport { useAuth } from '@/lib/supabase/auth-provider';\n\n// 검증 간격 설정 (기본: 5분)\nconst DEFAULT_VERIFICATION_INTERVAL = 5 * 60 * 1000;\n\n// WeChat 관련 인증 키들\nconst WECHAT_AUTH_KEYS = [\n  'wechat_auth_token',\n  'wechat_auth_state', \n  'wechat_login_state',\n];\n\nexport interface PeriodicAuthVerificationOptions {\n  /**\n   * 검증 간격 (밀리초)\n   * @default 300000 (5분)\n   */\n  interval?: number;\n  \n  /**\n   * 인증 실패 시 호출되는 콜백\n   */\n  onAuthFailure?: (reason: string) => void;\n  \n  /**\n   * 검증 성공 시 호출되는 콜백\n   */\n  onAuthSuccess?: () => void;\n  \n  /**\n   * 네트워크 오류 시 호출되는 콜백\n   */\n  onNetworkError?: (error: Error) => void;\n  \n  /**\n   * 훅 활성화 여부\n   * @default true\n   */\n  enabled?: boolean;\n  \n  /**\n   * WeChat 로그인 처리 여부\n   * @default true\n   */\n  includeWeChatVerification?: boolean;\n}\n\n/**\n * 주기적으로 인증 상태를 검증하는 커스텀 훅\n * \n * @param options 검증 옵션\n * @returns 검증 관련 함수들과 상태\n */\nexport function usePeriodicAuthVerification(options: PeriodicAuthVerificationOptions = {}) {\n  const {\n    interval = DEFAULT_VERIFICATION_INTERVAL,\n    onAuthFailure,\n    onAuthSuccess,\n    onNetworkError,\n    enabled = true,\n    includeWeChatVerification = true,\n  } = options;\n\n  const { isAuthenticated, user, session } = useAuth();\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const isVerifyingRef = useRef(false);\n  const verificationCountRef = useRef(0);\n  const lastVerificationRef = useRef<Date | null>(null);\n\n  /**\n   * 종합적인 인증 상태 검증\n   */\n  const verifyAuthState = useCallback(async (): Promise<{\n    isValid: boolean;\n    reason?: string;\n    error?: Error;\n  }> => {\n    try {\n      // 중복 검증 방지\n      if (isVerifyingRef.current) {\n        console.log('🔄 [PeriodicAuth] 이미 검증 중 - 스킵');\n        return { isValid: true };\n      }\n\n      isVerifyingRef.current = true;\n      verificationCountRef.current += 1;\n      lastVerificationRef.current = new Date();\n\n      console.log(`🔍 [PeriodicAuth] 인증 상태 검증 시작 (${verificationCountRef.current}회차)`, {\n        isAuthenticated,\n        hasUser: !!user,\n        hasSession: !!session,\n        timestamp: lastVerificationRef.current.toISOString(),\n      });\n\n      // 1. 기본 인증 상태 체크\n      if (!isAuthenticated || !user || !session) {\n        console.warn('❌ [PeriodicAuth] 기본 인증 상태 실패');\n        return {\n          isValid: false,\n          reason: '기본 인증 상태가 유효하지 않습니다.',\n        };\n      }\n\n      // 2. 세션 만료 체크\n      if (session.expires_at) {\n        const expiryTime = new Date(session.expires_at * 1000);\n        const now = new Date();\n        const timeUntilExpiry = expiryTime.getTime() - now.getTime();\n\n        if (timeUntilExpiry <= 0) {\n          console.warn('⏰ [PeriodicAuth] 세션이 만료됨');\n          return {\n            isValid: false,\n            reason: '세션이 만료되었습니다.',\n          };\n        }\n\n        // 만료 10분 전 경고\n        if (timeUntilExpiry < 10 * 60 * 1000) {\n          console.warn('⚠️ [PeriodicAuth] 세션이 곧 만료됩니다:', {\n            minutesLeft: Math.floor(timeUntilExpiry / 1000 / 60),\n          });\n        }\n      }\n\n      // 3. WeChat 인증 상태 체크 (선택적)\n      if (includeWeChatVerification) {\n        const provider = session.user?.app_metadata?.provider;\n        if (provider === 'wechat') {\n          console.log('🔄 [PeriodicAuth] WeChat 인증 상태 검증');\n          \n          const wechatTokenValid = WECHAT_AUTH_KEYS.some(key => {\n            const value = localStorage.getItem(key);\n            return value && value !== 'null' && value !== 'undefined';\n          });\n\n          if (!wechatTokenValid) {\n            console.warn('🔒 [PeriodicAuth] WeChat 토큰이 유효하지 않음');\n            return {\n              isValid: false,\n              reason: 'WeChat 인증 토큰이 유효하지 않습니다.',\n            };\n          }\n        }\n      }\n\n      // 4. 서버사이드 인증 검증\n      try {\n        const response = await fetch('/api/auth/verify', {\n          method: 'GET',\n          credentials: 'include',\n          headers: {\n            'Cache-Control': 'no-cache',\n          },\n        });\n\n        if (!response.ok) {\n          console.warn('🚫 [PeriodicAuth] 서버 인증 검증 실패:', response.status);\n          return {\n            isValid: false,\n            reason: `서버 인증 검증 실패 (${response.status})`,\n          };\n        }\n\n        const data = await response.json();\n        if (!data.valid) {\n          console.warn('❌ [PeriodicAuth] 서버에서 인증 무효 응답:', data.message);\n          return {\n            isValid: false,\n            reason: data.message || '서버에서 인증이 무효하다고 응답했습니다.',\n          };\n        }\n\n        console.log('✅ [PeriodicAuth] 서버 인증 검증 성공');\n      } catch (error) {\n        const networkError = error instanceof Error ? error : new Error('알 수 없는 네트워크 오류');\n        console.warn('⚠️ [PeriodicAuth] 서버 인증 검증 네트워크 오류:', networkError.message);\n        \n        // 네트워크 오류는 인증 실패로 처리하지 않되, 콜백 호출\n        if (onNetworkError) {\n          onNetworkError(networkError);\n        }\n        \n        // 네트워크 오류 시에는 유효한 것으로 간주 (오프라인 허용)\n        return { isValid: true };\n      }\n\n      console.log('✅ [PeriodicAuth] 모든 인증 상태 검증 통과');\n      return { isValid: true };\n\n    } catch (error) {\n      const authError = error instanceof Error ? error : new Error('인증 검증 중 알 수 없는 오류');\n      console.error('💥 [PeriodicAuth] 인증 검증 중 오류:', authError);\n      \n      return {\n        isValid: false,\n        reason: '인증 검증 중 오류가 발생했습니다.',\n        error: authError,\n      };\n    } finally {\n      isVerifyingRef.current = false;\n    }\n  }, [isAuthenticated, user, session, includeWeChatVerification, onNetworkError]);\n\n  /**\n   * 수동 인증 상태 검증\n   */\n  const manualVerification = useCallback(async () => {\n    console.log('🔍 [PeriodicAuth] 수동 인증 검증 요청');\n    const result = await verifyAuthState();\n    \n    if (result.isValid) {\n      console.log('✅ [PeriodicAuth] 수동 검증 성공');\n      onAuthSuccess?.();\n    } else {\n      console.warn('❌ [PeriodicAuth] 수동 검증 실패:', result.reason);\n      onAuthFailure?.(result.reason || '인증 검증 실패');\n    }\n\n    return result;\n  }, [verifyAuthState, onAuthSuccess, onAuthFailure]);\n\n  /**\n   * 주기적 검증 시작\n   */\n  const startPeriodicVerification = useCallback(() => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    console.log(`🕐 [PeriodicAuth] 주기적 검증 시작 (${interval / 1000}초 간격)`);\n\n    intervalRef.current = setInterval(async () => {\n      console.log('⏰ [PeriodicAuth] 주기적 검증 실행');\n      \n      const result = await verifyAuthState();\n      \n      if (result.isValid) {\n        console.log('✅ [PeriodicAuth] 주기적 검증 성공');\n        onAuthSuccess?.();\n      } else {\n        console.warn('❌ [PeriodicAuth] 주기적 검증 실패 - 자동 로그아웃 필요:', result.reason);\n        onAuthFailure?.(result.reason || '주기적 인증 검증 실패');\n        \n        // 검증 실패 시 주기적 검증 중단\n        if (intervalRef.current) {\n          clearInterval(intervalRef.current);\n          intervalRef.current = null;\n        }\n      }\n    }, interval);\n  }, [interval, verifyAuthState, onAuthSuccess, onAuthFailure]);\n\n  /**\n   * 주기적 검증 중단\n   */\n  const stopPeriodicVerification = useCallback(() => {\n    if (intervalRef.current) {\n      console.log('🛑 [PeriodicAuth] 주기적 검증 중단');\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n\n  // 인증 상태 변화 감지\n  useEffect(() => {\n    if (!enabled) {\n      stopPeriodicVerification();\n      return;\n    }\n\n    if (isAuthenticated && user && session) {\n      console.log('🟢 [PeriodicAuth] 인증된 상태 - 주기적 검증 시작');\n      startPeriodicVerification();\n    } else {\n      console.log('🔴 [PeriodicAuth] 비인증 상태 - 주기적 검증 중단');\n      stopPeriodicVerification();\n    }\n\n    return () => {\n      stopPeriodicVerification();\n    };\n  }, [enabled, isAuthenticated, user, session, startPeriodicVerification, stopPeriodicVerification]);\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      stopPeriodicVerification();\n    };\n  }, [stopPeriodicVerification]);\n\n  // 페이지 가시성 변화 감지\n  useEffect(() => {\n    if (!enabled || !isAuthenticated) return;\n\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        console.log('👁️ [PeriodicAuth] 페이지 가시성 복구 - 즉시 검증 실행');\n        manualVerification();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [enabled, isAuthenticated, manualVerification]);\n\n  return {\n    // 상태\n    isVerifying: isVerifyingRef.current,\n    verificationCount: verificationCountRef.current,\n    lastVerification: lastVerificationRef.current,\n    \n    // 메서드\n    manualVerification,\n    startPeriodicVerification,\n    stopPeriodicVerification,\n    \n    // 유틸리티\n    verifyAuthState,\n  };\n}"],"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","ignoreList":[]}