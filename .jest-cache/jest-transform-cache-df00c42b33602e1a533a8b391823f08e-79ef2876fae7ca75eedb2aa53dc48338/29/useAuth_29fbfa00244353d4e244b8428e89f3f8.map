{"version":3,"names":["cov_2q44bamol9","actualCoverage","s","compareGetSessionVsGetUser","f","diagnoseSupabaseInfiniteWait","testGetSessionPerformance","testGetUserPerformance","useAuth","_authprovider","console","log","supabase","_client","createBrowserSupabaseClient","testResults","attempts","results","average","fastest","slowest","i","startTime","performance","now","result","auth","getSession","endTime","duration","push","attempt","success","b","error","data","message","toFixed","Promise","resolve","setTimeout","Error","durations","map","r","reduce","a","length","Math","min","max","table","getUser","user","sessionResults","userResults","comparison","speedup","window","testSupabasePerformance","compareSupabasePerformance","diagnostics","environment","nodeEnv","process","env","NODE_ENV","hasUrl","NEXT_PUBLIC_SUPABASE_URL","hasKey","NEXT_PUBLIC_SUPABASE_ANON_KEY","windowDefined","navigatorOnline","navigator","onLine","network","directFetchWorks","authApiWorks","sessionApiWorks","supabaseClient","canCreate","canGetSession","canExchangeCode","url","key","restResponse","race","fetch","headers","_","reject","ok","status","e","authResponse","statusText","sessionStartTime","sessionCompleted","progressMonitor","setInterval","elapsed","sessionPromise","sessionResult","clearInterval","sessionEndTime","hasData","hasSession","session","hasError","sessionError","exchangeStartTime","exchangeCompleted","exchangeMonitor","exchangePromise","exchangeCodeForSession","exchangeResult","exchangeEndTime","exchangeError","isTimeout","includes","clientError"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useAuth.ts"],"sourcesContent":["'use client';\n\n// 통합된 AuthProvider에서 내보내는 useAuth 훅을 다시 내보냅니다.\nexport { useAuth } from '@/lib/supabase/auth-provider';\n\n// 이 파일은 뒤 호환성을 위해 사용됩니다.\n// VoteDetailContent.tsx와 같은 컴포넌트가 이 경로에서 useAuth를 가져오기 때문에 보존합니다.\n\nimport { createBrowserSupabaseClient } from '@/lib/supabase/client';\n\n// 성능 진단을 위한 직접적인 getSession 테스트 함수 (레거시)\n// ⚠️ getSession()은 느립니다. 가능하면 testGetUserPerformance()를 사용하세요.\nexport async function testGetSessionPerformance() {\n  console.log('🧪 [Performance Test] getSession 성능 테스트 시작 (레거시 방식)');\n  \n  const supabase = createBrowserSupabaseClient();\n  const testResults = {\n    attempts: 3,\n    results: [] as Array<{\n      attempt: number;\n      duration: number;\n      success: boolean;\n      error?: string;\n    }>,\n    average: 0,\n    fastest: 0,\n    slowest: 0\n  };\n\n  for (let i = 1; i <= testResults.attempts; i++) {\n    const startTime = performance.now();\n    \n    try {\n      console.log(`🏃 [Performance Test] 시도 ${i}/${testResults.attempts} 시작`);\n      \n      const result = await supabase.auth.getSession();\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      testResults.results.push({\n        attempt: i,\n        duration,\n        success: !result.error && !!result.data,\n        error: result.error?.message\n      });\n      \n      console.log(`✅ [Performance Test] 시도 ${i} 완료: ${duration.toFixed(2)}ms`);\n      \n      // 시도 간 간격\n      if (i < testResults.attempts) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      testResults.results.push({\n        attempt: i,\n        duration,\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      });\n      \n      console.log(`❌ [Performance Test] 시도 ${i} 실패: ${duration.toFixed(2)}ms - ${error}`);\n    }\n  }\n\n  // 결과 분석\n  const durations = testResults.results.map(r => r.duration);\n  testResults.average = durations.reduce((a, b) => a + b, 0) / durations.length;\n  testResults.fastest = Math.min(...durations);\n  testResults.slowest = Math.max(...durations);\n  \n  console.log('📊 [Performance Test] 최종 결과:');\n  console.table(testResults.results);\n  console.log(`⚡ 평균: ${testResults.average.toFixed(2)}ms`);\n  console.log(`🏆 최고 속도: ${testResults.fastest.toFixed(2)}ms`);\n  console.log(`🐌 최저 속도: ${testResults.slowest.toFixed(2)}ms`);\n  \n  return testResults;\n}\n\n// 🚀 권장: getUser() 기반 빠른 성능 테스트 함수\nexport async function testGetUserPerformance() {\n  console.log('🧪 [Performance Test] getUser 성능 테스트 시작 (권장 방식)');\n  \n  const supabase = createBrowserSupabaseClient();\n  const testResults = {\n    attempts: 3,\n    results: [] as Array<{\n      attempt: number;\n      duration: number;\n      success: boolean;\n      error?: string;\n    }>,\n    average: 0,\n    fastest: 0,\n    slowest: 0\n  };\n\n  for (let i = 1; i <= testResults.attempts; i++) {\n    const startTime = performance.now();\n    \n    try {\n      console.log(`🏃 [Performance Test] getUser 시도 ${i}/${testResults.attempts} 시작`);\n      \n      const result = await supabase.auth.getUser();\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      testResults.results.push({\n        attempt: i,\n        duration,\n        success: !result.error && !!result.data?.user,\n        error: result.error?.message\n      });\n      \n      console.log(`✅ [Performance Test] getUser 시도 ${i} 완료: ${duration.toFixed(2)}ms`);\n      \n      // 시도 간 간격\n      if (i < testResults.attempts) {\n        await new Promise(resolve => setTimeout(resolve, 100));\n      }\n      \n    } catch (error) {\n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      testResults.results.push({\n        attempt: i,\n        duration,\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      });\n      \n      console.log(`❌ [Performance Test] getUser 시도 ${i} 실패: ${duration.toFixed(2)}ms - ${error}`);\n    }\n  }\n\n  // 결과 분석\n  const durations = testResults.results.map(r => r.duration);\n  testResults.average = durations.reduce((a, b) => a + b, 0) / durations.length;\n  testResults.fastest = Math.min(...durations);\n  testResults.slowest = Math.max(...durations);\n  \n  console.log('📊 [Performance Test] getUser 최종 결과:');\n  console.table(testResults.results);\n  console.log(`⚡ 평균: ${testResults.average.toFixed(2)}ms`);\n  console.log(`🏆 최고 속도: ${testResults.fastest.toFixed(2)}ms`);\n  console.log(`🐌 최저 속도: ${testResults.slowest.toFixed(2)}ms`);\n  \n  return testResults;\n}\n\n// 성능 비교 테스트 함수\nexport async function compareGetSessionVsGetUser() {\n  console.log('⚡ [Performance Comparison] getSession vs getUser 비교 테스트 시작');\n  \n  console.log('📊 getSession 테스트...');\n  const sessionResults = await testGetSessionPerformance();\n  \n  console.log('📊 getUser 테스트...');\n  const userResults = await testGetUserPerformance();\n  \n  const comparison = {\n    getSession: {\n      average: sessionResults.average,\n      fastest: sessionResults.fastest,\n      slowest: sessionResults.slowest\n    },\n    getUser: {\n      average: userResults.average,\n      fastest: userResults.fastest,\n      slowest: userResults.slowest\n    },\n    speedup: {\n      average: sessionResults.average / userResults.average,\n      fastest: sessionResults.fastest / userResults.fastest,\n      slowest: sessionResults.slowest / userResults.slowest\n    }\n  };\n  \n  console.log('🎯 [Performance Comparison] 비교 결과:');\n  console.table(comparison);\n  \n  if (comparison.speedup.average > 1) {\n    console.log(`🚀 getUser()가 평균 ${comparison.speedup.average.toFixed(1)}배 빠릅니다!`);\n  } else {\n    console.log(`🐌 getSession()이 더 빠릅니다 (예상치 못한 결과)`);\n  }\n  \n  return comparison;\n}\n\n// 브라우저 환경에서 전역 함수로 등록\nif (typeof window !== 'undefined') {\n  (window as any).testSupabasePerformance = testGetSessionPerformance; // 레거시 호환성\n  (window as any).testGetSessionPerformance = testGetSessionPerformance;\n  (window as any).testGetUserPerformance = testGetUserPerformance;\n  (window as any).compareSupabasePerformance = compareGetSessionVsGetUser;\n  console.log('🛠️ [useAuth] 성능 테스트 함수들이 전역으로 등록되었습니다:');\n  console.log('  - testGetSessionPerformance() : getSession 테스트 (레거시)');\n  console.log('  - testGetUserPerformance() : getUser 테스트 (권장)');\n  console.log('  - compareSupabasePerformance() : 성능 비교');\n}\n\n// 🚨 무한대기 근본 원인 진단 전용 함수 🚨\nexport async function diagnoseSupabaseInfiniteWait() {\n  console.log('🚨 [진단] Supabase 무한대기 근본 원인 종합 분석 시작');\n  \n  // 1. 기본 환경 검증\n  const diagnostics = {\n    environment: {\n      nodeEnv: process.env.NODE_ENV,\n      hasUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,\n      hasKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\n      windowDefined: typeof window !== 'undefined',\n      navigatorOnline: typeof navigator !== 'undefined' ? navigator.onLine : null\n    },\n    network: {\n      directFetchWorks: false,\n      authApiWorks: false,\n      sessionApiWorks: false\n    },\n    supabaseClient: {\n      canCreate: false,\n      canGetSession: false,\n      canExchangeCode: false\n    }\n  };\n  \n  // 2. 직접 네트워크 테스트 (Supabase 클라이언트 없이)\n  console.log('🌐 [진단] 1단계: 직접 네트워크 연결 테스트');\n  \n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL;\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n  \n  if (url && key) {\n    try {\n      // REST API 테스트\n      console.log('🔗 [진단] REST API 직접 테스트...');\n      const restResponse = await Promise.race([\n        fetch(`${url}/rest/v1/`, {\n          headers: { 'apikey': key }\n        }),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('REST API timeout')), 3000))\n      ]);\n      \n      diagnostics.network.directFetchWorks = (restResponse as Response).ok;\n      console.log(`✅ [진단] REST API 응답:`, {\n        status: (restResponse as Response).status,\n        ok: (restResponse as Response).ok\n      });\n      \n    } catch (e) {\n      console.error('❌ [진단] REST API 실패:', e);\n    }\n    \n    try {\n      // Auth API 테스트\n      console.log('🔐 [진단] Auth API 직접 테스트...');\n      const authResponse = await Promise.race([\n        fetch(`${url}/auth/v1/user`, {\n          headers: { 'apikey': key }\n        }),\n        new Promise((_, reject) => setTimeout(() => reject(new Error('Auth API timeout')), 3000))\n      ]);\n      \n      diagnostics.network.authApiWorks = (authResponse as Response).status < 500;\n      console.log(`✅ [진단] Auth API 응답:`, {\n        status: (authResponse as Response).status,\n        statusText: (authResponse as Response).statusText\n      });\n      \n    } catch (e) {\n      console.error('❌ [진단] Auth API 실패:', e);\n    }\n  }\n  \n  // 3. Supabase 클라이언트 생성 테스트\n  console.log('🏗️ [진단] 2단계: Supabase 클라이언트 생성 테스트');\n  \n  try {\n    const supabase = createBrowserSupabaseClient();\n    diagnostics.supabaseClient.canCreate = true;\n    console.log('✅ [진단] Supabase 클라이언트 생성 성공');\n    \n    // 4. getSession 상세 모니터링\n    console.log('🔍 [진단] 3단계: getSession 내부 동작 모니터링');\n    \n    const sessionStartTime = performance.now();\n    let sessionCompleted = false;\n    \n    // 진행 상황 모니터링\n    const progressMonitor = setInterval(() => {\n      if (!sessionCompleted) {\n        const elapsed = performance.now() - sessionStartTime;\n        console.log(`⏳ [진단] getSession 진행 중... ${elapsed.toFixed(0)}ms 경과`);\n      }\n    }, 1000);\n    \n    try {\n      const sessionPromise = supabase.auth.getSession();\n      \n      // 상세 타임아웃으로 모니터링\n      const sessionResult = await Promise.race([\n        sessionPromise,\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('getSession 5초 타임아웃')), 5000)\n        )\n      ]);\n      \n      sessionCompleted = true;\n      clearInterval(progressMonitor);\n      \n      const sessionEndTime = performance.now();\n      console.log('✅ [진단] getSession 완료:', {\n        duration: `${(sessionEndTime - sessionStartTime).toFixed(2)}ms`,\n        hasData: !!(sessionResult as any)?.data,\n        hasSession: !!(sessionResult as any)?.data?.session,\n        hasError: !!(sessionResult as any)?.error\n      });\n      \n      diagnostics.supabaseClient.canGetSession = true;\n      \n    } catch (sessionError) {\n      sessionCompleted = true;\n      clearInterval(progressMonitor);\n      \n      const sessionEndTime = performance.now();\n      console.error('❌ [진단] getSession 실패:', {\n        duration: `${(sessionEndTime - sessionStartTime).toFixed(2)}ms`,\n        error: (sessionError as Error).message\n      });\n    }\n    \n    // 5. exchangeCodeForSession 테스트 (더미 코드로)\n    console.log('🔄 [진단] 4단계: exchangeCodeForSession 테스트');\n    \n    const exchangeStartTime = performance.now();\n    let exchangeCompleted = false;\n    \n    const exchangeMonitor = setInterval(() => {\n      if (!exchangeCompleted) {\n        const elapsed = performance.now() - exchangeStartTime;\n        console.log(`⏳ [진단] exchangeCodeForSession 진행 중... ${elapsed.toFixed(0)}ms 경과`);\n      }\n    }, 1000);\n    \n    try {\n      // 더미 코드로 테스트 (실제로는 실패하겠지만 무한대기 여부 확인)\n      const exchangePromise = supabase.auth.exchangeCodeForSession('dummy-code-for-testing');\n      \n      const exchangeResult = await Promise.race([\n        exchangePromise,\n        new Promise((_, reject) => \n          setTimeout(() => reject(new Error('exchangeCodeForSession 5초 타임아웃')), 5000)\n        )\n      ]);\n      \n      exchangeCompleted = true;\n      clearInterval(exchangeMonitor);\n      \n      const exchangeEndTime = performance.now();\n      console.log('✅ [진단] exchangeCodeForSession 응답 받음:', {\n        duration: `${(exchangeEndTime - exchangeStartTime).toFixed(2)}ms`,\n        hasData: !!(exchangeResult as any)?.data,\n        hasError: !!(exchangeResult as any)?.error\n      });\n      \n      diagnostics.supabaseClient.canExchangeCode = true;\n      \n    } catch (exchangeError) {\n      exchangeCompleted = true;\n      clearInterval(exchangeMonitor);\n      \n      const exchangeEndTime = performance.now();\n      console.log('📊 [진단] exchangeCodeForSession 결과:', {\n        duration: `${(exchangeEndTime - exchangeStartTime).toFixed(2)}ms`,\n        error: (exchangeError as Error).message,\n        isTimeout: (exchangeError as Error).message.includes('타임아웃')\n      });\n    }\n    \n  } catch (clientError) {\n    console.error('❌ [진단] Supabase 클라이언트 생성 실패:', clientError);\n  }\n  \n  // 6. 최종 진단 결과\n  console.log('📋 [진단] 최종 분석 결과:', diagnostics);\n  \n  // 7. 추천 해결책\n  console.log('💡 [진단] 추천 해결책:');\n  \n  if (!diagnostics.network.directFetchWorks) {\n    console.log('🔴 네트워크 연결 문제: Supabase 서버에 연결할 수 없습니다.');\n    console.log('   - 인터넷 연결 확인');\n    console.log('   - VPN 또는 방화벽 설정 확인');\n    console.log('   - Supabase 프로젝트 상태 확인');\n  }\n  \n  if (!diagnostics.network.authApiWorks) {\n    console.log('🔴 Auth API 문제: 인증 서버에 연결할 수 없습니다.');\n    console.log('   - Supabase 프로젝트 설정 확인');\n    console.log('   - API 키 유효성 확인');\n  }\n  \n  if (!diagnostics.supabaseClient.canGetSession && diagnostics.network.authApiWorks) {\n    console.log('🔴 getSession 내부 문제: Auth API는 작동하지만 getSession이 무응답');\n    console.log('   - Supabase 클라이언트 설정 문제 가능성');\n    console.log('   - 브라우저 호환성 문제 가능성');\n  }\n  \n  return diagnostics;\n}\n\n// 전역 등록\nif (typeof window !== 'undefined') {\n  (window as any).testSupabasePerformance = testGetSessionPerformance; // 레거시 호환성\n  (window as any).testGetSessionPerformance = testGetSessionPerformance;\n  (window as any).testGetUserPerformance = testGetUserPerformance; \n  (window as any).compareSupabasePerformance = compareGetSessionVsGetUser;\n  (window as any).diagnoseSupabaseInfiniteWait = diagnoseSupabaseInfiniteWait;\n  \n  console.log('🛠️ [useAuth] 진단 함수들이 전역으로 등록되었습니다:');\n  console.log('  - testGetSessionPerformance() : getSession 테스트 (레거시)');\n  console.log('  - testGetUserPerformance() : getUser 테스트 (권장 ⭐)');\n  console.log('  - compareSupabasePerformance() : 성능 비교');\n  console.log('  - diagnoseSupabaseInfiniteWait() : 무한대기 근본 원인 분석');\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}