{"version":3,"names":["cov_1vhcphostv","actualCoverage","s","useLanguage","f","pathname","_navigation","usePathname","getCurrentLanguage","_react","useCallback","lang","split","b","formatDate","dateString","currentLang","_date","formatDateWithTimeZone","undefined","formatRelativeDate","options","formatRelativeTime","formatSmartDateInternal","context","formatSmartDate","formatPostDate","formatCommentDate","getLocalizedText","text","String","Array","isArray","length","$$typeof","_owner","type","props","console","error","result","en","ko","keys","Object","key","Error","message","input","inputType","JSON","stringify","currentLanguage"],"sources":["/Users/cheolhyun/Repositories/picnic-web/hooks/useLanguage.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { \n  formatDateWithTimeZone, \n  formatRelativeTime, \n  formatSmartDate\n} from '@/utils/date';\nimport type { SupportedLanguage } from '@/types/mypage-common';\n\nexport function useLanguage() {\n  const pathname = usePathname();\n\n  // ÌòÑÏû¨ Ïñ∏Ïñ¥ Ï∂îÏ∂ú\n  const getCurrentLanguage = useCallback((): SupportedLanguage => {\n    const lang = pathname.split('/')[1];\n    switch (lang) {\n      case 'ko':\n        return 'ko';\n      case 'ja':\n        return 'ja';\n      case 'zh':\n        return 'zh';\n      case 'id':\n        return 'id';\n      default:\n        return 'en';\n    }\n  }, [pathname]);\n\n  // Í∏∞Î≥∏ ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ (Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)\n  const formatDate = useCallback((dateString: string) => {\n    const currentLang = getCurrentLanguage();\n    return formatDateWithTimeZone(dateString, undefined, currentLang);\n  }, [getCurrentLanguage]);\n\n  // ÏÉÅÎåÄÏ†Å ÏãúÍ∞Ñ Ìè¨Îß∑ÌåÖ (Ïòà: \"3ÏãúÍ∞Ñ Ï†Ñ\", \"2Ïùº Ï†Ñ\")\n  const formatRelativeDate = useCallback((\n    dateString: string,\n    options?: {\n      useAbsolute?: boolean;\n      absoluteThreshold?: number;\n      showTime?: boolean;\n    }\n  ) => {\n    const currentLang = getCurrentLanguage();\n    return formatRelativeTime(dateString, currentLang, options);\n  }, [getCurrentLanguage]);\n\n  // Ïä§ÎßàÌä∏ ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ (Ïª®ÌÖçÏä§Ìä∏Ïóê Îî∞Îùº ÏûêÎèô ÏÑ†ÌÉù)\n  const formatSmartDateInternal = useCallback((\n    dateString: string,\n    context: 'post' | 'comment' | 'detailed' = 'post'\n  ) => {\n    const currentLang = getCurrentLanguage();\n    return formatSmartDate(dateString, currentLang, context);\n  }, [getCurrentLanguage]);\n\n  // Post/Comment Ï†ÑÏö© ÎÇ†Ïßú Ìè¨Îß∑ÌÑ∞\n  const formatPostDate = useCallback((dateString: string) => {\n    return formatSmartDateInternal(dateString, 'post');\n  }, [formatSmartDateInternal]);\n\n  const formatCommentDate = useCallback((dateString: string) => {\n    return formatSmartDateInternal(dateString, 'comment');\n  }, [formatSmartDateInternal]);\n\n\n\n  // Îã§Íµ≠Ïñ¥ ÌÖçÏä§Ìä∏ Ï≤òÎ¶¨ (Í∏∞Ï°¥ Í∏∞Îä• Ïú†ÏßÄ)\n  const getLocalizedText = useCallback((text: any): string => {\n    try {\n      if (text === null || text === undefined || text === '') {\n        return '';\n      }\n      \n      if (typeof text === 'string') {\n        return text;\n      }\n      \n      if (typeof text === 'number' || typeof text === 'boolean') {\n        return String(text);\n      }\n      \n      if (Array.isArray(text)) {\n        return text.length > 0 ? String(text[0]) : '';\n      }\n      \n      if (text.$$typeof || text._owner || text.type || text.props) {\n        console.error('üö® React Ïª¥Ìè¨ÎÑåÌä∏ Í∞êÏßÄ! Í∞ïÏ†ú Î≥ÄÌôò:', text);\n        return '[React Element Detected]';\n      }\n      \n      if (typeof text === 'object' && text !== null) {\n        const currentLang = getCurrentLanguage();\n        \n        let result: any = '';\n        \n        if (text[currentLang] !== undefined && text[currentLang] !== null) {\n          result = text[currentLang];\n        } else if (text.en !== undefined && text.en !== null) {\n          result = text.en;\n        } else if (text.ko !== undefined && text.ko !== null) {\n          result = text.ko;\n        } else {\n          const keys = Object.keys(text);\n          for (const key of keys) {\n            if (text[key] !== null && text[key] !== undefined && text[key] !== '') {\n              result = text[key];\n              break;\n            }\n          }\n        }\n        \n        if (typeof result === 'object' && result !== null) {\n          return getLocalizedText(result);\n        }\n        \n        return String(result || '');\n      }\n      \n      return String(text);\n      \n    } catch (error) {\n      console.error('üí• getLocalizedText ÏπòÎ™ÖÏ†Å Ïò§Î•ò:', {\n        error: error instanceof Error ? error.message : String(error),\n        input: text,\n        inputType: typeof text\n      });\n      \n      try {\n        return JSON.stringify(text);\n      } catch {\n        return '[Ï≤òÎ¶¨ Î∂àÍ∞ÄÎä•Ìïú Îç∞Ïù¥ÌÑ∞]';\n      }\n    }\n  }, [getCurrentLanguage]);\n\n      return {\n      // Í∏∞Î≥∏ Ï†ïÎ≥¥\n      currentLanguage: getCurrentLanguage(),\n      getCurrentLanguage,\n      \n      // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ Ìï®ÏàòÎì§\n      formatDate,              // Í∏∞Ï°¥ Ìò∏ÌôòÏÑ± (Ï†àÎåÄ ÏãúÍ∞Ñ + ÏãúÍ∞ÑÎåÄ)\n      formatRelativeDate,      // ÏÉÅÎåÄÏ†Å ÏãúÍ∞Ñ (\"3ÏãúÍ∞Ñ Ï†Ñ\")\n      formatSmartDate: formatSmartDateInternal, // Ïª®ÌÖçÏä§Ìä∏Î≥Ñ Ïä§ÎßàÌä∏ Ìè¨Îß∑ÌåÖ\n      formatPostDate,          // Í≤åÏãúÎ¨ºÏö© ÏµúÏ†ÅÌôî\n      formatCommentDate,       // ÎåìÍ∏ÄÏö© ÏµúÏ†ÅÌôî\n      \n      // Í∏∞Ï°¥ Í∏∞Îä•\n      getLocalizedText\n    };\n} "],"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","ignoreList":[]}