{"version":3,"names":["cov_20cra9ii11","actualCoverage","s","POST","request","f","console","log","body","json","code","provider","user","id_token","state","b","_server","NextResponse","error","success","status","substring","hasAppleUser","hasAppleIdToken","cookieStore","_headers","cookies","supabase","_ssr","createServerClient","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","get","name","value","set","options","remove","data","auth","exchangeCodeForSession","message","details","session","hasSession","hasUser","userId","id","app_metadata","includes","socialAuthService","_service","getSocialAuthService","callbackParams","callbackResult","handleCallback","profileError","email","stack","NODE_ENV","undefined"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/auth/exchange-code/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\nimport { getSocialAuthService } from '@/lib/supabase/social/service';\n\n// 모든 OAuth 제공자 동일 처리: 간단하고 일관된 Supabase 표준 OAuth\n\nexport async function POST(request: NextRequest) {\n  try {\n    console.log('🔧 [API] OAuth 코드 교환 시작');\n    \n    const body = await request.json();\n    const { code, provider, user, id_token, state } = body;\n\n    if (!code) {\n      return NextResponse.json(\n        { error: 'OAuth 코드가 필요합니다', success: false },\n        { status: 400 }\n      );\n    }\n\n    console.log('🔐 [API] OAuth 코드 수신:', { \n      code: code.substring(0, 10) + '...', \n      provider,\n      hasAppleUser: !!user,\n      hasAppleIdToken: !!id_token\n    });\n\n    // 🚀 서버사이드 Supabase 클라이언트 생성\n    const cookieStore = await cookies();\n    \n    const supabase = createServerClient(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n      {\n        cookies: {\n          get(name: string) {\n            return cookieStore.get(name)?.value;\n          },\n          set(name: string, value: string, options: any) {\n            cookieStore.set({ name, value, ...options });\n          },\n          remove(name: string, options: any) {\n            cookieStore.set({ name, value: '', ...options });\n          },\n        },\n      }\n    );\n\n    console.log('🔧 [API] 서버사이드 Supabase 클라이언트 생성 완료');\n\n    // 모든 제공자 동일 처리: 표준 Supabase OAuth만 사용\n\n    // 🌐 모든 제공자 공통: 표준 Supabase OAuth 사용\n    console.log('🌐 [API] 표준 Supabase OAuth 사용 (모든 제공자 동일)');\n    \n    const { data, error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      console.error('❌ [API] OAuth 코드 교환 실패:', error);\n      return NextResponse.json(\n        { \n          error: `OAuth 코드 교환 실패: ${error.message}`, \n          success: false,\n          details: error \n        },\n        { status: 400 }\n      );\n    }\n\n    if (!data?.session) {\n      console.error('❌ [API] 세션이 생성되지 않음');\n      return NextResponse.json(\n        { error: '세션이 생성되지 않았습니다', success: false },\n        { status: 400 }\n      );\n    }\n\n    console.log('✅ [API] OAuth 인증 성공:', {\n      hasSession: !!data.session,\n      hasUser: !!data.user,\n      userId: data.user?.id?.substring(0, 8) + '...',\n      provider: data.user?.app_metadata?.provider\n    });\n\n    // 🍎 Apple 특화 프로필 처리 (또는 다른 소셜 프로필 처리)\n    if (provider && ['apple', 'google'].includes(provider)) {\n      try {\n        console.log(`🔧 [API] ${provider} 프로필 처리 시작`);\n        \n        // SocialAuthService를 통한 프로필 처리\n        const socialAuthService = getSocialAuthService(supabase);\n        \n        // Apple 특화 파라미터 준비\n        const callbackParams: Record<string, string> = {};\n        if (provider === 'apple') {\n          if (user) callbackParams.user = user;\n          if (id_token) callbackParams.id_token = id_token;\n          if (state) callbackParams.state = state;\n        }\n        \n        // 콜백 처리 (프로필 생성/업데이트)\n        const callbackResult = await socialAuthService.handleCallback(\n          provider as any,\n          callbackParams\n        );\n        \n        if (callbackResult.success) {\n          console.log(`✅ [API] ${provider} 프로필 처리 성공`);\n        } else {\n          console.error(`❌ [API] ${provider} 프로필 처리 실패:`, callbackResult.error?.message);\n        }\n      } catch (profileError) {\n        console.error(`❌ [API] ${provider} 프로필 처리 중 오류:`, profileError);\n        // 프로필 처리 실패해도 로그인 자체는 성공으로 처리\n      }\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'OAuth 인증 성공',\n      user: {\n        id: data.user?.id,\n        email: data.user?.email,\n        provider: data.user?.app_metadata?.provider\n      }\n    });\n\n  } catch (error: any) {\n    console.error('❌ [API] 서버 오류:', error);\n    return NextResponse.json(\n      { \n        error: `서버 오류: ${error.message}`, \n        success: false,\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      },\n      { status: 500 }\n    );\n  }\n} "],"mappings":"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","ignoreList":[]}