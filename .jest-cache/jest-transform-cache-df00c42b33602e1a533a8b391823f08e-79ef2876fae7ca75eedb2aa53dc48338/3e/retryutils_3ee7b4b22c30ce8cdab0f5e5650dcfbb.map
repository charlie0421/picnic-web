{"version":3,"names":["withRetry","cov_hr17ozlva","f","s","withTimeout","defaultOptions","maxRetries","initialDelay","maxDelay","factor","fn","options","b","retryOptions","args","lastError","delay","attempt","isRetry","console","log","error","onRetry","Promise","resolve","setTimeout","Math","min","timeoutMs","race","_","reject","Error"],"sources":["/Users/cheolhyun/Repositories/picnic-web/utils/api/retry-utils.ts"],"sourcesContent":["/**\n * API 요청 실패 시 재시도 기능 구현\n */\n\n// 재시도 옵션 타입 정의\ninterface RetryOptions {\n  maxRetries: number;       // 최대 재시도 횟수\n  initialDelay: number;     // 첫 번째 재시도 전 지연 시간(ms)\n  maxDelay: number;         // 최대 지연 시간(ms)\n  factor: number;           // 지수 백오프 계수\n  onRetry?: (error: any, attempt: number) => void;  // 재시도 시 콜백\n}\n\n// 기본 재시도 옵션\nconst defaultOptions: RetryOptions = {\n  maxRetries: 3,\n  initialDelay: 300,\n  maxDelay: 3000,\n  factor: 2,\n};\n\n/**\n * API 함수를 재시도 메커니즘으로 감싸는 함수\n * @param fn 원본 API 함수\n * @param options 재시도 옵션\n * @returns 재시도 메커니즘이 적용된 함수\n */\nexport function withRetry<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  options: Partial<RetryOptions> = {}\n): (...args: Parameters<T>) => Promise<ReturnType<T>> {\n  const retryOptions = { ...defaultOptions, ...options };\n\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    let lastError: any;\n    let delay = retryOptions.initialDelay;\n\n    for (let attempt = 0; attempt <= retryOptions.maxRetries; attempt++) {\n      try {\n        // 첫 시도이거나 마지막 시도가 아니면 로그를 남기지 않음\n        const isRetry = attempt > 0;\n\n        if (isRetry) {\n          console.log(`API 요청 재시도 중... (${attempt}/${retryOptions.maxRetries})`);\n        }\n\n        // API 함수 호출\n        return await fn(...args);\n      } catch (error) {\n        lastError = error;\n\n        if (attempt < retryOptions.maxRetries) {\n          // 재시도 콜백 호출\n          if (retryOptions.onRetry) {\n            retryOptions.onRetry(error, attempt + 1);\n          }\n\n          // 지수 백오프 지연\n          await new Promise(resolve => setTimeout(resolve, delay));\n          delay = Math.min(delay * retryOptions.factor, retryOptions.maxDelay);\n        }\n      }\n    }\n\n    // 모든 재시도 실패 시 마지막 오류 throw\n    console.error(`모든 재시도 실패 (${retryOptions.maxRetries}회):`, lastError);\n    throw lastError;\n  };\n}\n\n/**\n * API 요청에 타임아웃을 추가하는 함수\n * @param fn 원본 API 함수\n * @param timeoutMs 타임아웃 시간(ms)\n * @returns 타임아웃이 적용된 함수\n */\nexport function withTimeout<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  timeoutMs: number = 10000\n): (...args: Parameters<T>) => Promise<ReturnType<T>> {\n  return async (...args: Parameters<T>): Promise<ReturnType<T>> => {\n    return Promise.race([\n      fn(...args),\n      new Promise<never>((_, reject) => {\n        setTimeout(() => reject(new Error(`API 요청 타임아웃 (${timeoutMs}ms)`)), timeoutMs);\n      }),\n    ]) as Promise<ReturnType<T>>;\n  };\n} "],"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","ignoreList":[]}