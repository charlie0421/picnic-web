{"version":3,"names":["GET","cov_10t2aim86t","f","s","POST","dynamic","request","supabase","_supabasejs","createClient","process","env","NEXT_PUBLIC_SUPABASE_URL","NEXT_PUBLIC_SUPABASE_ANON_KEY","host","b","headers","get","protocol","includes","baseUrl","redirectTo","data","error","auth","signInWithOAuth","provider","options","queryParams","access_type","prompt","console","_server","NextResponse","json","message","status","url","redirect","requestBody","code","idToken","SUPABASE_SERVICE_ROLE_KEY","autoRefreshToken","persistSession","payload","_google","parseGoogleIdToken","userProfile","normalizeGoogleProfile","success","profile","clientId","NEXT_PUBLIC_GOOGLE_CLIENT_ID","clientSecret","GOOGLE_CLIENT_SECRET","redirectUri","tokenResponse","fetch","method","cache","body","URLSearchParams","client_id","client_secret","redirect_uri","grant_type","ok","errorData","tokenData","userInfoResponse","Authorization","access_token","userData","tokens","refresh_token","id_token","expires_in"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/auth/google/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport { Database } from \"@/types/supabase\";\nimport {\n  normalizeGoogleProfile,\n  parseGoogleIdToken,\n} from \"@/lib/supabase/social/google\";\n\n// Next.js 15.3.1에서는 GET 핸들러도 기본적으로 캐싱되지 않도록 변경되었습니다.\n// 필요한 경우 dynamic = 'force-static' 또는 fetchCache = 'default-cache' 옵션을 사용할 수 있습니다.\nexport const dynamic = \"force-dynamic\"; // POST 요청이므로 항상 동적으로 처리\n\n/**\n * Google OAuth 시작 API (GET)\n *\n * 이 API는 Google OAuth 로그인 프로세스를 시작합니다.\n * Supabase의 signInWithOAuth를 사용하여 Google OAuth URL을 생성하고\n * 클라이언트를 해당 URL로 리다이렉트합니다.\n */\nexport async function GET(request: NextRequest) {\n  try {\n    // 서버 측 Supabase 클라이언트 생성\n    const supabase = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    );\n\n    // 현재 호스트를 동적으로 감지하여 리다이렉트 URL 생성\n    const host = request.headers.get(\"host\") || \"localhost:3000\";\n    const protocol = host.includes(\"localhost\") ? \"http\" : \"https\";\n    const baseUrl = `${protocol}://${host}`;\n\n    // 리다이렉트 URL 설정\n    const redirectTo = `${baseUrl}/auth/callback/google`;\n\n    // Supabase를 통한 Google OAuth 로그인 시작\n    const { data, error } = await supabase.auth.signInWithOAuth({\n      provider: \"google\",\n      options: {\n        redirectTo,\n        queryParams: {\n          access_type: \"offline\",\n          prompt: \"consent\",\n        },\n      },\n    });\n\n    if (error) {\n      console.error('Google OAuth 시작 실패:', error);\n      return NextResponse.json(\n        { error: `Google OAuth 시작 실패: ${error.message}` },\n        { status: 400 }\n      );\n    }\n\n    // OAuth URL로 리다이렉트\n    if (data.url) {\n      return NextResponse.redirect(data.url);\n    }\n\n    return NextResponse.json(\n      { error: \"OAuth URL을 생성할 수 없습니다.\" },\n      { status: 500 }\n    );\n  } catch (error) {\n    console.error('Google OAuth GET API 에러:', error);\n    return NextResponse.json(\n      { error: '서버 내부 오류가 발생했습니다' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * Google OAuth 토큰 교환 API (POST)\n *\n * 이 API는 Google OAuth 콜백으로부터 받은 코드를 사용하여\n * 액세스 토큰과 사용자 정보를 가져오는 역할을 합니다.\n * 주로 Supabase 콜백 처리 이후 추가 작업이 필요한 경우 사용됩니다.\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const requestBody = await request.json();\n    const { code, idToken } = requestBody;\n\n    // 필수 파라미터 검증\n    if (!code && !idToken) {\n      return NextResponse.json(\n        { error: \"코드 또는 ID 토큰이 필요합니다.\" },\n        { status: 400 }\n      );\n    }\n\n    // 서버 측 Supabase 클라이언트 생성\n    const supabase = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!, // 서비스 롤 키 사용 (주의: 서버 측에서만 사용)\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false,\n        },\n      },\n    );\n\n    // ID 토큰이 제공된 경우, 해당 토큰 파싱 및 검증\n    if (idToken) {\n      try {\n        const payload = parseGoogleIdToken(idToken);\n        const userProfile = normalizeGoogleProfile(payload);\n\n        return NextResponse.json({\n          success: true,\n          profile: userProfile,\n        });\n      } catch (error) {\n        console.error('ID 토큰 검증 실패:', error);\n        return NextResponse.json(\n          { error: \"ID 토큰 검증 실패\" },\n          { status: 400 }\n        );\n      }\n    }\n\n    // 코드가 제공된 경우, Google API로 토큰 교환\n    // 이 로직은 주로 Supabase가 처리하지 못하는 특수한 경우에만 필요합니다.\n    // 일반적인 OAuth 흐름에서는 Supabase의 콜백 처리를 사용하는 것이 권장됩니다.\n    \n    // 클라이언트 ID와 시크릿이 환경 변수에 설정되어 있어야 함\n    const clientId = process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID;\n    const clientSecret = process.env.GOOGLE_CLIENT_SECRET;\n\n    // 현재 호스트를 동적으로 감지하여 리다이렉트 URL 생성\n    const host = request.headers.get(\"host\") || \"localhost:3000\";\n    const protocol = host.includes(\"localhost\") ? \"http\" : \"https\";\n    const baseUrl = `${protocol}://${host}`;\n    const redirectUri = `${baseUrl}/auth/callback/google`;\n\n    if (!clientId || !clientSecret) {\n      return NextResponse.json(\n        { error: \"Google OAuth 클라이언트 ID 또는 시크릿이 설정되지 않았습니다.\" },\n        { status: 500 }\n      );\n    }\n\n    // Google OAuth 토큰 교환 요청\n    const tokenResponse = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      cache: \"no-store\", // Next.js 15.3.1에서 명시적으로 no-store 설정\n      body: new URLSearchParams({\n        code,\n        client_id: clientId,\n        client_secret: clientSecret,\n        redirect_uri: redirectUri,\n        grant_type: \"authorization_code\",\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n      const errorData = await tokenResponse.json();\n      console.error('토큰 교환 실패:', errorData);\n      return NextResponse.json(\n        { error: `토큰 교환 실패: ${errorData.error}` },\n        { status: 400 }\n      );\n    }\n\n    const tokenData = await tokenResponse.json();\n\n    // 액세스 토큰을 사용하여 사용자 정보 가져오기\n    const userInfoResponse = await fetch(\n      \"https://www.googleapis.com/oauth2/v3/userinfo\",\n      {\n        headers: {\n          Authorization: `Bearer ${tokenData.access_token}`,\n        },\n        cache: \"no-store\", // Next.js 15.3.1에서 명시적으로 no-store 설정\n      },\n    );\n\n    if (!userInfoResponse.ok) {\n      const errorData = await userInfoResponse.json();\n      console.error('사용자 정보 가져오기 실패:', errorData);\n      return NextResponse.json(\n        { error: \"사용자 정보 가져오기 실패\" },\n        { status: 400 }\n      );\n    }\n\n    const userData = await userInfoResponse.json();\n    const userProfile = normalizeGoogleProfile(userData);\n\n    return NextResponse.json({\n      success: true,\n      tokens: {\n        access_token: tokenData.access_token,\n        refresh_token: tokenData.refresh_token,\n        id_token: tokenData.id_token,\n        expires_in: tokenData.expires_in,\n      },\n      profile: userProfile,\n    });\n  } catch (error) {\n    console.error('Google OAuth POST API 에러:', error);\n    return NextResponse.json(\n      { error: '서버 내부 오류가 발생했습니다' },\n      { status: 500 }\n    );\n  }\n}\n"],"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","ignoreList":[]}