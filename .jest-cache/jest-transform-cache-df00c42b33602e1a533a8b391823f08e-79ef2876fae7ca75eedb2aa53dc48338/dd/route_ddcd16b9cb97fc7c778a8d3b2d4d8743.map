{"version":3,"names":["cov_2fhqnq86ip","actualCoverage","s","GET","request","f","user","_server1","getServerUser","b","_server","NextResponse","json","error","status","searchParams","URL","url","page","parseInt","get","limit","offset","supabase","createServerSupabaseClient","data","voteHistory","from","select","eq","id","is","order","ascending","range","console","count","totalCount","head","totalStarCandyData","totalStarCandyUsed","reduce","sum","item","amount","uniqueArtistsData","uniqueArtistIds","Set","forEach","vote_item","artist_id","add","totalSupportedArtists","size","safeMultiLangText","text","en","ko","JSON","stringify","String","transformedHistory","map","artistImage","artist","image","log","artistId","artistName","name","imageUrl","imageType","imageLength","length","hasArtist","hasVoteItem","voteId","vote_id","voteItemId","vote_item_id","createdAt","created_at","vote","title","startAt","start_at","stopAt","stop_at","mainImage","main_image","area","voteCategory","vote_category","voteItem","groupId","group_id","artistGroup","artist_group","success","pagination","totalPages","Math","ceil","hasNext","statistics"],"sources":["/Users/cheolhyun/Repositories/picnic-web/app/api/user/vote-history/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createServerSupabaseClient, getServerUser } from '@/lib/supabase/server';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const user = await getServerUser();\n    if (!user) {\n      return NextResponse.json({ error: '인증이 필요합니다.' }, { status: 401 });\n    }\n\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1');\n    const limit = parseInt(searchParams.get('limit') || '10');\n    const offset = (page - 1) * limit;\n\n    const supabase = await createServerSupabaseClient();\n\n    // 투표 내역 조회 (최신순)\n    const { data: voteHistory, error } = await supabase\n      .from('vote_pick')\n      .select(`\n        id,\n        vote_id,\n        vote_item_id,\n        amount,\n        created_at,\n        vote:vote_id (\n          id,\n          title,\n          start_at,\n          stop_at,\n          main_image,\n          area,\n          vote_category\n        ),\n        vote_item:vote_item_id (\n          id,\n          artist_id,\n          group_id,\n          artist (\n            id,\n            name,\n            image,\n            artist_group (\n              id,\n              name\n            )\n          )\n        )\n      `)\n      .eq('user_id', user.id)\n      .is('deleted_at', null)\n      .order('created_at', { ascending: false })\n      .range(offset, offset + limit - 1);\n\n    if (error) {\n      console.error('투표 내역 조회 실패:', error);\n      return NextResponse.json({ error: '투표 내역 조회에 실패했습니다.' }, { status: 500 });\n    }\n\n    // 전체 투표 수 조회\n    const { count: totalCount } = await supabase\n      .from('vote_pick')\n      .select('*', { count: 'exact', head: true })\n      .eq('user_id', user.id)\n      .is('deleted_at', null);\n\n    // 전체 통계 조회\n    // 1. 총 사용한 스타캔디 계산\n    const { data: totalStarCandyData } = await supabase\n      .from('vote_pick')\n      .select('amount')\n      .eq('user_id', user.id)\n      .is('deleted_at', null);\n    \n    const totalStarCandyUsed = totalStarCandyData?.reduce((sum, item) => sum + (item.amount || 0), 0) || 0;\n\n    // 2. 응원한 고유 아티스트 수 계산\n    const { data: uniqueArtistsData } = await supabase\n      .from('vote_pick')\n      .select(`\n        vote_item:vote_item_id (\n          artist_id\n        )\n      `)\n      .eq('user_id', user.id)\n      .is('deleted_at', null);\n\n    const uniqueArtistIds = new Set();\n    uniqueArtistsData?.forEach(item => {\n      if (item.vote_item?.artist_id) {\n        uniqueArtistIds.add(item.vote_item.artist_id);\n      }\n    });\n    const totalSupportedArtists = uniqueArtistIds.size;\n\n    // 안전한 다국어 텍스트 처리 함수\n    const safeMultiLangText = (text: any) => {\n      if (!text) return '';\n      if (typeof text === 'string') return text;\n      if (typeof text === 'object' && text !== null) {\n        // 이미 다국어 객체인 경우 그대로 반환\n        if (text.en || text.ko) return text;\n        // 예상치 못한 객체인 경우 문자열로 변환\n        return JSON.stringify(text);\n      }\n      return String(text);\n    };\n\n    // 데이터 변환 (안전성 강화)\n    const transformedHistory = voteHistory?.map(item => {\n      // 🐛 디버깅: 아티스트 이미지 URL 확인\n      const artistImage = item.vote_item?.artist?.image;\n      if (artistImage) {\n        console.log('🎨 API에서 아티스트 이미지 발견:', {\n          artistId: item.vote_item?.artist?.id,\n          artistName: item.vote_item?.artist?.name,\n          imageUrl: artistImage,\n          imageType: typeof artistImage,\n          imageLength: artistImage?.length\n        });\n      } else {\n        console.log('⚠️ 아티스트 이미지 없음:', {\n          artistId: item.vote_item?.artist?.id,\n          artistName: item.vote_item?.artist?.name,\n          hasArtist: !!item.vote_item?.artist,\n          hasVoteItem: !!item.vote_item\n        });\n      }\n\n      return {\n        id: item.id,\n        voteId: item.vote_id,\n        voteItemId: item.vote_item_id,\n        amount: item.amount,\n        createdAt: item.created_at,\n        vote: item.vote ? {\n          id: item.vote.id,\n          title: safeMultiLangText(item.vote.title),\n          startAt: item.vote.start_at,\n          stopAt: item.vote.stop_at,\n          mainImage: item.vote.main_image,\n          area: item.vote.area || '',\n          voteCategory: safeMultiLangText(item.vote.vote_category)\n        } : null,\n        voteItem: item.vote_item ? {\n          id: item.vote_item.id,\n          artistId: item.vote_item.artist_id,\n          groupId: item.vote_item.group_id,\n          artist: item.vote_item.artist ? {\n            id: item.vote_item.artist.id,\n            name: safeMultiLangText(item.vote_item.artist.name),\n            image: item.vote_item.artist.image,\n            artistGroup: item.vote_item.artist.artist_group ? {\n              id: item.vote_item.artist.artist_group.id,\n              name: safeMultiLangText(item.vote_item.artist.artist_group.name)\n            } : null\n          } : null\n        } : null\n      };\n    }) || [];\n\n    return NextResponse.json({\n      success: true,\n      data: transformedHistory,\n      pagination: {\n        page,\n        limit,\n        totalCount: totalCount || 0,\n        totalPages: Math.ceil((totalCount || 0) / limit),\n        hasNext: offset + limit < (totalCount || 0)\n      },\n      statistics: {\n        totalStarCandyUsed,\n        totalSupportedArtists\n      }\n    });\n\n  } catch (error) {\n    console.error('투표 내역 API 오류:', error);\n    return NextResponse.json({ error: '서버 오류가 발생했습니다.' }, { status: 500 });\n  }\n} "],"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","ignoreList":[]}