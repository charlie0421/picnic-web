{"version":3,"names":["AuthCallbackClient","cov_ahp0bnjks","s","useSafeGlobalLoading","f","context","_react","useContext","_GlobalLoadingContext","GlobalLoadingContext","b","console","warn","isLoading","setIsLoading","loading","log","debugLog","message","data","process","env","NODE_ENV","debugError","error","provider","router","_navigation","useRouter","searchParams","useSearchParams","mounted","setMounted","useState","setError","isProcessing","setIsProcessing","processedRef","useRef","useEffect","event","CustomEvent","detail","reason","window","dispatchEvent","setTimeout","immediateLoadingBar","document","getElementById","remove","minimumLoadingTime","startTime","Date","now","ensureMinimumLoading","callback","elapsed","remainingTime","Math","max","current","handleOAuthCallback","code","get","oauthError","Error","substring","appleParams","user","idToken","state","id_token","hasUser","hasIdToken","hasState","apiUrl","currentHost","location","hostname","controller","AbortController","timeoutId","abort","response","fetch","method","headers","body","JSON","stringify","signal","clearTimeout","ok","errorData","json","catch","status","success","syncResult","Promise","allSettled","credentials","AbortSignal","timeout","resolve","then","localStorage","setItem","removeItem","returnTo","returnUrl","_authredirect","handlePostLoginRedirect","undefined","handleBeforeUnload","addEventListener","removeEventListener","href","expectedPath","URL","origin","pathname","reload","err","push","_jsxruntime","jsx","className","jsxs"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/components/client/auth/AuthCallback/AuthCallbackClient.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useRef, useContext } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { handlePostLoginRedirect } from '@/utils/auth-redirect';\nimport { GlobalLoadingContext } from '@/contexts/GlobalLoadingContext';\n\ninterface AuthCallbackClientProps {\n  provider?: string;\n}\n\n// GlobalLoadingContext를 안전하게 사용하는 훅\nconst useSafeGlobalLoading = () => {\n  const context = useContext(GlobalLoadingContext);\n  if (context) {\n    return context;\n  }\n\n  // GlobalLoadingProvider가 없는 경우 빈 함수 반환\n  console.warn('GlobalLoadingProvider가 제공되지 않았습니다. 대체 구현을 사용합니다.');\n  return {\n    isLoading: false,\n    setIsLoading: (loading: boolean) => {\n      console.log('GlobalLoading 상태:', loading);\n    },\n  };\n};\n\n// 개발 환경에서만 로그 출력\nconst debugLog = (message: string, data?: any) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(message, data || '');\n  }\n};\n\nconst debugError = (message: string, data?: any) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.error(message, data || '');\n  }\n};\n\nexport default function AuthCallbackClient({\n  provider,\n}: AuthCallbackClientProps) {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { setIsLoading } = useSafeGlobalLoading();\n  const [mounted, setMounted] = useState(false); // 하이드레이션 완료 확인\n  const [error, setError] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(true);\n  \n  // 🔧 중복 처리 방지\n  const processedRef = useRef(false);\n\n  // 🔧 하이드레이션 완료 확인\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    // mounted가 false면 아직 하이드레이션이 완료되지 않았으므로 대기\n    if (!mounted) return;\n\n    // 🚀 전역 로딩바 시작 (커스텀 이벤트 + 컨텍스트 이중 보장)\n    setIsLoading(true);\n    \n    // 커스텀 이벤트로도 전역 로딩바 시작 (이중 보장)\n    try {\n      const event = new CustomEvent('startGlobalLoading', { detail: { reason: 'auth-callback-client' } });\n      window.dispatchEvent(event);\n      debugLog('🔄 [AuthCallback] 전역 로딩바 시작 (컨텍스트 + 이벤트)');\n    } catch (error) {\n      debugLog('🔄 [AuthCallback] 전역 로딩바 시작 (컨텍스트만)', error);\n    }\n    \n    // 🗑️ 즉시 로딩바 제거 (전역 로딩바로 대체)\n    setTimeout(() => {\n      const immediateLoadingBar = document.getElementById('oauth-loading');\n      if (immediateLoadingBar) {\n        debugLog('🗑️ [AuthCallback] 즉시 로딩바 제거 (전역 로딩바로 대체)');\n        immediateLoadingBar.remove();\n      }\n    }, 100);\n    \n    // 🔧 최소 로딩 시간 보장 (사용자가 로딩 상태를 인지할 수 있도록)\n    const minimumLoadingTime = 2000; // 2초로 늘려서 충분한 로딩 경험 제공\n    const startTime = Date.now();\n\n    const ensureMinimumLoading = async (callback: () => void) => {\n      const elapsed = Date.now() - startTime;\n      const remainingTime = Math.max(0, minimumLoadingTime - elapsed);\n      \n      if (remainingTime > 0) {\n        debugLog(`🔄 [AuthCallback] 최소 로딩 시간 보장: ${remainingTime}ms 대기`);\n        setTimeout(callback, remainingTime);\n      } else {\n        callback();\n      }\n    };\n\n    // 🚫 중복 처리 방지\n    if (processedRef.current) {\n      return;\n    }\n    processedRef.current = true;\n    \n    debugLog('🔍 [AuthCallback] OAuth 콜백 처리 시작');\n\n    const handleOAuthCallback = async () => {\n      try {\n        // OAuth 코드 확인\n        const code = searchParams?.get('code');\n        const oauthError = searchParams?.get('error');\n\n        if (oauthError) {\n          throw new Error(`OAuth 오류: ${oauthError}`);\n        }\n\n        if (!code) {\n          throw new Error('OAuth 코드가 없습니다');\n        }\n\n        debugLog('🔐 [AuthCallback] OAuth 코드 발견:', { code: code.substring(0, 10) + '...' });\n        \n        // Apple 특화 파라미터 수집\n        let appleParams: Record<string, string> = {};\n        if (provider === 'apple') {\n          const user = searchParams?.get('user');\n          const idToken = searchParams?.get('id_token');\n          const state = searchParams?.get('state');\n          \n          if (user) appleParams.user = user;\n          if (idToken) appleParams.id_token = idToken;\n          if (state) appleParams.state = state;\n          \n          debugLog('🍎 [AuthCallback] Apple 특화 파라미터 수집:', {\n            hasUser: !!user,\n            hasIdToken: !!idToken,\n            hasState: !!state\n          });\n        }\n        \n        debugLog('🔧 [OAuth] 서버 API로 토큰 교환 시도 (클라이언트 무한대기 회피)');\n        \n        // API 라우트를 통한 서버사이드 처리 (모든 환경 동일)\n        const apiUrl = '/api/auth/exchange-code';\n        \n        debugLog('🔗 [AuthCallback] API URL 설정:', { \n          apiUrl,\n          currentHost: window.location.hostname \n        });\n        \n        // 🔧 API 호출에 타임아웃 설정 (15초)\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), 15000);\n        \n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            code,\n            provider: provider || 'google',\n            ...appleParams, // Apple 특화 파라미터 포함\n          }),\n          signal: controller.signal,\n        });\n\n        clearTimeout(timeoutId);\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n          throw new Error(errorData.error || `Server error: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data.success) {\n          debugLog('✅ [AuthCallback] 서버사이드 OAuth 인증 성공');\n          \n          // 🔧 쿠키 동기화와 성공 처리를 병렬로 실행\n          const [syncResult] = await Promise.allSettled([\n            // 쿠키 동기화 (타임아웃 5초)\n            fetch('/api/auth/verify', {\n              method: 'GET',\n              credentials: 'include',\n              signal: AbortSignal.timeout(5000),\n            }),\n            // 성공 정보 저장 (즉시 완료)\n            Promise.resolve().then(() => {\n              if (typeof window !== 'undefined') {\n                localStorage.setItem('auth_success', 'true');\n                localStorage.setItem('auth_provider', provider || 'google');\n                localStorage.removeItem('code_verifier');\n                \n                // 🎯 최근 로그인 정보는 AuthStore에서 API를 통해 자동으로 처리됩니다\n                // (중복 처리 방지를 위해 여기서는 제거됨)\n                debugLog('ℹ️ [AuthCallback] 최근 로그인 정보는 AuthStore에서 자동 처리됩니다');\n              }\n            })\n          ]);\n          \n          // 동기화 결과 로깅 (실패해도 진행)\n          if (syncResult.status === 'fulfilled') {\n            debugLog('✅ [AuthCallback] 쿠키 동기화 성공');\n          } else {\n            debugLog('⚠️ [AuthCallback] 쿠키 동기화 실패, 하지만 진행:', syncResult.reason);\n          }\n          \n          // 🚀 즉시 로딩바 제거하지 않고 리다이렉션까지 유지\n          debugLog('✅ [AuthCallback] OAuth 처리 완료, 리다이렉션까지 로딩바 유지');\n          \n          // 🎯 OAuth 성공 시 적절한 페이지로 리디렉션\n          localStorage.removeItem('auth_return_url'); // 기존 URL 제거\n          \n          // returnTo 파라미터 확인 및 적절한 리다이렉션 URL 결정\n          const returnTo = searchParams?.get('returnTo');\n          const returnUrl = handlePostLoginRedirect(returnTo || undefined);\n\n          debugLog('🚀 [AuthCallback] OAuth 성공 → 리디렉션:', { returnTo, returnUrl });\n          \n          // 🔧 최소 로딩 시간 보장 후 리디렉션\n          ensureMinimumLoading(() => {\n            debugLog('🔄 [AuthCallback] 확실한 인증 상태 반영을 위해 강제 새로고침 실행');\n            // 성공 시에는 로딩 상태 유지 (리다이렉션 완료까지)\n            // setIsProcessing(false); // 제거: 성공 시에는 로딩바 유지\n            \n            // 리디렉션 지연 시간을 늘려서 사용자가 로딩바를 충분히 볼 수 있도록 함\n            setTimeout(() => {\n              debugLog('🚀 [AuthCallback] 로딩바 유지하면서 리디렉션 실행');\n              // 리디렉션 직전까지 로딩바 유지\n              \n              // 페이지 언로드가 시작될 때까지 로딩 상태 확실히 유지\n              const handleBeforeUnload = () => {\n                debugLog('📤 [AuthCallback] 페이지 언로드 시작 - 로딩바 유지됨');\n              };\n              \n              window.addEventListener('beforeunload', handleBeforeUnload);\n              \n              // 🎯 리다이렉션 직전에 로딩바 상태 확인 (너무 자주 체크하지 않음)\n              debugLog('🚀 [AuthCallback] 리다이렉션 준비 완료, 로딩바 계속 유지');\n              \n              // 실제 리디렉션 실행\n              setTimeout(() => {\n                window.removeEventListener('beforeunload', handleBeforeUnload);\n                debugLog('🚀 [AuthCallback] 로딩바 유지하면서 리디렉션 실행');\n                window.location.href = returnUrl;\n              }, 200);\n              \n              // 추가 보험: 2초 후에도 리다이렉션 안되면 강제 새로고침\n              setTimeout(() => {\n                const expectedPath = new URL(returnUrl, window.location.origin).pathname;\n                if (window.location.pathname !== expectedPath) {\n                  debugLog('💪 [AuthCallback] 추가 보험: 강제 새로고침');\n                  window.removeEventListener('beforeunload', handleBeforeUnload);\n                  window.location.reload();\n                }\n              }, 2000);\n            }, 500); // 500ms로 줄여서 더 빠른 전환\n          });\n          \n          return;\n        }\n\n        throw new Error(data.error || '서버에서 OAuth 처리 실패');\n\n      } catch (err: any) {\n        debugError('❌ [AuthCallback] OAuth 처리 실패:', err);\n        \n        // 🔧 에러 시에도 전역 로딩바 해제 (컨텍스트 + 이벤트 이중 보장)\n        setIsLoading(false);\n        \n        // 커스텀 이벤트로도 전역 로딩바 해제 (이중 보장)\n        try {\n          const event = new CustomEvent('stopGlobalLoading', { detail: { reason: 'auth-callback-error' } });\n          window.dispatchEvent(event);\n          debugLog('🗑️ [AuthCallback] 에러 발생, 전역 로딩바 해제 (컨텍스트 + 이벤트)');\n        } catch (error) {\n          debugLog('🗑️ [AuthCallback] 에러 발생, 전역 로딩바 해제 (컨텍스트만)', error);\n        }\n        \n        // 즉시 로딩바도 제거 (혹시 남아있다면)\n        const immediateLoadingBar = document.getElementById('oauth-loading');\n        if (immediateLoadingBar) {\n          immediateLoadingBar.remove();\n        }\n        \n        ensureMinimumLoading(() => {\n          setError(`로그인 중 문제가 발생했습니다`);\n          setIsProcessing(false);\n\n          // 2초 후 로그인 페이지로 리디렉션\n          setTimeout(() => {\n            debugLog('🔄 [AuthCallback] 오류 발생, 로그인 페이지로 리디렉션');\n            router.push('/ja/login');\n          }, 2000);\n        });\n      }\n    };\n\n    handleOAuthCallback();\n  }, [mounted]); // mounted 의존성 추가\n\n  // 🔧 하이드레이션 미스매치 방지: 서버와 클라이언트에서 동일한 UI 렌더링\n  if (!mounted) {\n    return null; // 하이드레이션 완료 전에는 아무것도 렌더링하지 않음\n  }\n\n  // 에러 발생 시 UI\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-50\">\n        <div className=\"bg-white p-8 rounded-lg shadow-md max-w-md w-full text-center\">\n          <div className=\"text-red-500 text-6xl mb-4\">❌</div>\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">로그인 실패</h2>\n          <p className=\"text-gray-600 mb-6\">{error}</p>\n          <p className=\"text-sm text-gray-500\">잠시 후 로그인 페이지로 이동합니다...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // 로딩 중일 때는 전역 로딩바만 보여주고 추가 UI는 표시하지 않음\n  if (isProcessing) {\n    return null;\n  }\n\n  return null;\n}\n"],"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","ignoreList":[]}