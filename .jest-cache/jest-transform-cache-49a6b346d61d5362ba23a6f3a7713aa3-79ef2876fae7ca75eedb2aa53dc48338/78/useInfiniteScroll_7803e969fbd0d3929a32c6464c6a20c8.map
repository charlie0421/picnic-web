{"version":3,"names":["cov_1c0o3pzebp","actualCoverage","s","useInfiniteScroll","options","f","apiEndpoint","limit","b","onSuccess","onError","transform","state","setState","_react","useState","page","isLoading","hasMore","isLoadingMore","isInitialLoad","error","totalCount","items","setItems","statistics","setStatistics","sentinelRef","useRef","observerRef","abortControllerRef","fetchData","useCallback","pageNum","reset","current","abort","AbortController","prev","response","fetch","signal","ok","Error","status","data","json","success","transformedData","map","pagination","hasNext","err","name","errorMessage","message","retry","useEffect","sentinel","disconnect","IntersectionObserver","entries","isIntersecting","nextPage","threshold","rootMargin","observe","isEmpty","length","isLastPage"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/hooks/useInfiniteScroll.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useRef } from 'react';\nimport type { InfiniteScrollState, BaseResponse } from '@/types/mypage-common';\n\ninterface UseInfiniteScrollOptions<T> {\n  apiEndpoint: string;\n  limit?: number;\n  onSuccess?: (data: BaseResponse<T>) => void;\n  onError?: (error: string) => void;\n  transform?: (data: any) => T;\n}\n\nexport function useInfiniteScroll<T>(options: UseInfiniteScrollOptions<T>) {\n  const { apiEndpoint, limit = 10, onSuccess, onError, transform } = options;\n\n  // 상태 관리\n  const [state, setState] = useState<InfiniteScrollState>({\n    page: 1,\n    isLoading: false,\n    hasMore: false,\n    isLoadingMore: false,\n    isInitialLoad: true,\n    error: null,\n    totalCount: 0\n  });\n\n  const [items, setItems] = useState<T[]>([]);\n  const [statistics, setStatistics] = useState<any>({});\n\n  // Refs\n  const sentinelRef = useRef<HTMLDivElement>(null);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // 데이터 패치 함수\n  const fetchData = useCallback(async (pageNum: number, reset: boolean = false) => {\n    // 이전 요청 취소\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    \n    // 새로운 AbortController 생성\n    abortControllerRef.current = new AbortController();\n    \n    setState(prev => ({\n      ...prev,\n      ...(reset ? { isLoading: true } : { isLoadingMore: true }),\n      error: null\n    }));\n\n    try {\n      const response = await fetch(`${apiEndpoint}?page=${pageNum}&limit=${limit}`, {\n        signal: abortControllerRef.current.signal\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: 데이터 조회에 실패했습니다.`);\n      }\n\n      const data: BaseResponse<T> = await response.json();\n\n      if (data.success) {\n        // 데이터 변환 적용\n        const transformedData = transform \n          ? data.data.map(transform)\n          : data.data;\n\n        setItems(prev => reset ? transformedData : [...prev, ...transformedData]);\n        \n        setState(prev => ({\n          ...prev,\n          totalCount: data.pagination.totalCount,\n          hasMore: data.pagination.hasNext,\n          isInitialLoad: false,\n          page: reset ? 1 : pageNum\n        }));\n\n        // 통계 데이터가 있으면 설정\n        if ('statistics' in data) {\n          setStatistics((data as any).statistics);\n        }\n\n        onSuccess?.(data);\n      } else {\n        throw new Error(data.error || '데이터 조회에 실패했습니다.');\n      }\n    } catch (err) {\n      // AbortError는 무시\n      if (err instanceof Error && err.name === 'AbortError') {\n        return;\n      }\n      \n      const errorMessage = err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.';\n      setState(prev => ({\n        ...prev,\n        error: errorMessage,\n        isInitialLoad: false\n      }));\n      \n      onError?.(errorMessage);\n    } finally {\n      setState(prev => ({\n        ...prev,\n        isLoading: false,\n        isLoadingMore: false\n      }));\n    }\n  }, [apiEndpoint, limit, transform, onSuccess, onError]);\n\n  // 재시도 함수\n  const retry = useCallback(() => {\n    setState({\n      page: 1,\n      isLoading: false,\n      hasMore: false,\n      isLoadingMore: false,\n      isInitialLoad: true,\n      error: null,\n      totalCount: 0\n    });\n    setItems([]);\n    setStatistics({});\n    fetchData(1, true);\n  }, [fetchData]);\n\n  // 무한 스크롤 처리\n  useEffect(() => {\n    if (!sentinelRef.current || !state.hasMore || state.isLoadingMore) {\n      return;\n    }\n\n    const sentinel = sentinelRef.current;\n    \n    // 기존 observer 정리\n    if (observerRef.current) {\n      observerRef.current.disconnect();\n    }\n    \n    observerRef.current = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && state.hasMore && !state.isLoadingMore) {\n          const nextPage = state.page + 1;\n          fetchData(nextPage, false);\n        }\n      },\n      { threshold: 0.1, rootMargin: '100px' }\n    );\n\n    observerRef.current.observe(sentinel);\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n    };\n  }, [state.hasMore, state.isLoadingMore, state.page, fetchData]);\n\n  // 초기 데이터 로드\n  useEffect(() => {\n    fetchData(1, true);\n  }, []);\n\n  // 컴포넌트 언마운트 시 정리\n  useEffect(() => {\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n\n  return {\n    // 상태\n    ...state,\n    items,\n    statistics,\n    \n    // Refs\n    sentinelRef,\n    \n    // 함수들\n    retry,\n    fetchData,\n    \n    // 편의 함수들\n    isEmpty: !state.isLoading && !state.isInitialLoad && items.length === 0 && !state.error,\n    isLastPage: !state.isLoading && !state.isInitialLoad && !state.hasMore && items.length > 0\n  };\n} "],"mappingsgBI;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;+BALY;;;;;;WAAAC,iBAAA;;;;;kCAXyC;AAWlD,SAASA,kBAAqBC,OAAoC;EAAA;EAAAJ,cAAA,GAAAK,CAAA;EACvE,MAAM;IAAEC,WAAW;IAAEC,KAAA;IAAA;IAAA,CAAAP,cAAA,GAAAQ,CAAA,UAAQ,EAAE;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAS,CAAE;EAAA;EAAA,CAAAX,cAAA,GAAAE,CAAA,OAAGE,OAAA;EAEnE;EACA,MAAM,CAACQ,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAb,cAAA,GAAAE,CAAA,OAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAsB;IACtDC,IAAA,EAAM;IACNC,SAAA,EAAW;IACXC,OAAA,EAAS;IACTC,aAAA,EAAe;IACfC,aAAA,EAAe;IACfC,KAAA,EAAO;IACPC,UAAA,EAAY;EACd;EAEA,MAAM,CAACC,KAAA,EAAOC,QAAA,CAAS;EAAA;EAAA,CAAAxB,cAAA,GAAAE,CAAA,OAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAM,EAAE;EAC1C,MAAM,CAACU,UAAA,EAAYC,aAAA,CAAc;EAAA;EAAA,CAAA1B,cAAA,GAAAE,CAAA,OAAG,IAAAY,MAAA,CAAAC,QAAQ,EAAM,CAAC;EAEnD;EACA,MAAMY,WAAA;EAAA;EAAA,CAAA3B,cAAA,GAAAE,CAAA,OAAc,IAAAY,MAAA,CAAAc,MAAM,EAAiB;EAC3C,MAAMC,WAAA;EAAA;EAAA,CAAA7B,cAAA,GAAAE,CAAA,OAAc,IAAAY,MAAA,CAAAc,MAAM,EAA8B;EACxD,MAAME,kBAAA;EAAA;EAAA,CAAA9B,cAAA,GAAAE,CAAA,QAAqB,IAAAY,MAAA,CAAAc,MAAM,EAAyB;EAE1D;EACA,MAAMG,SAAA;EAAA;EAAA,CAAA/B,cAAA,GAAAE,CAAA,QAAY,IAAAY,MAAA,CAAAkB,WAAW,EAAC,OAAOC,OAAA,EAAiBC,KAAA;EAAA;EAAA,CAAAlC,cAAA,GAAAQ,CAAA,UAAiB,KAAK;IAAA;IAAAR,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IAC1E;IACA,IAAI4B,kBAAA,CAAmBK,OAAO,EAAE;MAAA;MAAAnC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MAC9B4B,kBAAA,CAAmBK,OAAO,CAACC,KAAK;IAClC;IAAA;IAAA;MAAApC,cAAA,GAAAQ,CAAA;IAAA;IAEA;IAAAR,cAAA,GAAAE,CAAA;IACA4B,kBAAA,CAAmBK,OAAO,GAAG,IAAIE,eAAA;IAAA;IAAArC,cAAA,GAAAE,CAAA;IAEjCW,QAAA,CAASyB,IAAA,IAAS;MAAA;MAAAtC,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MAAA;QAChB,GAAGoC,IAAI;QACP,IAAIJ,KAAA;QAAA;QAAA,CAAAlC,cAAA,GAAAQ,CAAA,UAAQ;UAAES,SAAA,EAAW;QAAK;QAAA;QAAA,CAAAjB,cAAA,GAAAQ,CAAA,UAAI;UAAEW,aAAA,EAAe;QAAK,CAAC;QACzDE,KAAA,EAAO;MACT;IAAA;IAAA;IAAArB,cAAA,GAAAE,CAAA;IAEA,IAAI;MACF,MAAMqC,QAAA;MAAA;MAAA,CAAAvC,cAAA,GAAAE,CAAA,QAAW,MAAMsC,KAAA,CAAM,GAAGlC,WAAA,SAAoB2B,OAAA,UAAiB1B,KAAA,EAAO,EAAE;QAC5EkC,MAAA,EAAQX,kBAAA,CAAmBK,OAAO,CAACM;MACrC;MAAA;MAAAzC,cAAA,GAAAE,CAAA;MAEA,IAAI,CAACqC,QAAA,CAASG,EAAE,EAAE;QAAA;QAAA1C,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAChB,MAAM,IAAIyC,KAAA,CAAM,QAAQJ,QAAA,CAASK,MAAM,mBAAmB;MAC5D;MAAA;MAAA;QAAA5C,cAAA,GAAAQ,CAAA;MAAA;MAEA,MAAMqC,IAAA;MAAA;MAAA,CAAA7C,cAAA,GAAAE,CAAA,QAAwB,MAAMqC,QAAA,CAASO,IAAI;MAAA;MAAA9C,cAAA,GAAAE,CAAA;MAEjD,IAAI2C,IAAA,CAAKE,OAAO,EAAE;QAAA;QAAA/C,cAAA,GAAAQ,CAAA;QAChB;QACA,MAAMwC,eAAA;QAAA;QAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAkBS,SAAA;QAAA;QAAA,CAAAX,cAAA,GAAAQ,CAAA,UACpBqC,IAAA,CAAKA,IAAI,CAACI,GAAG,CAACtC,SAAA;QAAA;QAAA,CAAAX,cAAA,GAAAQ,CAAA,UACdqC,IAAA,CAAKA,IAAI;QAAA;QAAA7C,cAAA,GAAAE,CAAA;QAEbsB,QAAA,CAASc,IAAA,IAAQ;UAAA;UAAAtC,cAAA,GAAAK,CAAA;UAAAL,cAAA,GAAAE,CAAA;UAAA,OAAAgC,KAAA;UAAA;UAAA,CAAAlC,cAAA,GAAAQ,CAAA,UAAQwC,eAAA;UAAA;UAAA,CAAAhD,cAAA,GAAAQ,CAAA,UAAkB,C,GAAI8B,IAAA,E,GAASU,eAAA,CAAgB;SAAA;QAAA;QAAAhD,cAAA,GAAAE,CAAA;QAExEW,QAAA,CAASyB,IAAA,IAAS;UAAA;UAAAtC,cAAA,GAAAK,CAAA;UAAAL,cAAA,GAAAE,CAAA;UAAA;YAChB,GAAGoC,IAAI;YACPhB,UAAA,EAAYuB,IAAA,CAAKK,UAAU,CAAC5B,UAAU;YACtCJ,OAAA,EAAS2B,IAAA,CAAKK,UAAU,CAACC,OAAO;YAChC/B,aAAA,EAAe;YACfJ,IAAA,EAAMkB,KAAA;YAAA;YAAA,CAAAlC,cAAA,GAAAQ,CAAA,UAAQ;YAAA;YAAA,CAAAR,cAAA,GAAAQ,CAAA,UAAIyB,OAAA;UACpB;QAAA;QAEA;QAAA;QAAAjC,cAAA,GAAAE,CAAA;QACA,IAAI,gBAAgB2C,IAAA,EAAM;UAAA;UAAA7C,cAAA,GAAAQ,CAAA;UAAAR,cAAA,GAAAE,CAAA;UACxBwB,aAAA,CAAcmB,IAAC,CAAapB,UAAU;QACxC;QAAA;QAAA;UAAAzB,cAAA,GAAAQ,CAAA;QAAA;QAAAR,cAAA,GAAAE,CAAA;QAEAO,SAAA,GAAYoC,IAAA;MACd,OAAO;QAAA;QAAA7C,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACL,MAAM,IAAIyC,KAAA;QAAM;QAAA,CAAA3C,cAAA,GAAAQ,CAAA,WAAAqC,IAAA,CAAKxB,KAAK;QAAA;QAAA,CAAArB,cAAA,GAAAQ,CAAA,WAAI;MAChC;IACF,EAAE,OAAO4C,GAAA,EAAK;MAAA;MAAApD,cAAA,GAAAE,CAAA;MACZ;MACA;MAAI;MAAA,CAAAF,cAAA,GAAAQ,CAAA,WAAA4C,GAAA,YAAeT,KAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAQ,CAAA,WAAS4C,GAAA,CAAIC,IAAI,KAAK,eAAc;QAAA;QAAArD,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACrD;MACF;MAAA;MAAA;QAAAF,cAAA,GAAAQ,CAAA;MAAA;MAEA,MAAM8C,YAAA;MAAA;MAAA,CAAAtD,cAAA,GAAAE,CAAA,QAAekD,GAAA,YAAeT,KAAA;MAAA;MAAA,CAAA3C,cAAA,GAAAQ,CAAA,WAAQ4C,GAAA,CAAIG,OAAO;MAAA;MAAA,CAAAvD,cAAA,GAAAQ,CAAA,WAAG;MAAA;MAAAR,cAAA,GAAAE,CAAA;MAC1DW,QAAA,CAASyB,IAAA,IAAS;QAAA;QAAAtC,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAE,CAAA;QAAA;UAChB,GAAGoC,IAAI;UACPjB,KAAA,EAAOiC,YAAA;UACPlC,aAAA,EAAe;QACjB;MAAA;MAAA;MAAApB,cAAA,GAAAE,CAAA;MAEAQ,OAAA,GAAU4C,YAAA;IACZ,UAAU;MAAA;MAAAtD,cAAA,GAAAE,CAAA;MACRW,QAAA,CAASyB,IAAA,IAAS;QAAA;QAAAtC,cAAA,GAAAK,CAAA;QAAAL,cAAA,GAAAE,CAAA;QAAA;UAChB,GAAGoC,IAAI;UACPrB,SAAA,EAAW;UACXE,aAAA,EAAe;QACjB;MAAA;IACF;EACF,GAAG,CAACb,WAAA,EAAaC,KAAA,EAAOI,SAAA,EAAWF,SAAA,EAAWC,OAAA,CAAQ;EAEtD;EACA,MAAM8C,KAAA;EAAA;EAAA,CAAAxD,cAAA,GAAAE,CAAA,QAAQ,IAAAY,MAAA,CAAAkB,WAAW,EAAC;IAAA;IAAAhC,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACxBW,QAAA,CAAS;MACPG,IAAA,EAAM;MACNC,SAAA,EAAW;MACXC,OAAA,EAAS;MACTC,aAAA,EAAe;MACfC,aAAA,EAAe;MACfC,KAAA,EAAO;MACPC,UAAA,EAAY;IACd;IAAA;IAAAtB,cAAA,GAAAE,CAAA;IACAsB,QAAA,CAAS,EAAE;IAAA;IAAAxB,cAAA,GAAAE,CAAA;IACXwB,aAAA,CAAc,CAAC;IAAA;IAAA1B,cAAA,GAAAE,CAAA;IACf6B,SAAA,CAAU,GAAG;EACf,GAAG,CAACA,SAAA,CAAU;EAEd;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EACA,IAAAY,MAAA,CAAA2C,SAAS,EAAC;IAAA;IAAAzD,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACR;IAAI;IAAA,CAAAF,cAAA,GAAAQ,CAAA,YAACmB,WAAA,CAAYQ,OAAO;IAAA;IAAA,CAAAnC,cAAA,GAAAQ,CAAA,WAAI,CAACI,KAAA,CAAMM,OAAO;IAAA;IAAA,CAAAlB,cAAA,GAAAQ,CAAA,WAAII,KAAA,CAAMO,aAAa,GAAE;MAAA;MAAAnB,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACjE;IACF;IAAA;IAAA;MAAAF,cAAA,GAAAQ,CAAA;IAAA;IAEA,MAAMkD,QAAA;IAAA;IAAA,CAAA1D,cAAA,GAAAE,CAAA,QAAWyB,WAAA,CAAYQ,OAAO;IAEpC;IAAA;IAAAnC,cAAA,GAAAE,CAAA;IACA,IAAI2B,WAAA,CAAYM,OAAO,EAAE;MAAA;MAAAnC,cAAA,GAAAQ,CAAA;MAAAR,cAAA,GAAAE,CAAA;MACvB2B,WAAA,CAAYM,OAAO,CAACwB,UAAU;IAChC;IAAA;IAAA;MAAA3D,cAAA,GAAAQ,CAAA;IAAA;IAAAR,cAAA,GAAAE,CAAA;IAEA2B,WAAA,CAAYM,OAAO,GAAG,IAAIyB,oBAAA,CACvBC,OAAA;MAAA;MAAA7D,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACC;MAAI;MAAA,CAAAF,cAAA,GAAAQ,CAAA,WAAAqD,OAAO,CAAC,EAAE,CAACC,cAAc;MAAA;MAAA,CAAA9D,cAAA,GAAAQ,CAAA,WAAII,KAAA,CAAMM,OAAO;MAAA;MAAA,CAAAlB,cAAA,GAAAQ,CAAA,WAAI,CAACI,KAAA,CAAMO,aAAa,GAAE;QAAA;QAAAnB,cAAA,GAAAQ,CAAA;QACtE,MAAMuD,QAAA;QAAA;QAAA,CAAA/D,cAAA,GAAAE,CAAA,QAAWU,KAAA,CAAMI,IAAI,GAAG;QAAA;QAAAhB,cAAA,GAAAE,CAAA;QAC9B6B,SAAA,CAAUgC,QAAA,EAAU;MACtB;MAAA;MAAA;QAAA/D,cAAA,GAAAQ,CAAA;MAAA;IACF,GACA;MAAEwD,SAAA,EAAW;MAAKC,UAAA,EAAY;IAAQ;IAAA;IAAAjE,cAAA,GAAAE,CAAA;IAGxC2B,WAAA,CAAYM,OAAO,CAAC+B,OAAO,CAACR,QAAA;IAAA;IAAA1D,cAAA,GAAAE,CAAA;IAE5B,OAAO;MAAA;MAAAF,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACL,IAAI2B,WAAA,CAAYM,OAAO,EAAE;QAAA;QAAAnC,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACvB2B,WAAA,CAAYM,OAAO,CAACwB,UAAU;MAChC;MAAA;MAAA;QAAA3D,cAAA,GAAAQ,CAAA;MAAA;IACF;EACF,GAAG,CAACI,KAAA,CAAMM,OAAO,EAAEN,KAAA,CAAMO,aAAa,EAAEP,KAAA,CAAMI,IAAI,EAAEe,SAAA,CAAU;EAE9D;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EACA,IAAAY,MAAA,CAAA2C,SAAS,EAAC;IAAA;IAAAzD,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACR6B,SAAA,CAAU,GAAG;EACf,GAAG,EAAE;EAEL;EAAA;EAAA/B,cAAA,GAAAE,CAAA;EACA,IAAAY,MAAA,CAAA2C,SAAS,EAAC;IAAA;IAAAzD,cAAA,GAAAK,CAAA;IAAAL,cAAA,GAAAE,CAAA;IACR,OAAO;MAAA;MAAAF,cAAA,GAAAK,CAAA;MAAAL,cAAA,GAAAE,CAAA;MACL,IAAI2B,WAAA,CAAYM,OAAO,EAAE;QAAA;QAAAnC,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QACvB2B,WAAA,CAAYM,OAAO,CAACwB,UAAU;MAChC;MAAA;MAAA;QAAA3D,cAAA,GAAAQ,CAAA;MAAA;MAAAR,cAAA,GAAAE,CAAA;MACA,IAAI4B,kBAAA,CAAmBK,OAAO,EAAE;QAAA;QAAAnC,cAAA,GAAAQ,CAAA;QAAAR,cAAA,GAAAE,CAAA;QAC9B4B,kBAAA,CAAmBK,OAAO,CAACC,KAAK;MAClC;MAAA;MAAA;QAAApC,cAAA,GAAAQ,CAAA;MAAA;IACF;EACF,GAAG,EAAE;EAAA;EAAAR,cAAA,GAAAE,CAAA;EAEL,OAAO;IACL;IACA,GAAGU,KAAK;IACRW,KAAA;IACAE,UAAA;IAEA;IACAE,WAAA;IAEA;IACA6B,KAAA;IACAzB,SAAA;IAEA;IACAoC,OAAA;IAAS;IAAA,CAAAnE,cAAA,GAAAQ,CAAA,YAACI,KAAA,CAAMK,SAAS;IAAA;IAAA,CAAAjB,cAAA,GAAAQ,CAAA,WAAI,CAACI,KAAA,CAAMQ,aAAa;IAAA;IAAA,CAAApB,cAAA,GAAAQ,CAAA,WAAIe,KAAA,CAAM6C,MAAM,KAAK;IAAA;IAAA,CAAApE,cAAA,GAAAQ,CAAA,WAAK,CAACI,KAAA,CAAMS,KAAK;IACvFgD,UAAA;IAAY;IAAA,CAAArE,cAAA,GAAAQ,CAAA,YAACI,KAAA,CAAMK,SAAS;IAAA;IAAA,CAAAjB,cAAA,GAAAQ,CAAA,WAAI,CAACI,KAAA,CAAMQ,aAAa;IAAA;IAAA,CAAApB,cAAA,GAAAQ,CAAA,WAAI,CAACI,KAAA,CAAMM,OAAO;IAAA;IAAA,CAAAlB,cAAA,GAAAQ,CAAA,WAAIe,KAAA,CAAM6C,MAAM,GAAG;EAC3F;AACF","ignoreList":[]}