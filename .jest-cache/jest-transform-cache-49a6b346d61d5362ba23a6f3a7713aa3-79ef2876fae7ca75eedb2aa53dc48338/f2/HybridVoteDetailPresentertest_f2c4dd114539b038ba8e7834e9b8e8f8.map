{"version":3,"sources":["/Users/charlie.hyun/Repositories/picnic-web/__tests__/components/vote/HybridVoteDetailPresenter.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor, fireEvent, act } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport { HybridVoteDetailPresenter } from '@/components/client/vote/detail/HybridVoteDetailPresenter';\nimport { Vote, VoteItem } from '@/types/interfaces';\n\n// Create proper mock types\ninterface MockSupabaseResponse {\n  data: any;\n  error?: any;\n}\n\ninterface MockSupabaseClient {\n  auth: {\n    getUser: jest.MockedFunction<() => Promise<any>>;\n  };\n  from: jest.MockedFunction<(table: string) => any>;\n  channel: jest.MockedFunction<(name: string) => any>;\n}\n\n// Mock Supabase client with explicit typing\nconst createMockSupabaseClient = (): MockSupabaseClient => ({\n  auth: {\n    getUser: jest.fn<() => Promise<any>>(),\n  },\n  from: jest.fn<(table: string) => any>(),\n  channel: jest.fn<(name: string) => any>(),\n});\n\nconst mockSupabaseClient = createMockSupabaseClient();\n\n// Mock hooks\njest.mock('@/lib/supabase/client', () => ({\n  createBrowserSupabaseClient: () => mockSupabaseClient,\n}));\n\njest.mock('@/stores/languageStore', () => ({\n  useLanguageStore: () => ({\n    currentLanguage: 'ko',\n  }),\n}));\n\n// Mock useAuthGuard hook completely\njest.mock('@/hooks/useAuthGuard', () => ({\n  useAuthGuard: jest.fn(() => ({\n    user: { id: 'user123', email: 'test@example.com' },\n    session: { access_token: 'mock-token' },\n    isLoading: false,\n    signOut: jest.fn(),\n    requireAuth: jest.fn(),\n  })),\n  useRequireAuth: jest.fn(() => ({\n    withAuth: jest.fn((fn) => (...args: any[]) => fn(...args)),\n  })),\n}));\n\n// Mock AuthProvider completely\njest.mock('@/lib/supabase/auth-provider', () => ({\n  AuthProvider: ({ children }: { children: React.ReactNode }) => children,\n  useAuth: jest.fn(() => ({\n    user: { id: 'user123', email: 'test@example.com' },\n    session: { access_token: 'mock-token' },\n    isLoading: false,\n    signOut: jest.fn(),\n  })),\n}));\n\n// Mock data with correct types\nconst mockVote: Vote = {\n  id: 1,\n  title: { ko: 'Test Vote' },\n  vote_content: 'Test vote description',\n  start_at: new Date('2024-01-01T00:00:00Z').toISOString(),\n  stop_at: new Date('2024-12-31T23:59:59Z').toISOString(),\n  area: 'global',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  deleted_at: null,\n  main_image: null,\n  order: null,\n  result_image: null,\n  visible_at: null,\n  vote_category: null,\n  vote_sub_category: null,\n  wait_image: null,\n};\n\nconst mockVoteItems: VoteItem[] = [\n  {\n    id: 1,\n    artist_id: 1,\n    group_id: 1,\n    vote_id: 1,\n    vote_total: 100,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    deleted_at: null,\n    artist: {\n      id: 1,\n      name: { ko: 'Artist 1' },\n      image: 'https://example.com/artist1.jpg',\n      birth_date: null,\n      created_at: new Date().toISOString(),\n      debut_date: null,\n      debut_dd: null,\n      debut_mm: null,\n      debut_yy: null,\n      deleted_at: null,\n      gender: null,\n      group_id: null,\n      is_kpop: true,\n      is_musical: false,\n      is_solo: true,\n      updated_at: new Date().toISOString(),\n      dd: null,\n      mm: null,\n      yy: null,\n    },\n  },\n  {\n    id: 2,\n    artist_id: 2,\n    group_id: 1,\n    vote_id: 1,\n    vote_total: 50,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    deleted_at: null,\n    artist: {\n      id: 2,\n      name: { ko: 'Artist 2' },\n      image: 'https://example.com/artist2.jpg',\n      birth_date: null,\n      created_at: new Date().toISOString(),\n      debut_date: null,\n      debut_dd: null,\n      debut_mm: null,\n      debut_yy: null,\n      deleted_at: null,\n      gender: null,\n      group_id: null,\n      is_kpop: true,\n      is_musical: false,\n      is_solo: true,\n      updated_at: new Date().toISOString(),\n      dd: null,\n      mm: null,\n      yy: null,\n    },\n  },\n];\n\n// Helper function to create mock chain\nconst createMockChain = (resolveValue?: any, rejectValue?: any) => {\n  const mockSingle = jest.fn<() => Promise<MockSupabaseResponse>>();\n  \n  if (rejectValue) {\n    mockSingle.mockRejectedValue(rejectValue);\n  } else {\n    mockSingle.mockResolvedValue(resolveValue || {\n      data: {\n        id: 1,\n        title: { ko: 'Test Vote' },\n        vote_content: 'Test vote description',\n        vote_item: [\n          {\n            id: 1,\n            vote_total: 100,\n            artist: { id: 1, name: { ko: 'Artist 1' }, image: 'artist1.jpg' },\n          },\n          {\n            id: 2,\n            vote_total: 50,\n            artist: { id: 2, name: { ko: 'Artist 2' }, image: 'artist2.jpg' },\n          },\n        ],\n      },\n    });\n  }\n\n  const mockEq = jest.fn().mockReturnValue({ single: mockSingle });\n  const mockSelect = jest.fn().mockReturnValue({ eq: mockEq });\n  return { mockSelect, mockEq, mockSingle };\n};\n\n// Test Wrapper with complete mocked context\nconst TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const mockAuthContext = React.useMemo(() => ({\n    user: { id: 'user123', email: 'test@example.com' },\n    session: { access_token: 'mock-token' },\n    isLoading: false,\n    signOut: jest.fn(),\n  }), []);\n  \n  return (\n    <div data-testid=\"auth-provider\">\n      {children}\n    </div>\n  );\n};\n\ndescribe('HybridVoteDetailPresenter', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.useFakeTimers();\n    \n    // Setup default mocks with proper typing\n    mockSupabaseClient.auth.getUser.mockResolvedValue({\n      data: { user: { id: 'user123', email: 'test@example.com' } },\n    });\n    \n    const { mockSelect } = createMockChain();\n    mockSupabaseClient.from.mockReturnValue({ select: mockSelect });\n  });\n\n  afterEach(() => {\n    jest.useRealTimers();\n  });\n\n  describe('기본 렌더링 테스트', () => {\n    it('컴포넌트가 정상적으로 렌더링되어야 함', () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n        />\n      );\n\n      // 투표 제목 확인 (JSON 객체에서 한국어 제목 추출)\n      expect(screen.getByText('Test Vote')).toBeInTheDocument();\n    });\n\n    it('초기 투표 아이템들이 표시되어야 함', () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n        />\n      );\n\n      // Artist 이름이 JSON 객체로 저장되므로 적절한 텍스트를 찾아야 함\n      expect(screen.getByText(/Artist 1|아티스트/)).toBeInTheDocument();\n    });\n  });\n\n  describe('폴링 모드 테스트', () => {\n    it('폴링 모드에서 지정된 간격으로 데이터를 가져와야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={1000}\n        />\n      );\n\n      // 초기 호출\n      await waitFor(() => {\n        expect(mockSupabaseClient.from).toHaveBeenCalled();\n      });\n\n      const initialCallCount = mockSupabaseClient.from.mock.calls.length;\n\n      // 1초 후 추가 호출 확인\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      await waitFor(() => {\n        expect(mockSupabaseClient.from.mock.calls.length).toBeGreaterThan(initialCallCount);\n      });\n    });\n\n    it('폴링 에러 발생 시 에러 알림이 표시되어야 함', async () => {\n      const { mockSelect } = createMockChain(undefined, new Error('Network error'));\n      mockSupabaseClient.from.mockReturnValue({ select: mockSelect });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 에러 알림이 표시되는지 확인\n      await waitFor(() => {\n        expect(screen.queryByText(/데이터 로딩 오류|오류|error/i)).toBeInTheDocument();\n      });\n    });\n\n    it('폴링 성공 시 투표 데이터가 업데이트되어야 함', async () => {\n      const updatedData = {\n        data: {\n          id: 1,\n          title: { ko: 'Updated Vote' },\n          vote_content: 'Updated description',\n          vote_item: [\n            {\n              id: 1,\n              vote_total: 150, // 업데이트된 투표 수\n              artist: { id: 1, name: { ko: 'Artist 1' }, image: 'artist1.jpg' },\n            },\n          ],\n        },\n      };\n\n      const { mockSelect } = createMockChain(updatedData);\n      mockSupabaseClient.from.mockReturnValue({ select: mockSelect });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 업데이트된 데이터가 표시되는지 확인 (150이라는 숫자가 화면에 있는지 확인)\n      await waitFor(() => {\n        expect(screen.getByText('150')).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('정적 모드 테스트', () => {\n    it('정적 모드에서는 자동 업데이트가 발생하지 않아야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={0} // 폴링 비활성화\n        />\n      );\n\n      const initialCallCount = mockSupabaseClient.from.mock.calls.length;\n\n      await act(async () => {\n        jest.advanceTimersByTime(5000); // 5초 대기\n      });\n\n      // API 호출이 추가로 발생하지 않았는지 확인\n      expect(mockSupabaseClient.from.mock.calls.length).toBe(initialCallCount);\n    });\n  });\n\n  describe('실시간 모드 테스트', () => {\n    it('실시간 모드가 활성화될 때 Supabase 채널을 구독해야 함', async () => {\n      const mockSubscribe = jest.fn();\n      const mockOn = jest.fn().mockReturnValue({ subscribe: mockSubscribe });\n      \n      mockSupabaseClient.channel.mockReturnValue({ on: mockOn });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await waitFor(() => {\n        expect(mockSupabaseClient.channel).toHaveBeenCalledWith('supabase_realtime');\n      });\n    });\n\n    it('실시간 연결 실패 시 폴링 모드로 자동 전환되어야 함', async () => {\n      const mockSubscribe = jest.fn<(callback: (status: string, error?: Error) => void) => any>();\n      mockSubscribe.mockImplementation((callback: (status: string, error?: Error) => void) => {\n        // 연결 실패 시뮬레이션\n        setTimeout(() => callback('CHANNEL_ERROR', new Error('Connection failed')), 100);\n        return { unsubscribe: jest.fn() };\n      });\n      const mockOn = jest.fn().mockReturnValue({ subscribe: mockSubscribe });\n      mockSupabaseClient.channel.mockReturnValue({ on: mockOn });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(200);\n      });\n\n      // 폴링 모드로 전환 확인 (API 호출이 시작되었는지 확인)\n      await waitFor(() => {\n        expect(mockSupabaseClient.from).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('연결 품질 모니터링 테스트', () => {\n    it('연속 에러 발생 시 에러가 누적되어야 함', async () => {\n      // 에러를 반환하는 모킹 설정\n      const { mockSelect } = createMockChain(undefined, new Error('Network error'));\n      mockSupabaseClient.from.mockReturnValue({ select: mockSelect });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 여러 번의 폴링으로 연속 에러 발생\n      for (let i = 0; i < 3; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(1000);\n        });\n      }\n\n      // 에러 메시지가 표시되는지 확인\n      await waitFor(() => {\n        expect(screen.queryByText(/오류|error/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('성능 테스트', () => {\n    it('빈번한 데이터 업데이트 시 메모리 누수가 발생하지 않아야 함', async () => {\n      const { unmount } = render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 여러 번의 빠른 업데이트 시뮬레이션\n      for (let i = 0; i < 10; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(100);\n        });\n      }\n\n      // 컴포넌트 언마운트\n      unmount();\n\n      // 타이머가 정리되었는지 확인\n      expect(jest.getTimerCount()).toBe(0);\n    });\n  });\n\n  describe('에러 복구 테스트', () => {\n    it('네트워크 복구 후 정상 동작으로 돌아와야 함', async () => {\n      let shouldError = true;\n      \n      const mockSingle = jest.fn<() => Promise<MockSupabaseResponse>>();\n      mockSingle.mockImplementation(() => {\n        if (shouldError) {\n          return Promise.reject(new Error('Network error'));\n        }\n        return Promise.resolve({\n          data: {\n            id: 1,\n            vote_item: [\n              {\n                id: 1,\n                vote_total: 100,\n                artist: { id: 1, name: { ko: 'Artist 1' }, image: 'artist1.jpg' },\n              },\n            ],\n          },\n        });\n      });\n\n      const mockEq = jest.fn().mockReturnValue({ single: mockSingle });\n      const mockSelect = jest.fn().mockReturnValue({ eq: mockEq });\n      mockSupabaseClient.from.mockReturnValue({ select: mockSelect });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 초기 에러 상태\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      await waitFor(() => {\n        expect(screen.getByText(/오류|error/i)).toBeInTheDocument();\n      });\n\n      // 네트워크 복구 시뮬레이션\n      shouldError = false;\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 정상 동작 복구 확인 (에러 메시지가 사라졌는지 확인)\n      await waitFor(() => {\n        expect(screen.queryByText(/데이터 로딩 오류/)).not.toBeInTheDocument();\n      });\n    });\n  });\n});"],"names":["createMockSupabaseClient","auth","getUser","jest","fn","from","channel","mockSupabaseClient","mock","createBrowserSupabaseClient","useLanguageStore","currentLanguage","useAuthGuard","user","id","email","session","access_token","isLoading","signOut","requireAuth","useRequireAuth","withAuth","args","AuthProvider","children","useAuth","mockVote","title","ko","vote_content","start_at","Date","toISOString","stop_at","area","created_at","updated_at","deleted_at","main_image","order","result_image","visible_at","vote_category","vote_sub_category","wait_image","mockVoteItems","artist_id","group_id","vote_id","vote_total","artist","name","image","birth_date","debut_date","debut_dd","debut_mm","debut_yy","gender","is_kpop","is_musical","is_solo","dd","mm","yy","createMockChain","resolveValue","rejectValue","mockSingle","mockRejectedValue","mockResolvedValue","data","vote_item","mockEq","mockReturnValue","single","mockSelect","eq","TestWrapper","mockAuthContext","React","useMemo","div","data-testid","describe","beforeEach","clearAllMocks","useFakeTimers","select","afterEach","useRealTimers","it","render","HybridVoteDetailPresenter","vote","initialItems","expect","screen","getByText","toBeInTheDocument","enableRealtime","pollingInterval","waitFor","toHaveBeenCalled","initialCallCount","calls","length","act","advanceTimersByTime","toBeGreaterThan","undefined","Error","queryByText","updatedData","toBe","mockSubscribe","mockOn","subscribe","on","toHaveBeenCalledWith","mockImplementation","callback","setTimeout","unsubscribe","i","unmount","getTimerCount","shouldError","Promise","reject","resolve","not"],"mappings":"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"}