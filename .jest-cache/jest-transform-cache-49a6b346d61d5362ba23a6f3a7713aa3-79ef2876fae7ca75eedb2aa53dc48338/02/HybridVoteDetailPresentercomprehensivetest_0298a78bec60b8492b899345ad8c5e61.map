{"version":3,"sources":["/Users/charlie.hyun/Repositories/picnic-web/__tests__/components/vote/HybridVoteDetailPresenter.comprehensive.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, screen, waitFor, fireEvent, act } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport { HybridVoteDetailPresenter } from '@/components/client/vote/detail/HybridVoteDetailPresenter';\nimport { Vote, VoteItem } from '@/types/interfaces';\n\n// Create proper mock types\ninterface MockSupabaseResponse {\n  data: any;\n  error?: any;\n}\n\ninterface MockSupabaseClient {\n  auth: {\n    getUser: jest.MockedFunction<() => Promise<any>>;\n  };\n  from: jest.MockedFunction<(table: string) => any>;\n  channel: jest.MockedFunction<(name: string) => any>;\n}\n\n// Create mock performance object\nconst mockPerformance = {\n  now: jest.fn(() => Date.now()),\n  mark: jest.fn(),\n  measure: jest.fn(),\n  getEntriesByType: jest.fn(() => []),\n  getEntriesByName: jest.fn(() => []),\n  clearMarks: jest.fn(),\n  clearMeasures: jest.fn(),\n};\n\n// Mock implementations\nconst createMockSupabaseClient = (): MockSupabaseClient => {\n  return {\n    auth: {\n      getUser: jest.fn<() => Promise<any>>().mockResolvedValue({\n        data: { user: { id: 'user123', email: 'test@example.com' } },\n      }),\n    },\n    from: jest.fn<(table: string) => any>().mockReturnValue({\n      select: jest.fn().mockReturnValue({\n        eq: jest.fn().mockReturnValue({\n          single: jest.fn<() => Promise<MockSupabaseResponse>>().mockResolvedValue({\n            data: {\n              id: 1,\n              title: { ko: 'Test Vote' },\n              vote_content: 'Test description',\n              vote_item: [\n                {\n                  id: 1,\n                  vote_total: 100,\n                  artist: { id: 1, name: { ko: 'Artist 1' }, image: 'artist1.jpg' },\n                },\n                {\n                  id: 2,\n                  vote_total: 50,\n                  artist: { id: 2, name: { ko: 'Artist 2' }, image: 'artist2.jpg' },\n                },\n              ],\n            },\n          }),\n          maybeSingle: jest.fn<() => Promise<any>>().mockResolvedValue({ data: null }),\n        }),\n      }),\n    }),\n    channel: jest.fn<(name: string) => any>(),\n  };\n};\n\n// Mock hooks and utilities\njest.mock('@/lib/supabase/client', () => ({\n  createBrowserSupabaseClient: jest.fn(),\n}));\n\njest.mock('@/stores/languageStore', () => ({\n  useLanguageStore: () => ({\n    currentLanguage: 'ko',\n  }),\n}));\n\n// Mock the auth provider and context completely\njest.mock('@/lib/supabase/auth-provider', () => ({\n  useAuth: jest.fn(() => ({\n    user: null,\n    session: null,\n    isLoading: false,\n    signOut: jest.fn(),\n  })),\n  AuthProvider: ({ children }: any) => <>{children}</>,\n}));\n\n// Mock the auth guard hook completely\njest.mock('@/hooks/useAuthGuard', () => ({\n  useRequireAuth: jest.fn(() => ({\n    withAuth: jest.fn((fn: any) => {\n      // Mock successful authentication\n      if (typeof fn === 'function') {\n        return Promise.resolve(fn());\n      }\n      return Promise.resolve(true);\n    }),\n  })),\n  useAuthGuard: jest.fn(() => ({\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    requireAuth: jest.fn(),\n  })),\n}));\n\n// Mock other utility functions\njest.mock('@/utils/api/strings', () => ({\n  getLocalizedString: jest.fn((obj: any, lang: string) => {\n    if (typeof obj === 'string') return obj;\n    if (typeof obj === 'object' && obj && lang in obj) {\n      return obj[lang];\n    }\n    return 'Mock String';\n  }),\n}));\n\njest.mock('@/utils/api/image', () => ({\n  getCdnImageUrl: jest.fn((url) => url || '/default-image.jpg'),\n}));\n\n// Mock framer-motion for animations\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n    span: ({ children, ...props }: any) => <span {...props}>{children}</span>,\n  },\n  AnimatePresence: ({ children }: any) => <>{children}</>,\n}));\n\n// Mock data\nconst mockVote: Vote = {\n  id: 1,\n  title: { ko: 'Test Vote' },\n  vote_content: 'Test vote description',\n  start_at: new Date('2024-01-01T00:00:00Z').toISOString(),\n  stop_at: new Date('2024-12-31T23:59:59Z').toISOString(),\n  area: 'global',\n  created_at: new Date().toISOString(),\n  updated_at: new Date().toISOString(),\n  deleted_at: null,\n  main_image: null,\n  order: null,\n  result_image: null,\n  visible_at: null,\n  vote_category: null,\n  vote_sub_category: null,\n  wait_image: null,\n};\n\nconst mockVoteItems: VoteItem[] = [\n  {\n    id: 1,\n    artist_id: 1,\n    group_id: 1,\n    vote_id: 1,\n    vote_total: 100,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    deleted_at: null,\n    artist: {\n      id: 1,\n      name: { ko: 'Artist 1' },\n      image: 'https://example.com/artist1.jpg',\n      birth_date: null,\n      created_at: new Date().toISOString(),\n      debut_date: null,\n      debut_dd: null,\n      debut_mm: null,\n      debut_yy: null,\n      deleted_at: null,\n      gender: null,\n      group_id: null,\n      is_kpop: true,\n      is_musical: false,\n      is_solo: true,\n      updated_at: new Date().toISOString(),\n      dd: null,\n      mm: null,\n      yy: null,\n    },\n  },\n];\n\ndescribe('HybridVoteDetailPresenter - Comprehensive Testing (Task 10.8)', () => {\n  let mockSupabaseClient: MockSupabaseClient;\n  let createBrowserSupabaseClientMock: jest.MockedFunction<any>;\n  let originalPerformance: any;\n\n  beforeAll(() => {\n    // Mock performance API globally\n    originalPerformance = global.performance;\n    Object.defineProperty(global, 'performance', {\n      writable: true,\n      value: mockPerformance,\n    });\n  });\n\n  afterAll(() => {\n    // Restore original performance\n    Object.defineProperty(global, 'performance', {\n      writable: true,\n      value: originalPerformance,\n    });\n  });\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n    \n    // Only use fake timers if not already using them\n    if (!jest.isMockFunction(setTimeout)) {\n      jest.useFakeTimers();\n    }\n    \n    // Create fresh mock client for each test\n    mockSupabaseClient = createMockSupabaseClient();\n    createBrowserSupabaseClientMock = require('@/lib/supabase/client').createBrowserSupabaseClient;\n    createBrowserSupabaseClientMock.mockReturnValue(mockSupabaseClient);\n    \n    // Reset performance mock\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    // Only restore timers if we're currently using fake timers\n    if (jest.isMockFunction(setTimeout)) {\n      jest.useRealTimers();\n    }\n  });\n\n  describe('🔴 실시간 모드 테스트 (WebSocket)', () => {\n    it('실시간 연결이 정상적으로 이루어져야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await waitFor(() => {\n        expect(mockSupabaseClient.channel).toHaveBeenCalledWith('supabase_realtime');\n      });\n\n      // 구독 설정 확인\n      const channelInstance = mockSupabaseClient.channel.mock.results[0].value;\n      expect(channelInstance.on).toHaveBeenCalledWith(\n        'postgres_changes',\n        expect.objectContaining({\n          event: '*',\n          schema: 'public',\n          table: 'vote_item',\n        }),\n        expect.any(Function)\n      );\n    });\n\n    it('실시간 데이터 업데이트가 즉시 UI에 반영되어야 함', async () => {\n      const mockSubscribe = jest.fn<(callback: (status: string) => void) => any>();\n      mockSubscribe.mockImplementation((callback: (status: string) => void) => {\n        setTimeout(() => callback('SUBSCRIBED'), 10);\n        return { unsubscribe: jest.fn() };\n      });\n\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: mockSubscribe,\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(50);\n      });\n\n      // 실시간 이벤트 핸들러 가져오기\n      const realtimeHandler = channelMock.on.mock.calls[0][2] as Function;\n      \n      // 실시간 업데이트 시뮬레이션\n      await act(async () => {\n        realtimeHandler({\n          eventType: 'UPDATE',\n          new: { id: 1, vote_total: 150 },\n          old: { id: 1, vote_total: 100 },\n        });\n      });\n\n      // UI 업데이트 확인을 위해 추가 시간 대기\n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n\n      // 실시간 연결 상태 표시 확인\n      expect(screen.getByText(/실시간|Realtime|Connected/i)).toBeInTheDocument();\n    });\n\n    it('실시간 연결 끊김 시 폴링 모드로 자동 전환되어야 함', async () => {\n      const mockSubscribe = jest.fn<(callback: (status: string, error?: Error) => void) => any>();\n      mockSubscribe.mockImplementation((callback: (status: string, error?: Error) => void) => {\n        setTimeout(() => callback('CHANNEL_ERROR', new Error('Connection failed')), 10);\n        return { unsubscribe: jest.fn() };\n      });\n\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: mockSubscribe,\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n\n      // 폴링 모드로 전환 확인 (폴링 API 호출 시작)\n      await waitFor(() => {\n        expect(mockSupabaseClient.from).toHaveBeenCalled();\n      });\n\n      // 모드 전환 알림 확인\n      expect(screen.getByText(/폴링|Polling/i)).toBeInTheDocument();\n    });\n\n    it('네트워크 복구 시 실시간 모드로 재전환되어야 함', async () => {\n      let connectionAttempts = 0;\n      const mockSubscribe = jest.fn<(callback: (status: string, error?: Error) => void) => any>();\n      mockSubscribe.mockImplementation((callback: (status: string, error?: Error) => void) => {\n        connectionAttempts++;\n        if (connectionAttempts === 1) {\n          setTimeout(() => callback('CHANNEL_ERROR', new Error('Connection failed')), 10);\n        } else {\n          setTimeout(() => callback('SUBSCRIBED'), 10);\n        }\n        return { unsubscribe: jest.fn() };\n      });\n\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: mockSubscribe,\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 첫 번째 연결 실패\n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n\n      // 재연결 시도 (5초 후)\n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      // 재연결 성공 확인\n      expect(mockSubscribe).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('⚙️ 폴링 모드 테스트 (HTTP 요청)', () => {\n    it('1초마다 정확하게 데이터를 가져와야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={1000}\n        />\n      );\n\n      const initialCallCount = mockSupabaseClient.from.mock.calls.length;\n\n      // 3초 동안 폴링 확인\n      for (let i = 1; i <= 3; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(1000);\n        });\n\n        await waitFor(() => {\n          expect(mockSupabaseClient.from.mock.calls.length).toBe(initialCallCount + i);\n        });\n      }\n    });\n\n    it('API 호출 실패 시 에러 카운트가 증가하고 재시도 로직이 작동해야 함', async () => {\n      // API 실패 설정\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.reject(new Error('Network error'))) as any,\n          })),\n        })),\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 연속 실패 시뮬레이션\n      for (let i = 0; i < 3; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(1000);\n        });\n      }\n\n      // 에러 알림 확인\n      await waitFor(() => {\n        expect(screen.getByText(/데이터 로딩 오류|오류|Error/i)).toBeInTheDocument();\n      });\n    });\n\n    it('폴링이 브라우저 성능에 미치는 영향이 최소화되어야 함', async () => {\n      let callTimes: number[] = [];\n\n      mockSupabaseClient.from.mockImplementation(() => {\n        callTimes.push(mockPerformance.now() as number);\n        return {\n          select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              single: jest.fn(() => Promise.resolve({ data: null })) as any,\n            })),\n          })),\n        };\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={1000}\n        />\n      );\n\n      // 5초간 폴링 모니터링\n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      // API 호출 간격이 일정한지 확인 (1초 ± 50ms)\n      for (let i = 1; i < callTimes.length; i++) {\n        const interval = callTimes[i] - callTimes[i - 1];\n        expect(interval).toBeGreaterThanOrEqual(950);\n        expect(interval).toBeLessThanOrEqual(1050);\n      }\n    });\n\n    it('폴링 데이터 무결성 검증', async () => {\n      const testData = {\n        data: {\n          id: 1,\n          vote_item: [\n            {\n              id: 1,\n              vote_total: 200,\n              artist: { id: 1, name: { ko: 'Updated Artist' }, image: 'updated.jpg' },\n            },\n          ],\n        },\n      };\n\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve(testData)) as any,\n          })),\n        })),\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 업데이트된 투표 수 확인\n      await waitFor(() => {\n        expect(screen.getByText('200')).toBeInTheDocument();\n      });\n    });\n\n    it('응답 시간이 정확하게 측정되어야 함', async () => {\n      let callIndex = 0;\n\n      mockSupabaseClient.from.mockImplementation(() => {\n        const startTime = 100 + callIndex * 1000;\n        const endTime = startTime + 50; // 50ms 응답 시간 시뮬레이션\n        \n        // Mock return values for performance.now\n        mockPerformance.now\n          .mockReturnValueOnce(startTime)\n          .mockReturnValueOnce(endTime);\n        callIndex++;\n\n        return {\n          select: jest.fn(() => ({\n            eq: jest.fn(() => ({\n              single: jest.fn(() => Promise.resolve({ data: null })) as any,\n            })),\n          })),\n        };\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(2000);\n      });\n\n      // 응답 시간 측정이 이루어졌는지 확인\n      expect(mockPerformance.now).toHaveBeenCalled();\n    });\n  });\n\n  describe('📄 정적 모드 테스트', () => {\n    it('정적 모드에서 초기 데이터만 표시되어야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={0}\n        />\n      );\n\n      // 초기 투표 수 확인\n      expect(screen.getByText('100')).toBeInTheDocument();\n\n      // 5초 대기 후에도 API 호출이 없어야 함\n      const initialCallCount = mockSupabaseClient.from.mock.calls.length;\n      \n      await act(async () => {\n        jest.advanceTimersByTime(5000);\n      });\n\n      expect(mockSupabaseClient.from.mock.calls.length).toBe(initialCallCount);\n    });\n\n    it('정적 모드에서 자동 업데이트가 차단되어야 함', async () => {\n      const { rerender } = render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n          pollingInterval={0}\n        />\n      );\n\n      // props 변경으로 재렌더링해도 기존 데이터 유지\n      const updatedItems = [...mockVoteItems];\n      updatedItems[0].vote_total = 999;\n\n      rerender(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={updatedItems}\n          enableRealtime={false}\n          pollingInterval={0}\n        />\n      );\n\n      // 여전히 초기 값 표시\n      expect(screen.getByText('100')).toBeInTheDocument();\n      expect(screen.queryByText('999')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('🔄 모드 전환 테스트', () => {\n    it('연결 품질에 따른 자동 모드 전환이 정확해야 함', async () => {\n      let shouldFail = false;\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: jest.fn((callback: (status: string, error?: Error) => void) => {\n          if (shouldFail) {\n            setTimeout(() => callback('CHANNEL_ERROR', new Error('Quality degraded')), 10);\n          } else {\n            setTimeout(() => callback('SUBSCRIBED'), 10);\n          }\n          return { unsubscribe: jest.fn() };\n        }),\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 초기 실시간 연결 성공\n      await act(async () => {\n        jest.advanceTimersByTime(50);\n      });\n\n      expect(screen.getByText(/실시간|Realtime/i)).toBeInTheDocument();\n\n      // 품질 저하로 실패 시뮬레이션\n      shouldFail = true;\n      \n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n\n      // 폴링 모드로 전환 확인\n      expect(screen.getByText(/폴링|Polling/i)).toBeInTheDocument();\n    });\n\n    it('모드 전환 시 기존 데이터와 UI 상태가 유지되어야 함', async () => {\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: jest.fn((callback: (status: string, error?: Error) => void) => {\n          setTimeout(() => callback('CHANNEL_ERROR'), 10);\n          return { unsubscribe: jest.fn() };\n        }),\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 초기 데이터 확인\n      expect(screen.getByText('100')).toBeInTheDocument();\n\n      // 모드 전환 후에도 데이터 유지\n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n\n      expect(screen.getByText('100')).toBeInTheDocument();\n    });\n  });\n\n  describe('📊 연결 품질 모니터링 테스트', () => {\n    it('품질 점수가 정확하게 계산되어야 함', async () => {\n      let errorCount = 0;\n      mockSupabaseClient.from.mockImplementation(() => {\n        errorCount++;\n        if (errorCount <= 2) {\n          return {\n            select: jest.fn(() => ({\n              eq: jest.fn(() => ({\n                single: jest.fn(() => Promise.reject(new Error('Network error'))) as any,\n              })),\n            })),\n          };\n        } else {\n          return {\n            select: jest.fn(() => ({\n              eq: jest.fn(() => ({\n                single: jest.fn(() => Promise.resolve({ data: null })) as any,\n              })),\n            })),\n          };\n        }\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 연속 에러 후 성공 시나리오\n      for (let i = 0; i < 3; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(1000);\n        });\n      }\n\n      // 품질 복구 확인\n      await waitFor(() => {\n        // 에러 메시지가 사라졌는지 확인\n        expect(screen.queryByText(/데이터 로딩 오류/)).not.toBeInTheDocument();\n      });\n    });\n\n    it('각 모드의 CPU 사용률이 적절해야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 10초간 폴링 실행\n      await act(async () => {\n        jest.advanceTimersByTime(10000);\n      });\n\n      // 성능 측정이 이루어졌는지 확인\n      expect(mockSupabaseClient.from.mock.calls.length).toBeGreaterThan(5);\n    });\n  });\n\n  describe('🎨 UI/UX 테스트', () => {\n    it('현재 연결 모드와 상태가 사용자에게 명확하게 표시되어야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 연결 상태 표시 확인\n      await waitFor(() => {\n        expect(screen.getByText(/실시간|Realtime|연결|Connected/i)).toBeInTheDocument();\n      });\n    });\n\n    it('투표수 변경 시 애니메이션이 정상 작동해야 함', async () => {\n      const testData = {\n        data: {\n          id: 1,\n          vote_item: [\n            {\n              id: 1,\n              vote_total: 150,\n              artist: { id: 1, name: { ko: 'Artist 1' }, image: 'artist1.jpg' },\n            },\n          ],\n        },\n      };\n\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => Promise.resolve(testData)) as any,\n          })),\n        })),\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 업데이트된 값이 표시되는지 확인 (애니메이션과 함께)\n      await waitFor(() => {\n        expect(screen.getByText('150')).toBeInTheDocument();\n      });\n    });\n\n    it('로딩 상태가 적절하게 표시되어야 함', async () => {\n      // 로딩 지연 시뮬레이션\n      mockSupabaseClient.from.mockReturnValue({\n        select: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            single: jest.fn(() => new Promise(resolve => setTimeout(() => resolve({ data: null }), 2000))) as any,\n          })),\n        })),\n      });\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(1000);\n      });\n\n      // 로딩 표시가 있는지 확인 (스피너, 스켈레톤 등)\n      // 로딩 상태는 주로 초기 렌더링에서 확인\n      expect(screen.getByText(/Test Vote/)).toBeInTheDocument();\n    });\n  });\n\n  describe('⚡ 성능 및 안정성 테스트', () => {\n    it('장시간 사용 시 메모리 누수가 발생하지 않아야 함', async () => {\n      const { unmount } = render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 100회 폴링 시뮬레이션\n      for (let i = 0; i < 100; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(1000);\n        });\n      }\n\n      // 컴포넌트 언마운트\n      unmount();\n\n      // 모든 타이머가 정리되었는지 확인\n      expect(jest.getTimerCount()).toBe(0);\n    });\n\n    it('각 모드의 CPU 사용률이 적절해야 함', async () => {\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={false}\n        />\n      );\n\n      // 10초간 폴링 실행\n      await act(async () => {\n        jest.advanceTimersByTime(10000);\n      });\n\n      // 성능 측정이 이루어졌는지 확인\n      expect(mockSupabaseClient.from.mock.calls.length).toBeGreaterThan(5);\n    });\n  });\n\n  describe('🔥 극한 상황 테스트', () => {\n    it('고빈도 데이터 변경 시 시스템 안정성이 유지되어야 함', async () => {\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: jest.fn((callback: (status: string) => void) => {\n          setTimeout(() => callback('SUBSCRIBED'), 10);\n          return { unsubscribe: jest.fn() };\n        }),\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      await act(async () => {\n        jest.advanceTimersByTime(50);\n      });\n\n      const realtimeHandler = channelMock.on.mock.calls[0][2] as Function;\n\n      // 100회 빠른 업데이트 시뮬레이션\n      for (let i = 0; i < 100; i++) {\n        await act(async () => {\n          realtimeHandler({\n            eventType: 'UPDATE',\n            new: { id: 1, vote_total: 100 + i },\n          });\n        });\n      }\n\n      // 시스템이 여전히 응답하는지 확인\n      expect(screen.getByText(/Test Vote/)).toBeInTheDocument();\n    });\n\n    it('네트워크 불안정 상황에서의 안정성 확인', async () => {\n      let connectionAttempts = 0;\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: jest.fn((callback: (status: string, error?: Error) => void) => {\n          connectionAttempts++;\n          // 불안정한 연결 시뮬레이션\n          if (connectionAttempts % 2 === 0) {\n            setTimeout(() => callback('CHANNEL_ERROR', new Error('Unstable network')), 10);\n          } else {\n            setTimeout(() => callback('SUBSCRIBED'), 10);\n          }\n          return { unsubscribe: jest.fn() };\n        }),\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 20초간 불안정한 네트워크 시뮬레이션\n      for (let i = 0; i < 4; i++) {\n        await act(async () => {\n          jest.advanceTimersByTime(5000);\n        });\n      }\n\n      // 여러 번의 연결 시도가 있었는지 확인\n      expect(connectionAttempts).toBeGreaterThan(1);\n      \n      // 애플리케이션이 여전히 동작하는지 확인\n      expect(screen.getByText(/Test Vote/)).toBeInTheDocument();\n    });\n  });\n\n  describe('🧪 통합 시나리오 테스트', () => {\n    it('전체 사용자 여정: 실시간 → 폴링 → 실시간 복구', async () => {\n      let connectionState = 'good';\n      const channelMock = {\n        on: jest.fn().mockReturnThis(),\n        subscribe: jest.fn((callback: (status: string, error?: Error) => void) => {\n          if (connectionState === 'good') {\n            setTimeout(() => callback('SUBSCRIBED'), 10);\n          } else {\n            setTimeout(() => callback('CHANNEL_ERROR', new Error('Network issue')), 10);\n          }\n          return { unsubscribe: jest.fn() };\n        }),\n      };\n\n      mockSupabaseClient.channel.mockReturnValue(channelMock);\n\n      render(\n        <HybridVoteDetailPresenter\n          vote={mockVote}\n          initialItems={mockVoteItems}\n          enableRealtime={true}\n        />\n      );\n\n      // 1. 초기 실시간 연결\n      await act(async () => {\n        jest.advanceTimersByTime(50);\n      });\n      expect(screen.getByText(/실시간|Realtime/i)).toBeInTheDocument();\n\n      // 2. 연결 불량으로 폴링 모드 전환\n      connectionState = 'bad';\n      await act(async () => {\n        jest.advanceTimersByTime(100);\n      });\n      \n      // 폴링이 시작되었는지 확인\n      await waitFor(() => {\n        expect(mockSupabaseClient.from).toHaveBeenCalled();\n      });\n\n      // 3. 네트워크 복구로 실시간 모드 복귀\n      connectionState = 'good';\n      await act(async () => {\n        jest.advanceTimersByTime(5000); // 재연결 대기 시간\n      });\n\n      // 재연결 시도가 이루어졌는지 확인\n      expect(channelMock.subscribe.mock.calls.length).toBeGreaterThanOrEqual(2);\n    });\n  });\n});"],"names":["mockPerformance","now","jest","fn","Date","mark","measure","getEntriesByType","getEntriesByName","clearMarks","clearMeasures","createMockSupabaseClient","auth","getUser","mockResolvedValue","data","user","id","email","from","mockReturnValue","select","eq","single","title","ko","vote_content","vote_item","vote_total","artist","name","image","maybeSingle","channel","mock","createBrowserSupabaseClient","useLanguageStore","currentLanguage","useAuth","session","isLoading","signOut","AuthProvider","children","useRequireAuth","withAuth","Promise","resolve","useAuthGuard","isAuthenticated","requireAuth","getLocalizedString","obj","lang","getCdnImageUrl","url","motion","div","props","span","AnimatePresence","mockVote","start_at","toISOString","stop_at","area","created_at","updated_at","deleted_at","main_image","order","result_image","visible_at","vote_category","vote_sub_category","wait_image","mockVoteItems","artist_id","group_id","vote_id","birth_date","debut_date","debut_dd","debut_mm","debut_yy","gender","is_kpop","is_musical","is_solo","dd","mm","yy","describe","mockSupabaseClient","createBrowserSupabaseClientMock","originalPerformance","beforeAll","global","performance","Object","defineProperty","writable","value","afterAll","beforeEach","clearAllMocks","clearAllTimers","isMockFunction","setTimeout","useFakeTimers","require","afterEach","useRealTimers","it","render","HybridVoteDetailPresenter","vote","initialItems","enableRealtime","waitFor","expect","toHaveBeenCalledWith","channelInstance","results","on","objectContaining","event","schema","table","any","Function","mockSubscribe","mockImplementation","callback","unsubscribe","channelMock","mockReturnThis","subscribe","act","advanceTimersByTime","realtimeHandler","calls","eventType","new","old","screen","getByText","toBeInTheDocument","Error","toHaveBeenCalled","connectionAttempts","toHaveBeenCalledTimes","pollingInterval","initialCallCount","length","i","toBe","reject","callTimes","push","interval","toBeGreaterThanOrEqual","toBeLessThanOrEqual","testData","callIndex","startTime","endTime","mockReturnValueOnce","rerender","updatedItems","queryByText","not","shouldFail","errorCount","toBeGreaterThan","unmount","getTimerCount","connectionState"],"mappings":"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"}