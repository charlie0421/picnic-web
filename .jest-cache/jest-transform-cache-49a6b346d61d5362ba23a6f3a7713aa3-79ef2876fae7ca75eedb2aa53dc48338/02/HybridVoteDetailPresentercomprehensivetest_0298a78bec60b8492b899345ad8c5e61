3f4f6543e623583e6cdc7de6ac8a380b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
const _HybridVoteDetailPresenter = require("../../../components/client/vote/detail/HybridVoteDetailPresenter");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Create mock performance object
const mockPerformance = {
    now: _globals.jest.fn(()=>Date.now()),
    mark: _globals.jest.fn(),
    measure: _globals.jest.fn(),
    getEntriesByType: _globals.jest.fn(()=>[]),
    getEntriesByName: _globals.jest.fn(()=>[]),
    clearMarks: _globals.jest.fn(),
    clearMeasures: _globals.jest.fn()
};
// Mock implementations
const createMockSupabaseClient = ()=>{
    return {
        auth: {
            getUser: _globals.jest.fn().mockResolvedValue({
                data: {
                    user: {
                        id: 'user123',
                        email: 'test@example.com'
                    }
                }
            })
        },
        from: _globals.jest.fn().mockReturnValue({
            select: _globals.jest.fn().mockReturnValue({
                eq: _globals.jest.fn().mockReturnValue({
                    single: _globals.jest.fn().mockResolvedValue({
                        data: {
                            id: 1,
                            title: {
                                ko: 'Test Vote'
                            },
                            vote_content: 'Test description',
                            vote_item: [
                                {
                                    id: 1,
                                    vote_total: 100,
                                    artist: {
                                        id: 1,
                                        name: {
                                            ko: 'Artist 1'
                                        },
                                        image: 'artist1.jpg'
                                    }
                                },
                                {
                                    id: 2,
                                    vote_total: 50,
                                    artist: {
                                        id: 2,
                                        name: {
                                            ko: 'Artist 2'
                                        },
                                        image: 'artist2.jpg'
                                    }
                                }
                            ]
                        }
                    }),
                    maybeSingle: _globals.jest.fn().mockResolvedValue({
                        data: null
                    })
                })
            })
        }),
        channel: _globals.jest.fn()
    };
};
// Mock hooks and utilities
_globals.jest.mock('@/lib/supabase/client', ()=>({
        createBrowserSupabaseClient: _globals.jest.fn()
    }));
_globals.jest.mock('@/stores/languageStore', ()=>({
        useLanguageStore: ()=>({
                currentLanguage: 'ko'
            })
    }));
// Mock the auth provider and context completely
_globals.jest.mock('@/lib/supabase/auth-provider', ()=>({
        useAuth: _globals.jest.fn(()=>({
                user: null,
                session: null,
                isLoading: false,
                signOut: _globals.jest.fn()
            })),
        AuthProvider: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            })
    }));
// Mock the auth guard hook completely
_globals.jest.mock('@/hooks/useAuthGuard', ()=>({
        useRequireAuth: _globals.jest.fn(()=>({
                withAuth: _globals.jest.fn((fn)=>{
                    // Mock successful authentication
                    if (typeof fn === 'function') {
                        return Promise.resolve(fn());
                    }
                    return Promise.resolve(true);
                })
            })),
        useAuthGuard: _globals.jest.fn(()=>({
                user: null,
                isAuthenticated: false,
                isLoading: false,
                requireAuth: _globals.jest.fn()
            }))
    }));
// Mock other utility functions
_globals.jest.mock('@/utils/api/strings', ()=>({
        getLocalizedString: _globals.jest.fn((obj, lang)=>{
            if (typeof obj === 'string') return obj;
            if (typeof obj === 'object' && obj && lang in obj) {
                return obj[lang];
            }
            return 'Mock String';
        })
    }));
_globals.jest.mock('@/utils/api/image', ()=>({
        getCdnImageUrl: _globals.jest.fn((url)=>url || '/default-image.jpg')
    }));
// Mock framer-motion for animations
_globals.jest.mock('framer-motion', ()=>({
        motion: {
            div: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    ...props,
                    children: children
                }),
            span: ({ children, ...props })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                    ...props,
                    children: children
                })
        },
        AnimatePresence: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
                children: children
            })
    }));
// Mock data
const mockVote = {
    id: 1,
    title: {
        ko: 'Test Vote'
    },
    vote_content: 'Test vote description',
    start_at: new Date('2024-01-01T00:00:00Z').toISOString(),
    stop_at: new Date('2024-12-31T23:59:59Z').toISOString(),
    area: 'global',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    deleted_at: null,
    main_image: null,
    order: null,
    result_image: null,
    visible_at: null,
    vote_category: null,
    vote_sub_category: null,
    wait_image: null
};
const mockVoteItems = [
    {
        id: 1,
        artist_id: 1,
        group_id: 1,
        vote_id: 1,
        vote_total: 100,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        deleted_at: null,
        artist: {
            id: 1,
            name: {
                ko: 'Artist 1'
            },
            image: 'https://example.com/artist1.jpg',
            birth_date: null,
            created_at: new Date().toISOString(),
            debut_date: null,
            debut_dd: null,
            debut_mm: null,
            debut_yy: null,
            deleted_at: null,
            gender: null,
            group_id: null,
            is_kpop: true,
            is_musical: false,
            is_solo: true,
            updated_at: new Date().toISOString(),
            dd: null,
            mm: null,
            yy: null
        }
    }
];
describe('HybridVoteDetailPresenter - Comprehensive Testing (Task 10.8)', ()=>{
    let mockSupabaseClient;
    let createBrowserSupabaseClientMock;
    let originalPerformance;
    beforeAll(()=>{
        // Mock performance API globally
        originalPerformance = global.performance;
        Object.defineProperty(global, 'performance', {
            writable: true,
            value: mockPerformance
        });
    });
    afterAll(()=>{
        // Restore original performance
        Object.defineProperty(global, 'performance', {
            writable: true,
            value: originalPerformance
        });
    });
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        _globals.jest.clearAllTimers();
        // Only use fake timers if not already using them
        if (!_globals.jest.isMockFunction(setTimeout)) {
            _globals.jest.useFakeTimers();
        }
        // Create fresh mock client for each test
        mockSupabaseClient = createMockSupabaseClient();
        createBrowserSupabaseClientMock = require('@/lib/supabase/client').createBrowserSupabaseClient;
        createBrowserSupabaseClientMock.mockReturnValue(mockSupabaseClient);
        // Reset performance mock
        _globals.jest.clearAllMocks();
    });
    afterEach(()=>{
        // Only restore timers if we're currently using fake timers
        if (_globals.jest.isMockFunction(setTimeout)) {
            _globals.jest.useRealTimers();
        }
    });
    describe('🔴 실시간 모드 테스트 (WebSocket)', ()=>{
        it('실시간 연결이 정상적으로 이루어져야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            await (0, _react1.waitFor)(()=>{
                expect(mockSupabaseClient.channel).toHaveBeenCalledWith('supabase_realtime');
            });
            // 구독 설정 확인
            const channelInstance = mockSupabaseClient.channel.mock.results[0].value;
            expect(channelInstance.on).toHaveBeenCalledWith('postgres_changes', expect.objectContaining({
                event: '*',
                schema: 'public',
                table: 'vote_item'
            }), expect.any(Function));
        });
        it('실시간 데이터 업데이트가 즉시 UI에 반영되어야 함', async ()=>{
            const mockSubscribe = _globals.jest.fn();
            mockSubscribe.mockImplementation((callback)=>{
                setTimeout(()=>callback('SUBSCRIBED'), 10);
                return {
                    unsubscribe: _globals.jest.fn()
                };
            });
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: mockSubscribe
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(50);
            });
            // 실시간 이벤트 핸들러 가져오기
            const realtimeHandler = channelMock.on.mock.calls[0][2];
            // 실시간 업데이트 시뮬레이션
            await (0, _react1.act)(async ()=>{
                realtimeHandler({
                    eventType: 'UPDATE',
                    new: {
                        id: 1,
                        vote_total: 150
                    },
                    old: {
                        id: 1,
                        vote_total: 100
                    }
                });
            });
            // UI 업데이트 확인을 위해 추가 시간 대기
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            // 실시간 연결 상태 표시 확인
            expect(_react1.screen.getByText(/실시간|Realtime|Connected/i)).toBeInTheDocument();
        });
        it('실시간 연결 끊김 시 폴링 모드로 자동 전환되어야 함', async ()=>{
            const mockSubscribe = _globals.jest.fn();
            mockSubscribe.mockImplementation((callback)=>{
                setTimeout(()=>callback('CHANNEL_ERROR', new Error('Connection failed')), 10);
                return {
                    unsubscribe: _globals.jest.fn()
                };
            });
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: mockSubscribe
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            // 폴링 모드로 전환 확인 (폴링 API 호출 시작)
            await (0, _react1.waitFor)(()=>{
                expect(mockSupabaseClient.from).toHaveBeenCalled();
            });
            // 모드 전환 알림 확인
            expect(_react1.screen.getByText(/폴링|Polling/i)).toBeInTheDocument();
        });
        it('네트워크 복구 시 실시간 모드로 재전환되어야 함', async ()=>{
            let connectionAttempts = 0;
            const mockSubscribe = _globals.jest.fn();
            mockSubscribe.mockImplementation((callback)=>{
                connectionAttempts++;
                if (connectionAttempts === 1) {
                    setTimeout(()=>callback('CHANNEL_ERROR', new Error('Connection failed')), 10);
                } else {
                    setTimeout(()=>callback('SUBSCRIBED'), 10);
                }
                return {
                    unsubscribe: _globals.jest.fn()
                };
            });
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: mockSubscribe
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 첫 번째 연결 실패
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            // 재연결 시도 (5초 후)
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(5000);
            });
            // 재연결 성공 확인
            expect(mockSubscribe).toHaveBeenCalledTimes(2);
        });
    });
    describe('⚙️ 폴링 모드 테스트 (HTTP 요청)', ()=>{
        it('1초마다 정확하게 데이터를 가져와야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false,
                pollingInterval: 1000
            }));
            const initialCallCount = mockSupabaseClient.from.mock.calls.length;
            // 3초 동안 폴링 확인
            for(let i = 1; i <= 3; i++){
                await (0, _react1.act)(async ()=>{
                    _globals.jest.advanceTimersByTime(1000);
                });
                await (0, _react1.waitFor)(()=>{
                    expect(mockSupabaseClient.from.mock.calls.length).toBe(initialCallCount + i);
                });
            }
        });
        it('API 호출 실패 시 에러 카운트가 증가하고 재시도 로직이 작동해야 함', async ()=>{
            // API 실패 설정
            mockSupabaseClient.from.mockReturnValue({
                select: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                single: _globals.jest.fn(()=>Promise.reject(new Error('Network error')))
                            }))
                    }))
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            // 연속 실패 시뮬레이션
            for(let i = 0; i < 3; i++){
                await (0, _react1.act)(async ()=>{
                    _globals.jest.advanceTimersByTime(1000);
                });
            }
            // 에러 알림 확인
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/데이터 로딩 오류|오류|Error/i)).toBeInTheDocument();
            });
        });
        it('폴링이 브라우저 성능에 미치는 영향이 최소화되어야 함', async ()=>{
            let callTimes = [];
            mockSupabaseClient.from.mockImplementation(()=>{
                callTimes.push(mockPerformance.now());
                return {
                    select: _globals.jest.fn(()=>({
                            eq: _globals.jest.fn(()=>({
                                    single: _globals.jest.fn(()=>Promise.resolve({
                                            data: null
                                        }))
                                }))
                        }))
                };
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false,
                pollingInterval: 1000
            }));
            // 5초간 폴링 모니터링
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(5000);
            });
            // API 호출 간격이 일정한지 확인 (1초 ± 50ms)
            for(let i = 1; i < callTimes.length; i++){
                const interval = callTimes[i] - callTimes[i - 1];
                expect(interval).toBeGreaterThanOrEqual(950);
                expect(interval).toBeLessThanOrEqual(1050);
            }
        });
        it('폴링 데이터 무결성 검증', async ()=>{
            const testData = {
                data: {
                    id: 1,
                    vote_item: [
                        {
                            id: 1,
                            vote_total: 200,
                            artist: {
                                id: 1,
                                name: {
                                    ko: 'Updated Artist'
                                },
                                image: 'updated.jpg'
                            }
                        }
                    ]
                }
            };
            mockSupabaseClient.from.mockReturnValue({
                select: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                single: _globals.jest.fn(()=>Promise.resolve(testData))
                            }))
                    }))
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(1000);
            });
            // 업데이트된 투표 수 확인
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('200')).toBeInTheDocument();
            });
        });
        it('응답 시간이 정확하게 측정되어야 함', async ()=>{
            let callIndex = 0;
            mockSupabaseClient.from.mockImplementation(()=>{
                const startTime = 100 + callIndex * 1000;
                const endTime = startTime + 50; // 50ms 응답 시간 시뮬레이션
                // Mock return values for performance.now
                mockPerformance.now.mockReturnValueOnce(startTime).mockReturnValueOnce(endTime);
                callIndex++;
                return {
                    select: _globals.jest.fn(()=>({
                            eq: _globals.jest.fn(()=>({
                                    single: _globals.jest.fn(()=>Promise.resolve({
                                            data: null
                                        }))
                                }))
                        }))
                };
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(2000);
            });
            // 응답 시간 측정이 이루어졌는지 확인
            expect(mockPerformance.now).toHaveBeenCalled();
        });
    });
    describe('📄 정적 모드 테스트', ()=>{
        it('정적 모드에서 초기 데이터만 표시되어야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false,
                pollingInterval: 0
            }));
            // 초기 투표 수 확인
            expect(_react1.screen.getByText('100')).toBeInTheDocument();
            // 5초 대기 후에도 API 호출이 없어야 함
            const initialCallCount = mockSupabaseClient.from.mock.calls.length;
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(5000);
            });
            expect(mockSupabaseClient.from.mock.calls.length).toBe(initialCallCount);
        });
        it('정적 모드에서 자동 업데이트가 차단되어야 함', async ()=>{
            const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false,
                pollingInterval: 0
            }));
            // props 변경으로 재렌더링해도 기존 데이터 유지
            const updatedItems = [
                ...mockVoteItems
            ];
            updatedItems[0].vote_total = 999;
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: updatedItems,
                enableRealtime: false,
                pollingInterval: 0
            }));
            // 여전히 초기 값 표시
            expect(_react1.screen.getByText('100')).toBeInTheDocument();
            expect(_react1.screen.queryByText('999')).not.toBeInTheDocument();
        });
    });
    describe('🔄 모드 전환 테스트', ()=>{
        it('연결 품질에 따른 자동 모드 전환이 정확해야 함', async ()=>{
            let shouldFail = false;
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: _globals.jest.fn((callback)=>{
                    if (shouldFail) {
                        setTimeout(()=>callback('CHANNEL_ERROR', new Error('Quality degraded')), 10);
                    } else {
                        setTimeout(()=>callback('SUBSCRIBED'), 10);
                    }
                    return {
                        unsubscribe: _globals.jest.fn()
                    };
                })
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 초기 실시간 연결 성공
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(50);
            });
            expect(_react1.screen.getByText(/실시간|Realtime/i)).toBeInTheDocument();
            // 품질 저하로 실패 시뮬레이션
            shouldFail = true;
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            // 폴링 모드로 전환 확인
            expect(_react1.screen.getByText(/폴링|Polling/i)).toBeInTheDocument();
        });
        it('모드 전환 시 기존 데이터와 UI 상태가 유지되어야 함', async ()=>{
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: _globals.jest.fn((callback)=>{
                    setTimeout(()=>callback('CHANNEL_ERROR'), 10);
                    return {
                        unsubscribe: _globals.jest.fn()
                    };
                })
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 초기 데이터 확인
            expect(_react1.screen.getByText('100')).toBeInTheDocument();
            // 모드 전환 후에도 데이터 유지
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            expect(_react1.screen.getByText('100')).toBeInTheDocument();
        });
    });
    describe('📊 연결 품질 모니터링 테스트', ()=>{
        it('품질 점수가 정확하게 계산되어야 함', async ()=>{
            let errorCount = 0;
            mockSupabaseClient.from.mockImplementation(()=>{
                errorCount++;
                if (errorCount <= 2) {
                    return {
                        select: _globals.jest.fn(()=>({
                                eq: _globals.jest.fn(()=>({
                                        single: _globals.jest.fn(()=>Promise.reject(new Error('Network error')))
                                    }))
                            }))
                    };
                } else {
                    return {
                        select: _globals.jest.fn(()=>({
                                eq: _globals.jest.fn(()=>({
                                        single: _globals.jest.fn(()=>Promise.resolve({
                                                data: null
                                            }))
                                    }))
                            }))
                    };
                }
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            // 연속 에러 후 성공 시나리오
            for(let i = 0; i < 3; i++){
                await (0, _react1.act)(async ()=>{
                    _globals.jest.advanceTimersByTime(1000);
                });
            }
            // 품질 복구 확인
            await (0, _react1.waitFor)(()=>{
                // 에러 메시지가 사라졌는지 확인
                expect(_react1.screen.queryByText(/데이터 로딩 오류/)).not.toBeInTheDocument();
            });
        });
        it('각 모드의 CPU 사용률이 적절해야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            // 10초간 폴링 실행
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(10000);
            });
            // 성능 측정이 이루어졌는지 확인
            expect(mockSupabaseClient.from.mock.calls.length).toBeGreaterThan(5);
        });
    });
    describe('🎨 UI/UX 테스트', ()=>{
        it('현재 연결 모드와 상태가 사용자에게 명확하게 표시되어야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 연결 상태 표시 확인
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/실시간|Realtime|연결|Connected/i)).toBeInTheDocument();
            });
        });
        it('투표수 변경 시 애니메이션이 정상 작동해야 함', async ()=>{
            const testData = {
                data: {
                    id: 1,
                    vote_item: [
                        {
                            id: 1,
                            vote_total: 150,
                            artist: {
                                id: 1,
                                name: {
                                    ko: 'Artist 1'
                                },
                                image: 'artist1.jpg'
                            }
                        }
                    ]
                }
            };
            mockSupabaseClient.from.mockReturnValue({
                select: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                single: _globals.jest.fn(()=>Promise.resolve(testData))
                            }))
                    }))
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(1000);
            });
            // 업데이트된 값이 표시되는지 확인 (애니메이션과 함께)
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText('150')).toBeInTheDocument();
            });
        });
        it('로딩 상태가 적절하게 표시되어야 함', async ()=>{
            // 로딩 지연 시뮬레이션
            mockSupabaseClient.from.mockReturnValue({
                select: _globals.jest.fn(()=>({
                        eq: _globals.jest.fn(()=>({
                                single: _globals.jest.fn(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                                                data: null
                                            }), 2000)))
                            }))
                    }))
            });
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(1000);
            });
            // 로딩 표시가 있는지 확인 (스피너, 스켈레톤 등)
            // 로딩 상태는 주로 초기 렌더링에서 확인
            expect(_react1.screen.getByText(/Test Vote/)).toBeInTheDocument();
        });
    });
    describe('⚡ 성능 및 안정성 테스트', ()=>{
        it('장시간 사용 시 메모리 누수가 발생하지 않아야 함', async ()=>{
            const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            // 100회 폴링 시뮬레이션
            for(let i = 0; i < 100; i++){
                await (0, _react1.act)(async ()=>{
                    _globals.jest.advanceTimersByTime(1000);
                });
            }
            // 컴포넌트 언마운트
            unmount();
            // 모든 타이머가 정리되었는지 확인
            expect(_globals.jest.getTimerCount()).toBe(0);
        });
        it('각 모드의 CPU 사용률이 적절해야 함', async ()=>{
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: false
            }));
            // 10초간 폴링 실행
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(10000);
            });
            // 성능 측정이 이루어졌는지 확인
            expect(mockSupabaseClient.from.mock.calls.length).toBeGreaterThan(5);
        });
    });
    describe('🔥 극한 상황 테스트', ()=>{
        it('고빈도 데이터 변경 시 시스템 안정성이 유지되어야 함', async ()=>{
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: _globals.jest.fn((callback)=>{
                    setTimeout(()=>callback('SUBSCRIBED'), 10);
                    return {
                        unsubscribe: _globals.jest.fn()
                    };
                })
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(50);
            });
            const realtimeHandler = channelMock.on.mock.calls[0][2];
            // 100회 빠른 업데이트 시뮬레이션
            for(let i = 0; i < 100; i++){
                await (0, _react1.act)(async ()=>{
                    realtimeHandler({
                        eventType: 'UPDATE',
                        new: {
                            id: 1,
                            vote_total: 100 + i
                        }
                    });
                });
            }
            // 시스템이 여전히 응답하는지 확인
            expect(_react1.screen.getByText(/Test Vote/)).toBeInTheDocument();
        });
        it('네트워크 불안정 상황에서의 안정성 확인', async ()=>{
            let connectionAttempts = 0;
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: _globals.jest.fn((callback)=>{
                    connectionAttempts++;
                    // 불안정한 연결 시뮬레이션
                    if (connectionAttempts % 2 === 0) {
                        setTimeout(()=>callback('CHANNEL_ERROR', new Error('Unstable network')), 10);
                    } else {
                        setTimeout(()=>callback('SUBSCRIBED'), 10);
                    }
                    return {
                        unsubscribe: _globals.jest.fn()
                    };
                })
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 20초간 불안정한 네트워크 시뮬레이션
            for(let i = 0; i < 4; i++){
                await (0, _react1.act)(async ()=>{
                    _globals.jest.advanceTimersByTime(5000);
                });
            }
            // 여러 번의 연결 시도가 있었는지 확인
            expect(connectionAttempts).toBeGreaterThan(1);
            // 애플리케이션이 여전히 동작하는지 확인
            expect(_react1.screen.getByText(/Test Vote/)).toBeInTheDocument();
        });
    });
    describe('🧪 통합 시나리오 테스트', ()=>{
        it('전체 사용자 여정: 실시간 → 폴링 → 실시간 복구', async ()=>{
            let connectionState = 'good';
            const channelMock = {
                on: _globals.jest.fn().mockReturnThis(),
                subscribe: _globals.jest.fn((callback)=>{
                    if (connectionState === 'good') {
                        setTimeout(()=>callback('SUBSCRIBED'), 10);
                    } else {
                        setTimeout(()=>callback('CHANNEL_ERROR', new Error('Network issue')), 10);
                    }
                    return {
                        unsubscribe: _globals.jest.fn()
                    };
                })
            };
            mockSupabaseClient.channel.mockReturnValue(channelMock);
            (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_HybridVoteDetailPresenter.HybridVoteDetailPresenter, {
                vote: mockVote,
                initialItems: mockVoteItems,
                enableRealtime: true
            }));
            // 1. 초기 실시간 연결
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(50);
            });
            expect(_react1.screen.getByText(/실시간|Realtime/i)).toBeInTheDocument();
            // 2. 연결 불량으로 폴링 모드 전환
            connectionState = 'bad';
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(100);
            });
            // 폴링이 시작되었는지 확인
            await (0, _react1.waitFor)(()=>{
                expect(mockSupabaseClient.from).toHaveBeenCalled();
            });
            // 3. 네트워크 복구로 실시간 모드 복귀
            connectionState = 'good';
            await (0, _react1.act)(async ()=>{
                _globals.jest.advanceTimersByTime(5000); // 재연결 대기 시간
            });
            // 재연결 시도가 이루어졌는지 확인
            expect(channelMock.subscribe.mock.calls.length).toBeGreaterThanOrEqual(2);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,