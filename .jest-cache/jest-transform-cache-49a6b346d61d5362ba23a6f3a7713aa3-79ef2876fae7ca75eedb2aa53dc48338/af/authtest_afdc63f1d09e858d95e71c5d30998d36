9745da6313b6d215b75319f90eca5b80
/**
 * Auth API 유틸리티 테스트
 */ "use strict";
jest.mock('../../../lib/supabase/client', ()=>({
        createBrowserSupabaseClient: jest.fn(()=>({
                auth: {
                    getSession: jest.fn(),
                    onAuthStateChange: jest.fn(()=>({
                            data: {
                                subscription: {
                                    unsubscribe: jest.fn()
                                }
                            }
                        }))
                }
            }))
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auth = require("../../../utils/api/auth");
// 세션 모킹
const mockSession = {
    user: {
        id: 'test-user-id',
        email: 'test@example.com',
        app_metadata: {},
        user_metadata: {},
        aud: 'authenticated',
        created_at: '2023-01-01T00:00:00.000Z'
    },
    access_token: 'mock-access-token',
    token_type: 'bearer',
    expires_in: 3600,
    refresh_token: 'mock-refresh-token'
};
const mockSupabase = _auth.supabase;
describe('Auth API Utils', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // console.error 모킹
        jest.spyOn(console, 'error').mockImplementation(()=>{});
        // 환경 변수 설정
        process.env.NEXT_PUBLIC_CDN_URL = 'https://cdn.example.com';
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('isUserLoggedIn', ()=>{
        it('returns true when user has active session', async ()=>{
            mockSupabase.auth.getSession.mockResolvedValue({
                data: {
                    session: {
                        user: {
                            id: 'user-123'
                        },
                        access_token: 'token-123'
                    }
                },
                error: null
            });
            const result = await (0, _auth.isUserLoggedIn)();
            expect(result).toBe(true);
            expect(mockSupabase.auth.getSession).toHaveBeenCalledTimes(1);
        });
        it('returns false when user has no session', async ()=>{
            mockSupabase.auth.getSession.mockResolvedValue({
                data: {
                    session: null
                },
                error: null
            });
            const result = await (0, _auth.isUserLoggedIn)();
            expect(result).toBe(false);
            expect(mockSupabase.auth.getSession).toHaveBeenCalledTimes(1);
        });
        it('returns false when session is undefined', async ()=>{
            mockSupabase.auth.getSession.mockResolvedValue({
                data: {
                    session: undefined
                },
                error: null
            });
            const result = await (0, _auth.isUserLoggedIn)();
            expect(result).toBe(false);
        });
        it('handles auth errors gracefully', async ()=>{
            mockSupabase.auth.getSession.mockResolvedValue({
                data: {
                    session: null
                },
                error: {
                    message: 'Auth error'
                }
            });
            const result = await (0, _auth.isUserLoggedIn)();
            expect(result).toBe(false);
        });
    });
    describe('getUserProfile', ()=>{
        const mockFrom = jest.fn();
        const mockSelect = jest.fn();
        const mockEq = jest.fn();
        const mockSingle = jest.fn();
        beforeEach(()=>{
            mockSupabase.from.mockReturnValue({
                select: mockSelect
            });
            mockSelect.mockReturnValue({
                eq: mockEq
            });
            mockEq.mockReturnValue({
                single: mockSingle
            });
        });
        it('returns user profile data successfully', async ()=>{
            const mockProfile = {
                id: 'user-123',
                email: 'test@example.com',
                name: 'Test User'
            };
            mockSingle.mockResolvedValue({
                data: mockProfile,
                error: null
            });
            const result = await (0, _auth.getUserProfile)('user-123');
            expect(result).toEqual(mockProfile);
            expect(mockSupabase.from).toHaveBeenCalledWith('user_profiles');
            expect(mockSelect).toHaveBeenCalledWith('*');
            expect(mockEq).toHaveBeenCalledWith('id', 'user-123');
            expect(mockSingle).toHaveBeenCalledTimes(1);
        });
        it('throws error when profile not found', async ()=>{
            const mockError = {
                message: 'Profile not found'
            };
            mockSingle.mockResolvedValue({
                data: null,
                error: mockError
            });
            await expect((0, _auth.getUserProfile)('nonexistent-user')).rejects.toEqual(mockError);
        });
        it('throws error when database query fails', async ()=>{
            const mockError = {
                message: 'Database connection failed'
            };
            mockSingle.mockResolvedValue({
                data: null,
                error: mockError
            });
            await expect((0, _auth.getUserProfile)('user-123')).rejects.toEqual(mockError);
        });
    });
    describe('getStorageUrl', ()=>{
        const mockStorageFrom = jest.fn();
        const mockGetPublicUrl = jest.fn();
        beforeEach(()=>{
            mockSupabase.storage.from.mockReturnValue({
                getPublicUrl: mockGetPublicUrl
            });
        });
        it('returns public URL for storage file', ()=>{
            const mockUrl = 'https://storage.example.com/bucket/path/file.jpg';
            mockGetPublicUrl.mockReturnValue({
                data: {
                    publicUrl: mockUrl
                }
            });
            const result = (0, _auth.getStorageUrl)('avatars', 'user/profile.jpg');
            expect(result).toBe(mockUrl);
            expect(mockSupabase.storage.from).toHaveBeenCalledWith('avatars');
            expect(mockGetPublicUrl).toHaveBeenCalledWith('user/profile.jpg');
        });
        it('handles different bucket and path combinations', ()=>{
            const mockUrl = 'https://storage.example.com/images/banner.png';
            mockGetPublicUrl.mockReturnValue({
                data: {
                    publicUrl: mockUrl
                }
            });
            const result = (0, _auth.getStorageUrl)('images', 'banners/banner.png');
            expect(result).toBe(mockUrl);
            expect(mockSupabase.storage.from).toHaveBeenCalledWith('images');
            expect(mockGetPublicUrl).toHaveBeenCalledWith('banners/banner.png');
        });
    });
    describe('getCdnUrl', ()=>{
        it('returns CDN URL with path', ()=>{
            const result = (0, _auth.getCdnUrl)('/images/logo.png');
            expect(result).toBe('https://cdn.example.com/images/logo.png');
        });
        it('handles path without leading slash', ()=>{
            const result = (0, _auth.getCdnUrl)('images/logo.png');
            expect(result).toBe('https://cdn.example.comimages/logo.png');
        });
        it('handles empty path', ()=>{
            const result = (0, _auth.getCdnUrl)('');
            expect(result).toBe('https://cdn.example.com');
        });
        it('handles undefined CDN URL environment variable', ()=>{
            delete process.env.NEXT_PUBLIC_CDN_URL;
            const result = (0, _auth.getCdnUrl)('/images/logo.png');
            expect(result).toBe('undefined/images/logo.png');
        });
    });
    describe('uploadFile', ()=>{
        const mockStorageFrom = jest.fn();
        const mockUpload = jest.fn();
        beforeEach(()=>{
            mockSupabase.storage.from.mockReturnValue({
                upload: mockUpload
            });
        });
        it('uploads file successfully', async ()=>{
            const mockFile = new File([
                'test content'
            ], 'test.txt', {
                type: 'text/plain'
            });
            const mockUploadData = {
                path: 'uploads/test.txt',
                id: 'file-123',
                fullPath: 'bucket/uploads/test.txt'
            };
            mockUpload.mockResolvedValue({
                data: mockUploadData,
                error: null
            });
            const result = await (0, _auth.uploadFile)('uploads', 'test.txt', mockFile);
            expect(result).toEqual(mockUploadData);
            expect(mockSupabase.storage.from).toHaveBeenCalledWith('uploads');
            expect(mockUpload).toHaveBeenCalledWith('test.txt', mockFile);
        });
        it('throws error when upload fails', async ()=>{
            const mockFile = new File([
                'test content'
            ], 'test.txt', {
                type: 'text/plain'
            });
            const mockError = {
                message: 'Upload failed'
            };
            mockUpload.mockResolvedValue({
                data: null,
                error: mockError
            });
            await expect((0, _auth.uploadFile)('uploads', 'test.txt', mockFile)).rejects.toEqual(mockError);
        });
        it('handles different file types', async ()=>{
            const mockImageFile = new File([
                'image data'
            ], 'image.jpg', {
                type: 'image/jpeg'
            });
            const mockUploadData = {
                path: 'images/image.jpg',
                id: 'image-123'
            };
            mockUpload.mockResolvedValue({
                data: mockUploadData,
                error: null
            });
            const result = await (0, _auth.uploadFile)('images', 'profile/image.jpg', mockImageFile);
            expect(result).toEqual(mockUploadData);
            expect(mockSupabase.storage.from).toHaveBeenCalledWith('images');
            expect(mockUpload).toHaveBeenCalledWith('profile/image.jpg', mockImageFile);
        });
        it('handles storage quota exceeded error', async ()=>{
            const mockFile = new File([
                'large content'
            ], 'large.txt', {
                type: 'text/plain'
            });
            const mockError = {
                message: 'Storage quota exceeded'
            };
            mockUpload.mockResolvedValue({
                data: null,
                error: mockError
            });
            await expect((0, _auth.uploadFile)('uploads', 'large.txt', mockFile)).rejects.toEqual(mockError);
        });
    });
    describe('supabase export', ()=>{
        it('exports supabase client', ()=>{
            expect(_auth.supabase).toBeDefined();
            expect(_auth.supabase.auth).toBeDefined();
            expect(_auth.supabase.from).toBeDefined();
            expect(_auth.supabase.storage).toBeDefined();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,