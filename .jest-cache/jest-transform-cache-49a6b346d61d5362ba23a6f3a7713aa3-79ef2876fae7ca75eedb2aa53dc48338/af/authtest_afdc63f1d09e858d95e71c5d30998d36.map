{"version":3,"sources":["/Users/charlie.hyun/Repositories/picnic-web/__tests__/utils/api/auth.test.ts"],"sourcesContent":["/**\n * Auth API 유틸리티 테스트\n */\n\nimport { \n  isUserLoggedIn, \n  getUserProfile, \n  getStorageUrl, \n  getCdnUrl, \n  uploadFile,\n  supabase,\n  handlePendingAuth\n} from '../../../utils/api/auth';\n\n// 세션 모킹\nconst mockSession = {\n  user: {\n    id: 'test-user-id',\n    email: 'test@example.com',\n    app_metadata: {},\n    user_metadata: {},\n    aud: 'authenticated',\n    created_at: '2023-01-01T00:00:00.000Z',\n  },\n  access_token: 'mock-access-token',\n  token_type: 'bearer',\n  expires_in: 3600,\n  refresh_token: 'mock-refresh-token',\n};\n\njest.mock('../../../lib/supabase/client', () => ({\n  createBrowserSupabaseClient: jest.fn(() => ({\n    auth: {\n      getSession: jest.fn(),\n      onAuthStateChange: jest.fn(() => ({\n        data: { subscription: { unsubscribe: jest.fn() } }\n      })),\n    },\n  })),\n}));\n\nconst mockSupabase = supabase as jest.Mocked<typeof supabase>;\n\ndescribe('Auth API Utils', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // console.error 모킹\n    jest.spyOn(console, 'error').mockImplementation(() => {});\n    // 환경 변수 설정\n    process.env.NEXT_PUBLIC_CDN_URL = 'https://cdn.example.com';\n  });\n\n  afterEach(() => {\n    jest.restoreAllMocks();\n  });\n\n  describe('isUserLoggedIn', () => {\n    it('returns true when user has active session', async () => {\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: {\n          session: {\n            user: { id: 'user-123' },\n            access_token: 'token-123',\n          },\n        },\n        error: null,\n      } as any);\n\n      const result = await isUserLoggedIn();\n      expect(result).toBe(true);\n      expect(mockSupabase.auth.getSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('returns false when user has no session', async () => {\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: null,\n      } as any);\n\n      const result = await isUserLoggedIn();\n      expect(result).toBe(false);\n      expect(mockSupabase.auth.getSession).toHaveBeenCalledTimes(1);\n    });\n\n    it('returns false when session is undefined', async () => {\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: undefined },\n        error: null,\n      } as any);\n\n      const result = await isUserLoggedIn();\n      expect(result).toBe(false);\n    });\n\n    it('handles auth errors gracefully', async () => {\n      mockSupabase.auth.getSession.mockResolvedValue({\n        data: { session: null },\n        error: { message: 'Auth error' },\n      } as any);\n\n      const result = await isUserLoggedIn();\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getUserProfile', () => {\n    const mockFrom = jest.fn();\n    const mockSelect = jest.fn();\n    const mockEq = jest.fn();\n    const mockSingle = jest.fn();\n\n    beforeEach(() => {\n      mockSupabase.from.mockReturnValue({\n        select: mockSelect,\n      } as any);\n      mockSelect.mockReturnValue({\n        eq: mockEq,\n      } as any);\n      mockEq.mockReturnValue({\n        single: mockSingle,\n      } as any);\n    });\n\n    it('returns user profile data successfully', async () => {\n      const mockProfile = {\n        id: 'user-123',\n        email: 'test@example.com',\n        name: 'Test User',\n      };\n\n      mockSingle.mockResolvedValue({\n        data: mockProfile,\n        error: null,\n      });\n\n      const result = await getUserProfile('user-123');\n      \n      expect(result).toEqual(mockProfile);\n      expect(mockSupabase.from).toHaveBeenCalledWith('user_profiles');\n      expect(mockSelect).toHaveBeenCalledWith('*');\n      expect(mockEq).toHaveBeenCalledWith('id', 'user-123');\n      expect(mockSingle).toHaveBeenCalledTimes(1);\n    });\n\n    it('throws error when profile not found', async () => {\n      const mockError = { message: 'Profile not found' };\n      mockSingle.mockResolvedValue({\n        data: null,\n        error: mockError,\n      });\n\n      await expect(getUserProfile('nonexistent-user')).rejects.toEqual(mockError);\n    });\n\n    it('throws error when database query fails', async () => {\n      const mockError = { message: 'Database connection failed' };\n      mockSingle.mockResolvedValue({\n        data: null,\n        error: mockError,\n      });\n\n      await expect(getUserProfile('user-123')).rejects.toEqual(mockError);\n    });\n  });\n\n  describe('getStorageUrl', () => {\n    const mockStorageFrom = jest.fn();\n    const mockGetPublicUrl = jest.fn();\n\n    beforeEach(() => {\n      mockSupabase.storage.from.mockReturnValue({\n        getPublicUrl: mockGetPublicUrl,\n      } as any);\n    });\n\n    it('returns public URL for storage file', () => {\n      const mockUrl = 'https://storage.example.com/bucket/path/file.jpg';\n      mockGetPublicUrl.mockReturnValue({\n        data: { publicUrl: mockUrl },\n      });\n\n      const result = getStorageUrl('avatars', 'user/profile.jpg');\n      \n      expect(result).toBe(mockUrl);\n      expect(mockSupabase.storage.from).toHaveBeenCalledWith('avatars');\n      expect(mockGetPublicUrl).toHaveBeenCalledWith('user/profile.jpg');\n    });\n\n    it('handles different bucket and path combinations', () => {\n      const mockUrl = 'https://storage.example.com/images/banner.png';\n      mockGetPublicUrl.mockReturnValue({\n        data: { publicUrl: mockUrl },\n      });\n\n      const result = getStorageUrl('images', 'banners/banner.png');\n      \n      expect(result).toBe(mockUrl);\n      expect(mockSupabase.storage.from).toHaveBeenCalledWith('images');\n      expect(mockGetPublicUrl).toHaveBeenCalledWith('banners/banner.png');\n    });\n  });\n\n  describe('getCdnUrl', () => {\n    it('returns CDN URL with path', () => {\n      const result = getCdnUrl('/images/logo.png');\n      expect(result).toBe('https://cdn.example.com/images/logo.png');\n    });\n\n    it('handles path without leading slash', () => {\n      const result = getCdnUrl('images/logo.png');\n      expect(result).toBe('https://cdn.example.comimages/logo.png');\n    });\n\n    it('handles empty path', () => {\n      const result = getCdnUrl('');\n      expect(result).toBe('https://cdn.example.com');\n    });\n\n    it('handles undefined CDN URL environment variable', () => {\n      delete process.env.NEXT_PUBLIC_CDN_URL;\n      const result = getCdnUrl('/images/logo.png');\n      expect(result).toBe('undefined/images/logo.png');\n    });\n  });\n\n  describe('uploadFile', () => {\n    const mockStorageFrom = jest.fn();\n    const mockUpload = jest.fn();\n\n    beforeEach(() => {\n      mockSupabase.storage.from.mockReturnValue({\n        upload: mockUpload,\n      } as any);\n    });\n\n    it('uploads file successfully', async () => {\n      const mockFile = new File(['test content'], 'test.txt', { type: 'text/plain' });\n      const mockUploadData = {\n        path: 'uploads/test.txt',\n        id: 'file-123',\n        fullPath: 'bucket/uploads/test.txt',\n      };\n\n      mockUpload.mockResolvedValue({\n        data: mockUploadData,\n        error: null,\n      });\n\n      const result = await uploadFile('uploads', 'test.txt', mockFile);\n      \n      expect(result).toEqual(mockUploadData);\n      expect(mockSupabase.storage.from).toHaveBeenCalledWith('uploads');\n      expect(mockUpload).toHaveBeenCalledWith('test.txt', mockFile);\n    });\n\n    it('throws error when upload fails', async () => {\n      const mockFile = new File(['test content'], 'test.txt', { type: 'text/plain' });\n      const mockError = { message: 'Upload failed' };\n\n      mockUpload.mockResolvedValue({\n        data: null,\n        error: mockError,\n      });\n\n      await expect(uploadFile('uploads', 'test.txt', mockFile)).rejects.toEqual(mockError);\n    });\n\n    it('handles different file types', async () => {\n      const mockImageFile = new File(['image data'], 'image.jpg', { type: 'image/jpeg' });\n      const mockUploadData = {\n        path: 'images/image.jpg',\n        id: 'image-123',\n      };\n\n      mockUpload.mockResolvedValue({\n        data: mockUploadData,\n        error: null,\n      });\n\n      const result = await uploadFile('images', 'profile/image.jpg', mockImageFile);\n      \n      expect(result).toEqual(mockUploadData);\n      expect(mockSupabase.storage.from).toHaveBeenCalledWith('images');\n      expect(mockUpload).toHaveBeenCalledWith('profile/image.jpg', mockImageFile);\n    });\n\n    it('handles storage quota exceeded error', async () => {\n      const mockFile = new File(['large content'], 'large.txt', { type: 'text/plain' });\n      const mockError = { message: 'Storage quota exceeded' };\n\n      mockUpload.mockResolvedValue({\n        data: null,\n        error: mockError,\n      });\n\n      await expect(uploadFile('uploads', 'large.txt', mockFile)).rejects.toEqual(mockError);\n    });\n  });\n\n  describe('supabase export', () => {\n    it('exports supabase client', () => {\n      expect(supabase).toBeDefined();\n      expect(supabase.auth).toBeDefined();\n      expect(supabase.from).toBeDefined();\n      expect(supabase.storage).toBeDefined();\n    });\n  });\n});\n"],"names":["jest","mock","createBrowserSupabaseClient","fn","auth","getSession","onAuthStateChange","data","subscription","unsubscribe","mockSession","user","id","email","app_metadata","user_metadata","aud","created_at","access_token","token_type","expires_in","refresh_token","mockSupabase","supabase","describe","beforeEach","clearAllMocks","spyOn","console","mockImplementation","process","env","NEXT_PUBLIC_CDN_URL","afterEach","restoreAllMocks","it","mockResolvedValue","session","error","result","isUserLoggedIn","expect","toBe","toHaveBeenCalledTimes","undefined","message","mockFrom","mockSelect","mockEq","mockSingle","from","mockReturnValue","select","eq","single","mockProfile","name","getUserProfile","toEqual","toHaveBeenCalledWith","mockError","rejects","mockStorageFrom","mockGetPublicUrl","storage","getPublicUrl","mockUrl","publicUrl","getStorageUrl","getCdnUrl","mockUpload","upload","mockFile","File","type","mockUploadData","path","fullPath","uploadFile","mockImageFile","toBeDefined"],"mappings":"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"}