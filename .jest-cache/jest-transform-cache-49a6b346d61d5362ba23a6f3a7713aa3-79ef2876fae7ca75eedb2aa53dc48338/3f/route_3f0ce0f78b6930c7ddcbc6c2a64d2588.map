{"version":3,"names":["cov_huv9fpdyr","actualCoverage","s","GET","request","f","console","log","user","_server1","getServerUser","b","_server","NextResponse","json","success","error","status","searchParams","URL","url","page","parseInt","get","limit","offset","userId","id","supabase","createServerSupabaseClient","data","allReceipts","allReceiptsError","from","select","eq","order","ascending","count","length","receipts","map","r","platform","created_at","totalUserReceipts","completedReceipts","appReceipts","in","receiptsError","result","range","totalCount","message","finalReceipts","finalCount","productIds","Array","Set","product_id","filter","Boolean","productsMap","Map","productsData","productsError","products","p","name","product_name","price","web_price_krw","web_price_usd","star_candy","star_candy_bonus","forEach","product","set","rechargeItems","receipt","receiptData","receipt_data","trimmedData","trim","startsWith","JSON","parse","warn","substring","e","Error","receiptDataKeys","Object","keys","receiptDataSample","amount","quantity","currency","payment_method","star_candy_amount","starCandy","bonus_amount","verificationData","verification_data","String","productInfo","isIOS","isAndroid","isWeb","baseStarCandy","Number","bonusStarCandy","bonusAmount","defaultStarCandy","actualAmount","priceAmountMicros","defaultAmounts","unitPrice","Math","round","productId","receiptDataAmount","verificationPrice","finalAmount","paymentMethod","paymentProvider","itemName","item_name","description","toString","receiptId","receipt_hash","receiptNumber","Date","getFullYear","slice","receiptUrl","receipt_url","undefined","starCandyAmount","storeProductId","store_product_id","transactionId","transaction_id","original_transaction_id","order_id","purchase_token","merchantTransactionId","merchant_transaction_id","exchangeRate","exchange_rate","originalAmount","original_amount","originalCurrency","original_currency","paymentDetails","cardLast4","card_last4","cardBrand","card_brand","bankName","bank_name","paypalEmail","paypal_email","taxAmount","tax_amount","discountAmount","discount_amount","metadata","ipAddress","ip_address","userAgent","user_agent","referrer","createdAt","toISOString","updatedAt","receiptGeneratedAt","receipt_generated_at","appStoreData","originalTransactionId","bundleId","bundle_id","purchaseToken","orderId","packageName","package_name","statistics","totalPurchases","totalAmount","totalStarCandy","userEmail","email","timestamp","allUserData","allUserError","sampleData","statusBreakdown","reduce","acc","platforms","totalReceipts","hasReceipts","isArray","completedCount","processedCount","statsQuantity","itemAmount","isNaN","defaultUsed","productStarCandy","receiptStarCandy","total","processedReceipts","allReceiptsLength","allReceiptsType","stack","fallbackTotalAmount","sum","item","fallbackTotalStarCandy","bonus","totalPages","ceil","pagination","hasNext","hasPrevious","safeStatistics","itemsCount","originalStatistics","response"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/app/api/user/recharge-history/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerUser, createServerSupabaseClient } from '@/lib/supabase/server';\n\ninterface AppPurchaseItem {\n  id: string;\n  receiptId: string;\n  receiptNumber: string;\n  receiptUrl?: string;\n  amount: number;\n  starCandyAmount: number;\n  bonusAmount: number;\n  paymentMethod: string; // 추가\n  paymentProvider: string; // 추가\n  platform: string; // 'ios' or 'android'\n  storeProductId: string;\n  transactionId: string;\n  merchantTransactionId?: string; // 추가\n  status: string;\n  currency: string;\n  exchangeRate?: number; // 추가\n  originalAmount?: number; // 추가\n  originalCurrency?: string; // 추가\n  paymentDetails: { // 추가\n    cardLast4?: string;\n    cardBrand?: string;\n    bankName?: string;\n    paypalEmail?: string;\n  };\n  receiptData: { // 추가\n    itemName: string;\n    description: string;\n    quantity: number;\n    unitPrice: number;\n    taxAmount?: number;\n    discountAmount?: number;\n  };\n  metadata?: { // 추가\n    ipAddress?: string;\n    userAgent?: string;\n    referrer?: string;\n  };\n  createdAt: string;\n  updatedAt: string; // 추가\n  receiptGeneratedAt?: string; // 추가\n  appStoreData: {\n    originalTransactionId?: string; // Apple\n    purchaseToken?: string; // Google Play\n    orderId?: string; // Google Play\n    bundleId?: string; // Apple\n    packageName?: string; // Google Play\n  };\n}\n\ninterface RechargeResponse {\n  success: boolean;\n  data: AppPurchaseItem[];\n  pagination: {\n    page: number;\n    limit: number;\n    totalCount: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrevious: boolean;\n  };\n  statistics: {\n    totalPurchases: number;\n    totalAmount: number;\n    totalStarCandy: number;\n  };\n  error?: string;\n  message?: string;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('📱 [Recharge History API] 앱구매 영수증 조회 시작');\n\n    // 1. 사용자 인증 확인\n    const user = await getServerUser();\n    if (!user) {\n      return NextResponse.json(\n        { success: false, error: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    // 2. 쿼리 파라미터 파싱\n    const { searchParams } = new URL(request.url);\n    const page = parseInt(searchParams.get('page') || '1', 10);\n    const limit = parseInt(searchParams.get('limit') || '10', 10);\n    const offset = (page - 1) * limit;\n\n    console.log('📱 [Recharge History API] 파라미터:', { \n      userId: user.id, \n      page, \n      limit, \n      offset \n    });\n\n    // 3. Supabase 클라이언트 생성\n    const supabase = await createServerSupabaseClient();\n\n    // 디버깅: 사용자의 모든 영수증 데이터 확인\n    console.log('🔍 [DEBUG] 사용자의 모든 영수증 데이터 확인 시작');\n    \n    const { data: allReceipts, error: allReceiptsError } = await supabase\n      .from('receipts')\n      .select('id, user_id, status, platform, created_at')\n      .eq('user_id', user.id)\n      .order('created_at', { ascending: false })\n      .limit(20);\n    \n    console.log('🔍 [DEBUG] 사용자의 모든 영수증:', {\n      count: allReceipts?.length || 0,\n      receipts: allReceipts?.map(r => ({\n        id: r.id,\n        status: r.status,\n        platform: r.platform,\n        created_at: r.created_at\n      })) || []\n    });\n\n    // 디버깅: 각 조건별 데이터 수량 확인\n    const { count: totalUserReceipts } = await supabase\n      .from('receipts')\n      .select('*', { count: 'exact' })\n      .eq('user_id', user.id);\n    \n    const { count: completedReceipts } = await supabase\n      .from('receipts')\n      .select('*', { count: 'exact' })\n      .eq('user_id', user.id)\n      .eq('status', 'completed');\n      \n    const { count: appReceipts } = await supabase\n      .from('receipts')\n      .select('*', { count: 'exact' })\n      .eq('user_id', user.id)\n      .in('platform', ['ios', 'android']);\n\n    console.log('🔍 [DEBUG] 조건별 데이터 수량:', {\n      totalUserReceipts,\n      completedReceipts,\n      appReceipts\n    });\n\n    // 4. 앱구매 영수증 조회 - 스마트한 조건 선택\n    let receipts: any[] | null = null;\n    let receiptsError: any = null;\n    let count: number | null = null;\n    \n    console.log('🔍 [DEBUG] 사용자 영수증 조회 시작:', {\n      userId: user.id,\n      offset,\n      limit,\n      completedReceipts,\n      totalUserReceipts\n    });\n    \n    // 먼저 completed 상태가 충분한지 확인\n    if (completedReceipts && completedReceipts >= offset + 1) {\n      // completed 상태로 충분한 데이터가 있는 경우에만 completed 조건 사용\n      const result = await supabase\n        .from('receipts')\n        .select('*', { count: 'exact' })\n        .eq('user_id', user.id)\n        .eq('status', 'completed')\n        .in('platform', ['ios', 'android', 'web'])\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      \n      receipts = result.data;\n      receiptsError = result.error;\n      count = result.count;\n      \n      console.log('✅ [DEBUG] completed 상태 조건으로 조회:', {\n        count: receipts?.length || 0,\n        totalCount: count\n      });\n    } else {\n      // completed 데이터가 부족하면 처음부터 조건 완화\n      console.log('⚠️ [DEBUG] completed 데이터 부족, 조건 완화하여 조회');\n      \n      const result = await supabase\n        .from('receipts')\n        .select('*', { count: 'exact' })\n        .eq('user_id', user.id)\n        .in('platform', ['ios', 'android', 'web'])\n        .order('created_at', { ascending: false })\n        .range(offset, offset + limit - 1);\n      \n      receipts = result.data;\n      receiptsError = result.error;\n      count = result.count;\n      \n      console.log('✅ [DEBUG] 상태 조건 완화하여 조회:', {\n        count: receipts?.length || 0,\n        totalCount: count\n      });\n    }\n\n    if (receiptsError) {\n      console.error('❌ [Recharge History API] 영수증 조회 실패:', receiptsError);\n      return NextResponse.json(\n        { \n          success: false, \n          error: 'Failed to fetch recharge history',\n          message: receiptsError.message \n        },\n        { status: 500 }\n      );\n    }\n\n    console.log('✅ [Recharge History API] 쿼리 결과:', {\n      count: receipts?.length || 0,\n      totalCount: count\n    });\n\n    // 5. 최종 결과 설정\n    let finalReceipts = receipts;\n    let finalCount = count;\n\n    // 5.5. Products 정보 가져오기 (별도 쿼리)\n    const productIds = Array.from(new Set((finalReceipts || []).map(r => r.product_id).filter((id): id is string => Boolean(id))));\n    let productsMap = new Map();\n    \n    console.log('🏷️ [DEBUG] Product IDs found in receipts:', productIds);\n    \n    if (productIds.length > 0) {\n      const { data: productsData, error: productsError } = await supabase\n        .from('products')\n        .select('id, product_name, star_candy, star_candy_bonus, web_price_krw, web_price_usd, price')\n        .in('id', productIds);\n      \n      console.log('🏷️ [DEBUG] Products query result:', {\n        error: productsError,\n        count: productsData?.length || 0,\n        products: productsData?.map(p => ({\n          id: p.id,\n          name: p.product_name,\n          price: p.price,\n          web_price_krw: p.web_price_krw,\n          web_price_usd: p.web_price_usd,\n          star_candy: p.star_candy,\n          star_candy_bonus: p.star_candy_bonus\n        })) || []\n      });\n      \n      if (productsData) {\n        productsData.forEach(product => {\n          productsMap.set(product.id, product);\n        });\n      }\n    }\n\n    // 6. 데이터 변환 (앱구매 형태로)\n    const rechargeItems: AppPurchaseItem[] = (finalReceipts || []).map((receipt) => {\n      // 영수증 데이터 파싱 (개선된 안전성)\n      let receiptData: any = {};\n      try {\n        if (typeof receipt.receipt_data === 'string') {\n          // 문자열이 비어있거나 유효하지 않은 JSON인지 확인\n          const trimmedData = receipt.receipt_data.trim();\n          if (trimmedData === '' || trimmedData === 'null' || trimmedData === 'undefined') {\n            receiptData = {};\n          } else {\n            // JSON 문자열인지 확인 (첫 문자가 { 또는 [로 시작하는지)\n            if (trimmedData.startsWith('{') || trimmedData.startsWith('[')) {\n              receiptData = JSON.parse(trimmedData);\n            } else {\n              console.warn('유효하지 않은 JSON 형태:', trimmedData.substring(0, 50));\n              receiptData = {};\n            }\n          }\n        } else if (receipt.receipt_data && typeof receipt.receipt_data === 'object') {\n          receiptData = receipt.receipt_data;\n        } else {\n          receiptData = {};\n        }\n      } catch (e) {\n        console.warn('영수증 데이터 파싱 실패:', {\n          error: e instanceof Error ? e.message : 'Unknown error',\n          data: typeof receipt.receipt_data === 'string' \n            ? receipt.receipt_data.substring(0, 100) \n            : typeof receipt.receipt_data\n        });\n        receiptData = {};\n      }\n      \n      // 파싱된 receiptData 구조 로그 (처음 5개만)\n      if (receipt.id <= (finalReceipts?.[4]?.id || 5)) {\n        console.log(`💳 [DEBUG] Receipt ${receipt.id} parsed data:`, {\n          platform: receipt.platform,\n          product_id: receipt.product_id,\n          receiptDataKeys: Object.keys(receiptData),\n          receiptDataSample: {\n            amount: receiptData.amount,\n            quantity: receiptData.quantity,\n            currency: receiptData.currency,\n            payment_method: receiptData.payment_method,\n            star_candy_amount: receiptData.star_candy_amount,\n            starCandy: receiptData.starCandy,\n            bonus_amount: receiptData.bonus_amount\n          }\n        });\n      }\n\n      // 검증 데이터 파싱\n      let verificationData: any = {};\n      try {\n        verificationData = typeof receipt.verification_data === 'object'\n          ? receipt.verification_data\n          : JSON.parse(String(receipt.verification_data || '{}'));\n      } catch (e) {\n        console.warn('검증 데이터 파싱 실패:', e);\n      }\n\n      // Products 테이블 정보 \n      const productInfo = productsMap.get(receipt.product_id) || {};\n      \n      // 플랫폼별 데이터 처리\n      const isIOS = receipt.platform === 'ios';\n      const isAndroid = receipt.platform === 'android';\n      const isWeb = receipt.platform === 'web';\n      \n      // 별사탕 수량 계산 (Products 테이블 우선, 기본값 설정)\n      let baseStarCandy = Number(productInfo.star_candy || receiptData.star_candy_amount || receiptData.starCandy || 0);\n      let bonusStarCandy = Number(productInfo.star_candy_bonus || receiptData.bonus_amount || receiptData.bonusAmount || 0);\n      \n      // 별사탕이 0이면 상품 ID에 따른 기본값 설정\n      if (baseStarCandy === 0) {\n        const defaultStarCandy: { [key: string]: number } = {\n          'STAR100': 100,\n          'STAR300': 300,\n          'STAR500': 500,\n          'STAR1000': 1000,\n          'STAR3000': 3000,\n          'STAR5000': 5000\n        };\n        baseStarCandy = defaultStarCandy[receipt.product_id || ''] || 100;\n      }\n      \n      // 결제 금액 계산 - receiptData 기반\n      const quantity = Number(receiptData.quantity || 1);\n      \n      // 1순위: receiptData.amount 사용\n      let actualAmount = Number(receiptData.amount || 0);\n      \n      // 2순위: verification_data에서 확인 (iOS/Android)\n      if (actualAmount === 0 && verificationData && (isIOS || isAndroid)) {\n        if (isIOS && verificationData.price) {\n          actualAmount = Number(verificationData.price) / 1000000; // 마이크로 단위 변환\n        } else if (isAndroid && verificationData.priceAmountMicros) {\n          actualAmount = Number(verificationData.priceAmountMicros) / 1000000;\n        }\n              }\n      \n      // 3순위: Products 테이블에서 확인 (웹 결제용)\n      if (actualAmount === 0 && isWeb) {\n        const currency = receiptData.currency || 'KRW';\n        if (currency === 'USD') {\n          actualAmount = Number(productInfo.web_price_usd || 0) * quantity;\n        } else {\n          actualAmount = Number(productInfo.web_price_krw || 0) * quantity;\n        }\n      }\n      \n      // 4순위: 기본값 설정\n      if (actualAmount === 0) {\n        const defaultAmounts: { [key: string]: number } = {\n          'STAR100': 1100,\n          'STAR300': 3300, \n          'STAR500': 5500,\n          'STAR1000': 11000,\n          'STAR3000': 33000,\n          'STAR5000': 55000\n        };\n        actualAmount = (defaultAmounts[receipt.product_id || ''] || 1000) * quantity;\n        console.log(`⚠️ [DEBUG] 기본값 사용: ${receipt.product_id} -> ${actualAmount}원`);\n      }\n      \n      // 단가 계산 (결제 금액 ÷ 수량)\n      const unitPrice = Math.round(actualAmount / quantity);\n      \n      // 처음 3개 영수증에 대해 상세 로그\n      if (receipt.id <= 3) {\n        console.log(`💰 [DEBUG] Receipt ${receipt.id} 금액 계산:`, {\n          productId: receipt.product_id,\n          platform: receipt.platform,\n          receiptDataAmount: receiptData.amount,\n          verificationPrice: verificationData?.price || verificationData?.priceAmountMicros,\n          quantity: quantity,\n          finalAmount: actualAmount,\n          unitPrice: unitPrice\n        });\n      }\n      \n      // 결제 방법 결정\n      const paymentMethod = isIOS ? 'apple_store' : isAndroid ? 'google_play' : isWeb ? 'web_payment' : 'app_store';\n      const paymentProvider = isIOS ? 'Apple App Store' : isAndroid ? 'Google Play Store' : isWeb ? (receiptData.payment_method === 'port_one' ? 'Port One' : 'PayPal') : 'App Store';\n      \n      // 상품 정보 (Products 테이블 우선)\n      const itemName = productInfo.product_name || receiptData.product_name || receiptData.item_name || '별사탕 구매';\n      const description = receiptData.description || '별사탕 구매';\n      \n      return {\n        id: receipt.id.toString(),\n        receiptId: receipt.receipt_hash || `APP_${receipt.id}`,\n        receiptNumber: `A${new Date(receipt.created_at || new Date()).getFullYear()}${('000000' + receipt.id.toString()).slice(-6)}`,\n        receiptUrl: receiptData.receipt_url || undefined,\n        amount: actualAmount,\n        starCandyAmount: Number(baseStarCandy),\n        bonusAmount: Number(bonusStarCandy),\n        paymentMethod,\n        paymentProvider,\n        platform: receipt.platform,\n        storeProductId: String(receipt.product_id || productInfo.id || receiptData.product_id || receiptData.store_product_id || 'unknown'),\n        transactionId: isIOS \n          ? (verificationData.transaction_id || receiptData.original_transaction_id || receipt.receipt_hash)\n          : (receiptData.order_id || receiptData.purchase_token || receipt.receipt_hash),\n        merchantTransactionId: receiptData.merchant_transaction_id || undefined,\n        status: receipt.status,\n        currency: receiptData.currency || 'KRW',\n        exchangeRate: receiptData.exchange_rate ? Number(receiptData.exchange_rate) : undefined,\n        originalAmount: receiptData.original_amount ? Number(receiptData.original_amount) : undefined,\n        originalCurrency: receiptData.original_currency || undefined,\n        paymentDetails: {\n          cardLast4: receiptData.card_last4 || undefined,\n          cardBrand: receiptData.card_brand || undefined,\n          bankName: receiptData.bank_name || undefined,\n          paypalEmail: receiptData.paypal_email || undefined,\n        },\n        receiptData: {\n          itemName,\n          description,\n          quantity: quantity,\n          unitPrice: unitPrice,\n          taxAmount: receiptData.tax_amount ? Number(receiptData.tax_amount) : undefined,\n          discountAmount: receiptData.discount_amount ? Number(receiptData.discount_amount) : undefined,\n        },\n        metadata: {\n          ipAddress: receiptData.ip_address || undefined,\n          userAgent: receiptData.user_agent || undefined,\n          referrer: receiptData.referrer || undefined,\n        },\n        createdAt: receipt.created_at || new Date().toISOString(),\n        updatedAt: receipt.created_at || new Date().toISOString(), // updated_at 필드가 없으므로 created_at 사용\n        receiptGeneratedAt: receiptData.receipt_generated_at || receipt.created_at || undefined,\n        appStoreData: {\n          // Apple App Store 데이터\n          ...(isIOS && {\n            originalTransactionId: verificationData.original_transaction_id || receiptData.original_transaction_id,\n            bundleId: receiptData.bundle_id || verificationData.bundle_id,\n          }),\n          // Google Play Store 데이터\n          ...(isAndroid && {\n            purchaseToken: receiptData.purchase_token || verificationData.purchase_token,\n            orderId: receiptData.order_id || verificationData.order_id,\n            packageName: receiptData.package_name || verificationData.package_name,\n          }),\n        },\n      };\n    });\n\n    // 7. 전체 통계 계산 (별도 쿼리)\n    let statistics = {\n      totalPurchases: finalCount || 0,\n      totalAmount: 0,\n      totalStarCandy: 0,\n    };\n\n    console.log('🎯 [STATS] 통계 계산 시작 - 진입점 확인:', {\n      userId: user.id,\n      userEmail: user.email,\n      timestamp: new Date().toISOString()\n    });\n\n    try {\n      console.log('🔄 [STATS] Step 1: 사용자 전체 데이터 조회 시작');\n      \n      // 먼저 이 사용자의 모든 데이터가 있는지 확인\n      const { data: allUserData, error: allUserError } = await supabase\n        .from('receipts')\n        .select('id, product_id, platform, status, created_at')\n        .eq('user_id', user.id);\n        \n      if (allUserError) {\n        console.error('❌ [STATS] Step 1 실패:', allUserError);\n        throw allUserError;\n      }\n      \n      console.log('✅ [STATS] Step 1 완료:', { count: allUserData?.length || 0 });\n        \n      console.log('🔍 [TOTAL DEBUG] 사용자의 전체 영수증 데이터:', {\n        userId: user.id,\n        totalCount: allUserData?.length || 0,\n        error: allUserError,\n        sampleData: allUserData?.slice(0, 3).map(r => ({\n          id: r.id,\n          status: r.status,\n          platform: r.platform,\n          product_id: r.product_id,\n          created_at: r.created_at\n        })) || []\n      });\n      \n      console.log('🔄 [STATS] Step 2: 통계용 영수증 조회 시작');\n      \n      // 전체 영수증 조회 (통계용) - amount 컬럼명 제거하고 기본 컬럼들만 조회\n      const { data: allReceipts, error: receiptsError } = await supabase\n        .from('receipts')\n        .select('id, product_id, receipt_data, platform, status, created_at')\n        .eq('user_id', user.id);\n        // .in('platform', ['ios', 'android', 'web']); // 플랫폼 필터 제거\n        \n      if (receiptsError) {\n        console.error('❌ [STATS] Step 2 실패:', receiptsError);\n        throw receiptsError;\n      }\n      \n      console.log('✅ [STATS] Step 2 완료:', { count: allReceipts?.length || 0 });\n        \n      console.log('📊 [DEBUG] 통계용 플랫폼 필터링된 영수증 조회:', {\n        count: allReceipts?.length || 0,\n        statusBreakdown: allReceipts?.reduce((acc: any, r) => {\n          acc[r.status] = (acc[r.status] || 0) + 1;\n          return acc;\n        }, {}) || {},\n        platforms: allReceipts?.reduce((acc: any, r) => {\n          acc[r.platform] = (acc[r.platform] || 0) + 1;\n          return acc;\n        }, {}) || {}\n      });\n\n      console.log('📊 [STATS] 통계 계산 시작:', {\n        totalReceipts: allReceipts?.length || 0,\n        hasReceipts: !!allReceipts,\n        isArray: Array.isArray(allReceipts)\n      });\n\n      if (allReceipts && Array.isArray(allReceipts) && allReceipts.length > 0) {\n        // 전체 영수증에서 통계 계산\n        let totalAmount = 0;\n        let totalStarCandy = 0;\n        let completedCount = 0;\n        let processedCount = 0;\n\n        for (const receipt of allReceipts) {\n          processedCount++;\n          \n          console.log(`🔄 [STATS] 처리 중 ${processedCount}/${allReceipts.length}:`, {\n            receiptId: receipt.id,\n            status: receipt.status,\n            platform: receipt.platform,\n            productId: receipt.product_id\n          });\n          // 일단 모든 상태의 영수증을 포함해서 통계 계산해보기 (디버깅용)\n          // if (receipt.status !== 'completed') {\n          //   continue;\n          // }\n          \n          let receiptData: any = {};\n          try {\n            if (typeof receipt.receipt_data === 'string') {\n              const trimmedData = receipt.receipt_data.trim();\n              if (trimmedData === '' || trimmedData === 'null' || trimmedData === 'undefined') {\n                receiptData = {};\n              } else if (trimmedData.startsWith('{') || trimmedData.startsWith('[')) {\n                receiptData = JSON.parse(trimmedData);\n              } else {\n                receiptData = {};\n              }\n            } else if (receipt.receipt_data && typeof receipt.receipt_data === 'object') {\n              receiptData = receipt.receipt_data;\n            } else {\n              receiptData = {};\n            }\n          } catch (e) {\n            receiptData = {};\n            continue;\n          }\n\n          const productInfo = productsMap.get(receipt.product_id) || {};\n          const isWeb = receipt.platform === 'web';\n          const statsQuantity = Number(receiptData.quantity || 1);\n          \n          // 실제 결제 금액 계산 - receiptData와 기본값 기반\n          let itemAmount = 0;\n          \n          // 1순위: receiptData.amount 사용  \n          if (receiptData.amount && !isNaN(Number(receiptData.amount))) {\n            itemAmount = Number(receiptData.amount);\n          }\n          \n          // 2순위: 상품 ID에 따른 기본값 설정\n          if (itemAmount === 0 || isNaN(itemAmount)) {\n            const defaultAmounts: { [key: string]: number } = {\n              'STAR100': 1100,\n              'STAR300': 3300, \n              'STAR500': 5500,\n              'STAR1000': 11000,\n              'STAR3000': 33000,\n              'STAR5000': 55000\n            };\n            itemAmount = (defaultAmounts[receipt.product_id || ''] || 1100) * statsQuantity;\n          }\n          \n          console.log(`💰 [STATS DEBUG] Receipt ${receipt.id} 통계 금액:`, {\n            receiptDataAmount: receiptData.amount,\n            defaultUsed: !receiptData.amount,\n            finalAmount: itemAmount,\n            productId: receipt.product_id,\n            quantity: statsQuantity\n          });\n          \n          totalAmount += itemAmount;\n          completedCount++;\n\n          // 별사탕 수량 계산\n          let baseStarCandy = 0;\n          let bonusStarCandy = 0;\n          \n          // 1순위: Products 테이블에서\n          if (productInfo.star_candy) {\n            baseStarCandy = Number(productInfo.star_candy);\n          }\n          \n          // 2순위: receiptData에서\n          if (baseStarCandy === 0) {\n            if (receiptData.star_candy_amount) {\n              baseStarCandy = Number(receiptData.star_candy_amount);\n            } else if (receiptData.starCandy) {\n              baseStarCandy = Number(receiptData.starCandy);\n            }\n          }\n          \n          // 3순위: 상품 ID에 따른 기본값\n          if (baseStarCandy === 0 || isNaN(baseStarCandy)) {\n            const defaultStarCandy: { [key: string]: number } = {\n              'STAR100': 100,\n              'STAR300': 300,\n              'STAR500': 500,\n              'STAR1000': 1000,\n              'STAR3000': 3000,\n              'STAR5000': 5000\n            };\n            baseStarCandy = defaultStarCandy[receipt.product_id || ''] || 100;\n          }\n          \n          // 보너스 별사탕\n          if (productInfo.star_candy_bonus) {\n            bonusStarCandy = Number(productInfo.star_candy_bonus);\n          } else if (receiptData.bonus_amount) {\n            bonusStarCandy = Number(receiptData.bonus_amount);\n          } else if (receiptData.bonusAmount) {\n            bonusStarCandy = Number(receiptData.bonusAmount);\n          }\n          \n          // NaN 체크\n          if (isNaN(bonusStarCandy)) {\n            bonusStarCandy = 0;\n          }\n          \n          console.log(`⭐ [STATS DEBUG] Receipt ${receipt.id} 별사탕:`, {\n            productStarCandy: productInfo.star_candy,\n            receiptStarCandy: receiptData.star_candy_amount || receiptData.starCandy,\n            baseStarCandy,\n            bonusStarCandy,\n            total: baseStarCandy + bonusStarCandy\n          });\n          \n          totalStarCandy += baseStarCandy + bonusStarCandy;\n        }\n\n        statistics = {\n          totalPurchases: completedCount,\n          totalAmount,\n          totalStarCandy,\n        };\n        \n        console.log('📊 [DEBUG] 최종 통계 계산 완료:', {\n          totalReceipts: allReceipts.length,\n          processedReceipts: processedCount,\n          completedReceipts: completedCount,\n          totalAmount,\n          totalStarCandy\n        });\n      } else {\n        console.log('⚠️ [STATS] 통계 계산할 영수증이 없음:', {\n          allReceiptsLength: allReceipts?.length || 0,\n          isArray: Array.isArray(allReceipts),\n          allReceiptsType: typeof allReceipts\n        });\n      }\n    } catch (error) {\n      console.error('❌ [STATS] 통계 계산 실패:', error);\n      console.error('❌ [STATS] 에러 스택:', error instanceof Error ? error.stack : 'No stack trace');\n      \n      // 페이지 데이터로 fallback\n      console.log('🔄 [STATS] Fallback 계산 시작 - 현재 페이지 데이터 사용');\n      \n      const fallbackTotalAmount = rechargeItems.reduce((sum, item) => {\n        const amount = Number(item.amount) || 0;\n        console.log(`💰 [FALLBACK] Item ${item.id}: ${amount}원`);\n        return sum + (isNaN(amount) ? 0 : amount);\n      }, 0);\n      \n      const fallbackTotalStarCandy = rechargeItems.reduce((sum, item) => {\n        const starCandy = Number(item.starCandyAmount) || 0;\n        const bonus = Number(item.bonusAmount) || 0;\n        console.log(`⭐ [FALLBACK] Item ${item.id}: 기본 ${starCandy} + 보너스 ${bonus}`);\n        return sum + (isNaN(starCandy) ? 0 : starCandy) + (isNaN(bonus) ? 0 : bonus);\n      }, 0);\n      \n      statistics = {\n        totalPurchases: finalCount || 0,\n        totalAmount: fallbackTotalAmount,\n        totalStarCandy: fallbackTotalStarCandy,\n      };\n      \n      console.log('🔄 [STATS] Fallback 통계 계산 완료:', statistics);\n    }\n\n    // 8. 페이지네이션 정보\n    const totalPages = Math.ceil((finalCount || 0) / limit);\n    const pagination = {\n      page,\n      limit,\n      totalCount: finalCount || 0,\n      totalPages,\n      hasNext: page < totalPages,\n      hasPrevious: page > 1,\n    };\n\n    // 최종 통계 안전성 검증\n    const safeStatistics = {\n      totalPurchases: Number(statistics.totalPurchases) || 0,\n      totalAmount: Number(statistics.totalAmount) || 0,\n      totalStarCandy: Number(statistics.totalStarCandy) || 0,\n    };\n    \n    console.log('📊 [Recharge History API] 응답 준비 완료:', {\n      itemsCount: rechargeItems.length,\n      originalStatistics: statistics,\n      safeStatistics,\n      pagination\n    });\n\n    const response: RechargeResponse = {\n      success: true,\n      data: rechargeItems,\n      pagination,\n      statistics: safeStatistics,\n    };\n\n    return NextResponse.json(response);\n\n  } catch (error) {\n    console.error('❌ [Recharge History API] 예상치 못한 오류:', error);\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Internal server error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n} "],"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","ignoreList":[]}