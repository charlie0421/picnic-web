{"version":3,"names":["cov_9z7h8kmjw","actualCoverage","s","AuthProvider","f","useAuth","AuthContext","_react","createContext","undefined","AuthStore","instance","getInstance","b","constructor","supabaseClient","listeners","Set","state","session","user","userProfile","isAuthenticated","isLoading","isInitialized","signOut","bind","loadUserProfile","initPromise","window","console","log","checkStoredToken","supabaseUrl","process","env","NEXT_PUBLIC_SUPABASE_URL","urlParts","split","projectId","checkCookieToken","cookies","document","cookie","name","value","trim","startsWith","error","warn","authKey","hasLocalStorageToken","localStorage","getItem","hasCookieToken","hasAnyToken","hasLocalStorage","i","length","key","endsWith","hasToken","hasCookie","includes","hasStoredToken","isLoginPage","location","pathname","isCallbackPage","NEXT_PUBLIC_SUPABASE_ANON_KEY","hasUrl","hasKey","updateState","_client","createBrowserSupabaseClient","performInstantUserAuth","initialize","newState","prevState","NODE_ENV","변경전","hasUser","hasSession","변경후","listeners개수","size","forEach","listener","subscribe","add","delete","getState","waitForInitialization","auth","startTime","performance","now","getInstantUserFromCookies","getTokenExpiry","isTokenExpiringSoon","Promise","resolve","then","_interop_require_wildcard","require","tokenExpiry","expiringSoon","endTime","duration","toFixed","userEmail","email","userId","id","substring","toISOString","provider","app_metadata","createdAt","created_at","instantSession","access_token","refresh_token","expires_at","Math","floor","getTime","token_type","authStartTime","Date","shouldLoadProfile","hasUserId","reason","previousUserId","profile","is_admin","is_super_admin","catch","cachedProfile","nickname","onAuthStateChange","event","Error","message","String","stack","checkTokenStatusFromCookies","response","fetch","method","headers","credentials","ok","errorData","json","status","statusText","data","success","avatar_url","star_candy","star_candy_bonus","updated_at","birth_date","birth_time","deleted_at","gender","open_ages","open_gender","hasAvatar","currentUser","getUser","fallbackProfile","user_metadata","full_name","AuthProviderComponent","memo","AuthProviderInternal","children","contextValue","setContextValue","useState","useEffect","authStore","initializeAndSubscribe","unsubscribe","hasUserProfile","_jsxruntime","jsx","Provider","context","useContext"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/lib/supabase/auth-provider.tsx"],"sourcesContent":["'use client';\n\nimport React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n  useRef,\n  useCallback,\n  memo,\n} from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { createBrowserSupabaseClient } from './client';\n\n// 🎯 완전 쿠키 기반 인증: 네트워크 요청 없는 즉시 JWT 파싱\n// ✅ getSession() 제거됨 - 타임아웃 문제 해결\n// ✅ getUser() 제거됨 - 네트워크 지연 완전 제거  \n// ✅ 순수 JWT 파싱 - 쿠키에서 직접 사용자 정보 추출\n// ⚡ 로딩 시간: 0.1초 미만 (기존 5-8초 → 거의 즉시)\nimport { extractAvatarFromProvider } from '@/utils/image-utils';\nimport { UserProfiles } from '@/types/interfaces';\nimport { handleAuthError } from '@/utils/auth-error-handler';\n\ninterface AuthContextType {\n  session: Session | null;\n  user: User | null;\n  userProfile: UserProfiles | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  isInitialized: boolean;\n  signOut: () => Promise<void>;\n  loadUserProfile: (userId: string) => Promise<UserProfiles | null>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\n// 전역 상태 관리를 위한 싱글톤 패턴\nclass AuthStore {\n  private static instance: AuthStore | null = null;\n  private supabaseClient: any = null;\n  private listeners: Set<(state: AuthContextType) => void> = new Set();\n  private state: AuthContextType = {\n    session: null,\n    user: null,\n    userProfile: null as UserProfiles | null,\n    isAuthenticated: false,\n    isLoading: true,\n    isInitialized: false,\n    signOut: this.signOut.bind(this),\n    loadUserProfile: this.loadUserProfile.bind(this),\n  };\n  private initPromise: Promise<void> | null = null;\n\n  static getInstance(): AuthStore {\n    if (!AuthStore.instance) {\n      AuthStore.instance = new AuthStore();\n    }\n    return AuthStore.instance;\n  }\n\n  private constructor() {\n    if (typeof window !== 'undefined') {\n      try {\n        console.log('🔄 [AuthStore] 초기화 시작');\n        \n        // localStorage에서 Supabase Auth 토큰 체크 (동적 키 확인)\n        const checkStoredToken = () => {\n          try {\n            // Supabase 프로젝트 URL에서 프로젝트 ID 추출\n            const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n            if (!supabaseUrl) return false;\n            \n            const urlParts = supabaseUrl.split('.');\n            const projectId = urlParts[0]?.split('://')[1];\n            \n            // 🍪 쿠키에서 토큰 확인하는 함수\n            const checkCookieToken = (projectId: string) => {\n              try {\n                const cookies = document.cookie.split(';');\n                for (let cookie of cookies) {\n                  const [name, value] = cookie.trim().split('=');\n                  if (name && name.startsWith(`sb-${projectId}-auth-token`) && value) {\n                    console.log(`🍪 [AuthStore] 쿠키에 토큰 (${name}): 있음`);\n                    return true;\n                  }\n                }\n                return false;\n              } catch (error) {\n                console.warn('⚠️ [AuthStore] 쿠키 토큰 체크 중 오류:', error);\n                return false;\n              }\n            };\n            \n            if (projectId) {\n              const authKey = `sb-${projectId}-auth-token`;\n              \n              // 1단계: localStorage 확인\n              const hasLocalStorageToken = localStorage.getItem(authKey);\n              console.log(`🔍 [AuthStore] localStorage에 토큰 (${authKey}):`, hasLocalStorageToken ? '있음' : '없음');\n              \n              // 2단계: 쿠키 확인\n              const hasCookieToken = checkCookieToken(projectId);\n              \n              const hasAnyToken = !!hasLocalStorageToken || hasCookieToken;\n              console.log(`🔍 [AuthStore] 토큰 총합:`, {\n                localStorage: !!hasLocalStorageToken,\n                cookie: hasCookieToken,\n                hasAnyToken\n              });\n              \n              return hasAnyToken;\n            }\n            \n            // 프로젝트 ID를 추출할 수 없는 경우 모든 Supabase 키 확인\n            let hasLocalStorage = false;\n            for (let i = 0; i < localStorage.length; i++) {\n              const key = localStorage.key(i);\n              if (key && key.startsWith('sb-') && key.endsWith('-auth-token')) {\n                const hasToken = localStorage.getItem(key);\n                console.log(`🔍 [AuthStore] localStorage에 토큰 (${key}):`, hasToken ? '있음' : '없음');\n                if (hasToken) hasLocalStorage = true;\n              }\n            }\n            \n            // 일반적인 쿠키 패턴 확인\n            let hasCookie = false;\n            try {\n              const cookies = document.cookie.split(';');\n              for (let cookie of cookies) {\n                const [name, value] = cookie.trim().split('=');\n                if (name && name.startsWith('sb-') && name.includes('auth-token') && value) {\n                  console.log(`🍪 [AuthStore] 쿠키에 토큰 (${name}): 있음`);\n                  hasCookie = true;\n                  break;\n                }\n              }\n            } catch (error) {\n              console.warn('⚠️ [AuthStore] 일반 쿠키 확인 중 오류:', error);\n            }\n            \n            const hasAnyToken = hasLocalStorage || hasCookie;\n            console.log(`🔍 [AuthStore] 전체 토큰 상태:`, {\n              localStorage: hasLocalStorage,\n              cookie: hasCookie,\n              hasAnyToken\n            });\n            \n            return hasAnyToken;\n          } catch (error) {\n            console.warn('⚠️ [AuthStore] 토큰 체크 중 오류:', error);\n            return false;\n          }\n        };\n        \n        const hasStoredToken = checkStoredToken();\n        const isLoginPage = window.location.pathname.includes('/login');\n        const isCallbackPage = window.location.pathname.includes('/callback');\n        \n        console.log('🔍 [AuthStore] 초기화 컨텍스트:', {\n          hasStoredToken,\n          isLoginPage,\n          isCallbackPage,\n          pathname: window.location.pathname\n        });\n        \n        // 환경 변수 확인 및 안전한 클라이언트 생성\n        if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n          console.error('❌ [AuthStore] Supabase 환경 변수가 설정되지 않았습니다.', {\n            hasUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,\n            hasKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n          });\n          \n          // 환경 변수가 없어도 기본 상태로 초기화\n          this.updateState({\n            session: null,\n            user: null,\n            userProfile: null,\n            isAuthenticated: false,\n            isLoading: false,\n            isInitialized: true,\n            signOut: this.signOut.bind(this),\n            loadUserProfile: this.loadUserProfile.bind(this),\n          });\n          return;\n        }\n\n        // 🚀 순수 getUser() 기반 빠른 인증: getSession 완전히 우회\n        if (hasStoredToken) {\n          console.log('🚀 [AuthStore] 쿠키 토큰 존재 → 순수 getUser() 기반 빠른 인증 처리');\n          this.supabaseClient = createBrowserSupabaseClient();\n          \n          // getUser()로 직접 사용자 정보 확인 (매우 빠르고 안정적)\n          this.performInstantUserAuth();\n          return; // getSession 완전히 우회\n        }\n        \n        // 🚀 로그인 페이지 성능 최적화: 토큰이 없으면 즉시 로그아웃 상태 처리\n        if (!hasStoredToken && isLoginPage) {\n          console.log('⚡ [AuthStore] 로그인 페이지에서 토큰 없음 → 즉시 로그아웃 상태 처리 (getSession 건너뛰기)');\n          this.updateState({\n            session: null,\n            user: null,\n            userProfile: null,\n            isAuthenticated: false,\n            isLoading: false,\n            isInitialized: true,\n            signOut: this.signOut.bind(this),\n            loadUserProfile: this.loadUserProfile.bind(this),\n          });\n          return;\n        }\n        \n        // 저장된 토큰이 없고 일반 페이지에서도 빠른 초기화\n        if (!hasStoredToken && !isCallbackPage) {\n          console.log('⚡ [AuthStore] 저장된 토큰 없음 → 빠른 로그아웃 상태 처리');\n          this.updateState({\n            session: null,\n            user: null,\n            userProfile: null,\n            isAuthenticated: false,\n            isLoading: false,\n            isInitialized: true,\n            signOut: this.signOut.bind(this),\n            loadUserProfile: this.loadUserProfile.bind(this),\n          });\n          return;\n        }\n\n        this.supabaseClient = createBrowserSupabaseClient();\n        this.initPromise = this.initialize();\n      } catch (error) {\n        console.error('❌ [AuthStore] Supabase 클라이언트 생성 실패:', error);\n        \n        // 클라이언트 생성 실패 시에도 기본 상태로 초기화\n        this.updateState({\n          session: null,\n          user: null,\n          userProfile: null,\n          isAuthenticated: false,\n          isLoading: false,\n          isInitialized: true,\n          signOut: this.signOut.bind(this),\n          loadUserProfile: this.loadUserProfile.bind(this),\n        });\n      }\n    } else {\n      // SSR 환경에서는 기본 상태로 초기화\n      console.log('🌐 [AuthStore] SSR 환경에서 기본 초기화');\n      this.updateState({\n        session: null,\n        user: null,\n        userProfile: null,\n        isAuthenticated: false,\n        isLoading: false,\n        isInitialized: true,\n        signOut: this.signOut.bind(this),\n        loadUserProfile: this.loadUserProfile.bind(this),\n      });\n    }\n  }\n\n  private async initialize() {\n    if (!this.supabaseClient) {\n      console.warn('⚠️ [AuthStore] Supabase 클라이언트가 없어 초기화를 건너뜁니다.');\n      this.updateState({\n        ...this.state,\n        isLoading: false,\n        isInitialized: true,\n      });\n      return;\n    }\n\n    // 이미 초기화된 경우 재초기화 방지\n    if (this.state.isInitialized) {\n      console.log('✅ [AuthStore] 이미 초기화됨 - 재초기화 건너뜀');\n      return;\n    }\n\n    try {\n      console.log('🚀 [AuthStore] 완전 쿠키 기반 초기화 시작 (네트워크 요청 0개)');\n      \n      // 🎯 완전히 쿠키 기반: JWT 파싱만 사용, getUser() 및 getSession() 완전 제거\n      await this.performInstantUserAuth();\n      \n      console.log('✅ [AuthStore] 쿠키 기반 초기화 완료 (네트워크 요청 없음)');\n    } catch (error) {\n      console.error('❌ [AuthStore] 초기화 에러:', error);\n      this.updateState({\n        ...this.state,\n        isLoading: false,\n        isInitialized: true,\n      });\n    }\n  }\n\n  // updateAuthState 메소드 제거됨 - 완전히 쿠키 기반으로 변경\n  // 모든 인증 상태는 JWT 파싱으로만 처리하며 네트워크 요청 없음\n\n  private updateState(newState: AuthContextType) {\n    const prevState = this.state;\n    this.state = newState;\n    \n    // 디버깅: 상태 변경 로그\n    if (process.env.NODE_ENV === 'development') {\n      console.log('🔄 [AuthStore] 상태 변경:', {\n        변경전: {\n          isAuthenticated: prevState.isAuthenticated,\n          isLoading: prevState.isLoading,\n          isInitialized: prevState.isInitialized,\n          hasUser: !!prevState.user,\n          hasSession: !!prevState.session\n        },\n        변경후: {\n          isAuthenticated: newState.isAuthenticated,\n          isLoading: newState.isLoading,\n          isInitialized: newState.isInitialized,\n          hasUser: !!newState.user,\n          hasSession: !!newState.session\n        },\n        listeners개수: this.listeners.size\n      });\n    }\n    \n    this.listeners.forEach(listener => listener(newState));\n  }\n\n  public subscribe(listener: (state: AuthContextType) => void): () => void {\n    this.listeners.add(listener);\n    // 구독 즉시 현재 상태 전달\n    listener(this.state);\n    \n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  public getState(): AuthContextType {\n    return this.state;\n  }\n\n  public async waitForInitialization(): Promise<void> {\n    if (this.initPromise) {\n      await this.initPromise;\n    }\n  }\n\n  private async signOut(): Promise<void> {\n    if (!this.supabaseClient) return;\n\n    try {\n      console.log('🔄 [AuthStore] 로그아웃 시작');\n      const { error } = await this.supabaseClient.auth.signOut();\n      \n      if (error) {\n        console.error('❌ [AuthStore] 로그아웃 에러:', error);\n      } else {\n        console.log('✅ [AuthStore] 로그아웃 완료');\n      }\n    } catch (error) {\n      console.error('❌ [AuthStore] 로그아웃 예외:', error);\n    }\n  }\n\n  private async performInstantUserAuth(): Promise<void> {\n    try {\n      console.log('🚀 [AuthStore] performInstantUserAuth 시작 (네트워크 요청 없음)');\n      const startTime = performance.now();\n      \n      // 🎯 쿠키에서 즉시 JWT 파싱 (네트워크 요청 없음!)\n      const { getInstantUserFromCookies, getTokenExpiry, isTokenExpiringSoon } = await import('@/utils/jwt-parser');\n      \n      const user = getInstantUserFromCookies();\n      const tokenExpiry = getTokenExpiry();\n      const expiringSoon = isTokenExpiringSoon();\n      \n      const endTime = performance.now();\n      \n      console.log('✅ [AuthStore] JWT 파싱 완료:', {\n        duration: `${(endTime - startTime).toFixed(2)}ms`,\n        hasUser: !!user,\n        userEmail: user?.email,\n        userId: user?.id?.substring(0, 8) + '...',\n        tokenExpiry: tokenExpiry?.toISOString(),\n        expiringSoon\n      });\n\n      if (!user) {\n        console.warn('⚠️ [AuthStore] 쿠키에서 유효한 사용자 정보 없음');\n        \n        // 토큰이 없거나 만료됨\n        this.updateState({\n          session: null,\n          user: null,\n          userProfile: null,\n          isAuthenticated: false,\n          isLoading: false,\n          isInitialized: true,\n          signOut: this.signOut.bind(this),\n          loadUserProfile: this.loadUserProfile.bind(this),\n        });\n        return;\n      }\n\n      // 사용자가 있으면 즉시 인증된 상태로 설정\n      console.log('✅ [AuthStore] JWT에서 사용자 확인 성공:', {\n        userId: user.id?.substring(0, 8) + '...',\n        email: user.email,\n        provider: user.app_metadata?.provider,\n        createdAt: user.created_at\n      });\n\n      // 세션 객체 생성 (JWT 기반)\n      const instantSession = {\n        user: user,\n        access_token: 'token-from-jwt', // 실제 토큰은 JWT에서 파싱됨\n        refresh_token: null,\n        expires_at: tokenExpiry ? Math.floor(tokenExpiry.getTime() / 1000) : null,\n        token_type: 'bearer'\n      };\n\n      console.log('🔄 [AuthStore] 인증 상태 업데이트 중...');\n      this.updateState({\n        user: user,\n        session: instantSession as any,\n        userProfile: null,\n        isLoading: false, // 즉시 로딩 완료\n        isInitialized: true,\n        isAuthenticated: true,\n        signOut: this.signOut.bind(this),\n        loadUserProfile: this.loadUserProfile.bind(this),\n      });\n      \n      console.log('🎉 [AuthStore] 인증 상태 업데이트 완료 - 로딩 해제됨 (JWT 방식)');\n\n      // 🔧 개발 환경에서 userProfile 로딩 시간 추적\n      if (process.env.NODE_ENV === 'development') {\n        (window as any).authStartTime = Date.now();\n      }\n\n      // 프로필 캐싱 로직: 프로필이 없거나 사용자가 변경된 경우에만 로드\n      const shouldLoadProfile = !this.state.userProfile || \n                               (this.state.userProfile?.id !== user.id);\n      \n      if (shouldLoadProfile) {\n        console.log('🔄 [AuthStore] 사용자 프로필 로드 시작:', {\n          userId: user.id?.substring(0, 8) + '...',\n          hasUserId: !!user.id,\n          userEmail: user.email,\n          reason: !this.state.userProfile ? 'profile_not_cached' : 'user_changed',\n          previousUserId: this.state.userProfile?.id?.substring(0, 8) + '...' || 'none'\n        });\n        \n        this.loadUserProfile(user.id).then(profile => {\n          if (profile) {\n            console.log('✅ [AuthStore] 사용자 프로필 로드 성공:', {\n              is_admin: profile.is_admin,\n              is_super_admin: profile.is_super_admin\n            });\n            this.updateState({\n              ...this.state,\n              userProfile: profile,\n            });\n          } else {\n            console.warn('⚠️ [AuthStore] 사용자 프로필 로드 결과가 null임');\n          }\n        }).catch(error => {\n          console.warn('⚠️ [AuthStore] 사용자 프로필 로드 실패:', error);\n        });\n      } else {\n          console.log('✅ [AuthStore] 동일 사용자 프로필이 이미 캐시됨 - 재로딩 건너뜀:', {\n            userId: user.id?.substring(0, 8) + '...',\n            cachedProfile: {\n              nickname: this.state.userProfile?.nickname,\n              is_admin: this.state.userProfile?.is_admin\n            }\n          });\n        }\n\n      // 토큰 만료 경고 (쿠키 기반)\n      if (expiringSoon) {\n        console.warn('⚠️ [AuthStore] 토큰이 곧 만료됨 (30분 이내) - 재로그인 필요할 수 있음');\n        // 백그라운드 네트워크 요청 없이 경고만 표시\n      }\n\n      // 인증 상태 변경 리스너 등록 (쿠키 기반 모드)\n      this.supabaseClient.auth.onAuthStateChange(async (event: string, session: any) => {\n        // 로그아웃 이벤트만 처리 (다른 이벤트는 쿠키 기반으로 이미 처리됨)\n        if (event === 'SIGNED_OUT' || !session) {\n          console.log('🚪 [AuthStore] 로그아웃 이벤트 - 상태 정리');\n          this.updateState({\n            session: null,\n            user: null,\n            userProfile: null,\n            isAuthenticated: false,\n            isLoading: false,\n            isInitialized: true,\n            signOut: this.signOut.bind(this),\n            loadUserProfile: this.loadUserProfile.bind(this),\n          });\n        }\n        // 다른 이벤트(SIGNED_IN, TOKEN_REFRESHED 등)는 조용히 무시\n        // 쿠키 기반으로 이미 처리되므로 추가 로그 없이 무시\n      });\n\n    } catch (error) {\n      console.error('❌ [AuthStore] performInstantUserAuth 예외:', {\n        error: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack?.substring(0, 200) : undefined\n      });\n      \n      // 오류 발생시 비인증 상태로 설정\n      this.updateState({\n        session: null,\n        user: null,\n        userProfile: null,\n        isAuthenticated: false,\n        isLoading: false,\n        isInitialized: true,\n        signOut: this.signOut.bind(this),\n        loadUserProfile: this.loadUserProfile.bind(this),\n      });\n      \n      console.log('🔄 [AuthStore] 오류로 인한 비인증 상태 설정 완료');\n    }\n  }\n\n\n\n  private async checkTokenStatusFromCookies(): Promise<void> {\n    try {\n      console.log('🔄 [AuthStore] 쿠키 기반 토큰 상태 체크');\n      \n      // 완전히 쿠키 기반 - 네트워크 요청 없음\n      const { getInstantUserFromCookies, getTokenExpiry } = await import('@/utils/jwt-parser');\n      \n      const user = getInstantUserFromCookies();\n      const tokenExpiry = getTokenExpiry();\n      \n      if (!user) {\n        console.warn('⚠️ [AuthStore] 쿠키에서 유효한 사용자 정보 없음 - 로그아웃 처리');\n        this.updateState({\n          ...this.state,\n          session: null,\n          user: null,\n          userProfile: null,\n          isAuthenticated: false,\n        });\n        return;\n      }\n\n      // 토큰 만료 체크 (클라이언트 사이드)\n      if (tokenExpiry && tokenExpiry <= new Date()) {\n        console.warn('⚠️ [AuthStore] JWT 토큰이 만료됨 - 로그아웃 처리');\n        this.updateState({\n          ...this.state,\n          session: null,\n          user: null,\n          userProfile: null,\n          isAuthenticated: false,\n        });\n        return;\n      }\n\n      console.log('✅ [AuthStore] 쿠키 기반 토큰 상태 체크 완료 - 유효함');\n    } catch (error) {\n      console.warn('⚠️ [AuthStore] 쿠키 기반 토큰 체크 중 오류:', error);\n    }\n  }\n\n  private async loadUserProfile(userId: string): Promise<UserProfiles | null> {\n    try {\n      console.log('🔍 [AuthStore] API를 통한 프로필 조회 시작:', { userId: userId.substring(0, 8) + '...' });\n      \n      // 🚀 서버 API를 통해 프로필 조회 (RLS 정책 우회)\n      const response = await fetch('/api/user/profile', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // 쿠키 포함\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.warn('⚠️ [AuthStore] API 프로필 조회 실패:', {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData\n        });\n        \n        // 404나 403 에러인 경우 null 반환 (프로필 없음)\n        if (response.status === 404 || response.status === 403) {\n          return null;\n        }\n        \n        throw new Error(`API 응답 실패: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      \n      if (!data.success || !data.user) {\n        console.warn('⚠️ [AuthStore] API 응답에서 사용자 정보 없음:', data);\n        return null;\n      }\n\n      // API 응답을 UserProfiles 형식으로 변환\n      const userProfile: UserProfiles = {\n        id: data.user.id,\n        email: data.user.email,\n        nickname: data.user.name,\n        avatar_url: data.user.avatar_url,\n        star_candy: data.user.star_candy || 0,\n        star_candy_bonus: data.user.star_candy_bonus || 0,\n        is_admin: data.user.is_admin || false,\n        is_super_admin: data.user.is_super_admin || false,\n        created_at: data.user.created_at,\n        updated_at: data.user.updated_at,\n        // 기본값 설정\n        birth_date: null,\n        birth_time: null,\n        deleted_at: null,\n        gender: null,\n        open_ages: false,\n        open_gender: false\n      };\n\n      console.log('✅ [AuthStore] API를 통한 프로필 조회 성공:', {\n        id: userProfile.id?.substring(0, 8) + '...',\n        nickname: userProfile.nickname,\n        email: userProfile.email,\n        hasAvatar: !!userProfile.avatar_url,\n        is_admin: userProfile.is_admin,\n        is_super_admin: userProfile.is_super_admin,\n        star_candy: userProfile.star_candy\n      });\n\n      return userProfile;\n\n    } catch (error) {\n      console.error('❌ [AuthStore] API 프로필 조회 예외:', error);\n      \n      // API 호출 실패시 fallback으로 기본 프로필 반환 (개발 환경)\n      if (process.env.NODE_ENV === 'development') {\n        console.log('🔧 [AuthStore] 개발환경 - 기본 프로필 fallback');\n        \n        // 현재 사용자 정보 가져오기\n        const { data: { user: currentUser } } = await this.supabaseClient?.auth.getUser() || { data: { user: null } };\n        \n        if (currentUser && currentUser.id === userId) {\n          const fallbackProfile: UserProfiles = {\n            id: userId,\n            email: currentUser.email || null,\n            nickname: currentUser.user_metadata?.name || \n                     currentUser.user_metadata?.full_name || \n                     currentUser.email?.split('@')[0] || \n                     'User',\n            avatar_url: null, // JWT 토큰 이미지는 사용하지 않음\n            is_admin: true, // 개발환경에서 API 실패시 임시 관리자\n            is_super_admin: false,\n            star_candy: 0,\n            star_candy_bonus: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            birth_date: null,\n            birth_time: null,\n            deleted_at: null,\n            gender: null,\n            open_ages: false,\n            open_gender: false\n          };\n          \n          console.log('🐛 [AuthStore] 개발환경 fallback 프로필 생성:', {\n            nickname: fallbackProfile.nickname,\n            is_admin: fallbackProfile.is_admin\n          });\n          \n          return fallbackProfile;\n        }\n      }\n      \n      return null;\n    }\n  }\n}\n\n// AuthProvider 컴포넌트를 memo로 감싸서 완전히 안정화\nconst AuthProviderComponent = memo(function AuthProviderInternal({ children }: AuthProviderProps) {\n  console.log('🏗️ [AuthProvider] 컴포넌트 생성/재렌더링');\n  \n  const [contextValue, setContextValue] = useState<AuthContextType>(() => {\n    return AuthStore.getInstance().getState();\n  });\n\n  useEffect(() => {\n    const authStore = AuthStore.getInstance();\n    \n    // 초기화 대기 (await 추가)\n    const initializeAndSubscribe = async () => {\n      try {\n        await authStore.waitForInitialization();\n        console.log('✅ [AuthProvider] 초기화 완료 대기 성공');\n      } catch (error) {\n        console.error('❌ [AuthProvider] 초기화 대기 중 오류:', error);\n      }\n    };\n    \n    initializeAndSubscribe();\n    \n    // 상태 변경 구독\n    const unsubscribe = authStore.subscribe((newState) => {\n      console.log('🔄 [AuthProvider] Context 값 변경:', {\n        isLoading: newState.isLoading,\n        isInitialized: newState.isInitialized,\n        isAuthenticated: newState.isAuthenticated,\n        hasSession: !!newState.session,\n        hasUser: !!newState.user,\n        hasUserProfile: !!newState.userProfile,\n      });\n      setContextValue(newState);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n});\n\n// AuthProvider를 완전히 안정화된 컴포넌트로 export\nexport const AuthProvider = AuthProviderComponent;\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n} "],"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","ignoreList":[]}