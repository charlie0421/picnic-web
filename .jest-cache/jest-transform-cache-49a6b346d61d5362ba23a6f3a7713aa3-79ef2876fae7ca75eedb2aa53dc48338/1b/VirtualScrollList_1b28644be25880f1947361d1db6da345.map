{"version":3,"names":["cov_eacqibk0r","actualCoverage","s","VirtualScrollList","f","useVirtualScroll","_react","memo","items","itemHeight","containerHeight","renderItem","overscan","b","className","onScroll","loadingComponent","isLoading","onEndReached","endReachedThreshold","scrollTop","setScrollTop","useState","containerRef","useRef","isScrollingRef","scrollTimeoutRef","visibleRange","useMemo","startIndex","Math","max","floor","endIndex","min","length","visibleItems","slice","map","item","index","top","totalHeight","handleScroll","useCallback","event","newScrollTop","currentTarget","scrollHeight","clientHeight","scrollPercentage","current","clearTimeout","setTimeout","useEffect","scrollToIndex","behavior","scrollTo","scrollToTop","_jsxruntime","jsxs","jsx","ref","style","height","position","width","transform","willChange","_image","default","src","alt","priority","onClick","displayName"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/components/common/VirtualScrollList.tsx"],"sourcesContent":["'use client';\n\nimport React, { \n  useState, \n  useEffect, \n  useRef, \n  useCallback, \n  memo, \n  useMemo \n} from 'react';\nimport Image from 'next/image';\n\ninterface VirtualScrollListProps<T> {\n  items: T[];\n  itemHeight: number;\n  containerHeight: number;\n  renderItem: (item: T, index: number) => React.ReactNode;\n  overscan?: number;\n  className?: string;\n  onScroll?: (scrollTop: number) => void;\n  loadingComponent?: React.ReactNode;\n  isLoading?: boolean;\n  onEndReached?: () => void;\n  endReachedThreshold?: number;\n}\n\nexport const VirtualScrollList = memo(<T,>({\n  items,\n  itemHeight,\n  containerHeight,\n  renderItem,\n  overscan = 5,\n  className = '',\n  onScroll,\n  loadingComponent,\n  isLoading = false,\n  onEndReached,\n  endReachedThreshold = 0.8\n}: VirtualScrollListProps<T>) => {\n  const [scrollTop, setScrollTop] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const isScrollingRef = useRef(false);\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Calculate visible range\n  const visibleRange = useMemo(() => {\n    const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.floor((scrollTop + containerHeight) / itemHeight) + overscan\n    );\n    return { startIndex, endIndex };\n  }, [scrollTop, itemHeight, containerHeight, overscan, items.length]);\n\n  // Get visible items\n  const visibleItems = useMemo(() => {\n    const { startIndex, endIndex } = visibleRange;\n    return items.slice(startIndex, endIndex + 1).map((item, index) => ({\n      item,\n      index: startIndex + index,\n      top: (startIndex + index) * itemHeight\n    }));\n  }, [items, visibleRange, itemHeight]);\n\n  // Total height calculation\n  const totalHeight = items.length * itemHeight;\n\n  // Scroll handler with throttling\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const newScrollTop = event.currentTarget.scrollTop;\n    setScrollTop(newScrollTop);\n    onScroll?.(newScrollTop);\n\n    // Check if reached end\n    if (onEndReached) {\n      const { scrollHeight, clientHeight } = event.currentTarget;\n      const scrollPercentage = (newScrollTop + clientHeight) / scrollHeight;\n      \n      if (scrollPercentage >= endReachedThreshold) {\n        onEndReached();\n      }\n    }\n\n    // Set scrolling state\n    isScrollingRef.current = true;\n    \n    // Clear existing timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current);\n    }\n    \n    // Set timeout to detect scroll end\n    scrollTimeoutRef.current = setTimeout(() => {\n      isScrollingRef.current = false;\n    }, 150);\n  }, [onScroll, onEndReached, endReachedThreshold]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Scroll to specific index\n  const scrollToIndex = useCallback((index: number, behavior: ScrollBehavior = 'smooth') => {\n    if (containerRef.current) {\n      const scrollTop = index * itemHeight;\n      containerRef.current.scrollTo({\n        top: scrollTop,\n        behavior\n      });\n    }\n  }, [itemHeight]);\n\n  // Scroll to top\n  const scrollToTop = useCallback((behavior: ScrollBehavior = 'smooth') => {\n    scrollToIndex(0, behavior);\n  }, [scrollToIndex]);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div\n        ref={containerRef}\n        className=\"overflow-auto\"\n        style={{ height: containerHeight }}\n        onScroll={handleScroll}\n      >\n        {/* Virtual container with total height */}\n        <div style={{ height: totalHeight, position: 'relative' }}>\n          {/* Visible items */}\n          {visibleItems.map(({ item, index, top }) => (\n            <div\n              key={index}\n              style={{\n                position: 'absolute',\n                top,\n                height: itemHeight,\n                width: '100%',\n                transform: `translateY(0)`, // Force GPU acceleration\n                willChange: 'transform' // Optimize for animations\n              }}\n            >\n              {renderItem(item, index)}\n            </div>\n          ))}\n          \n          {/* Loading indicator at the bottom */}\n          {isLoading && (\n            <div\n              style={{\n                position: 'absolute',\n                top: totalHeight,\n                width: '100%',\n                height: 60\n              }}\n            >\n              {loadingComponent || (\n                <div className=\"flex justify-center items-center h-full\">\n                  <Image\n                    src=\"/images/logo.png\"\n                    alt=\"Loading\"\n                    width={24}\n                    height={24}\n                    className=\"w-6 h-6 rounded-full animate-scale-pulse drop-shadow-lg object-cover\"\n                    priority\n                  />\n                  <span className=\"ml-2 text-gray-600 text-sm animate-scale-pulse\">Loading...</span>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Scroll to top button */}\n      {scrollTop > containerHeight && (\n        <button\n          onClick={() => scrollToTop()}\n          className=\"fixed bottom-4 right-4 w-12 h-12 bg-primary-600 text-white rounded-full shadow-lg hover:bg-primary-700 transition-colors duration-200 flex items-center justify-center z-10\"\n          aria-label=\"Scroll to top\"\n        >\n          â†‘\n        </button>\n      )}\n    </div>\n  );\n});\n\nVirtualScrollList.displayName = 'VirtualScrollList';\n\n// Hook for Virtual Scrolling\nexport function useVirtualScroll<T>(\n  items: T[],\n  itemHeight: number,\n  containerHeight: number,\n  overscan: number = 5\n) {\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const visibleRange = useMemo(() => {\n    const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.floor((scrollTop + containerHeight) / itemHeight) + overscan\n    );\n    return { startIndex, endIndex };\n  }, [scrollTop, itemHeight, containerHeight, overscan, items.length]);\n\n  const visibleItems = useMemo(() => {\n    const { startIndex, endIndex } = visibleRange;\n    return items.slice(startIndex, endIndex + 1).map((item, index) => ({\n      item,\n      index: startIndex + index,\n      top: (startIndex + index) * itemHeight\n    }));\n  }, [items, visibleRange, itemHeight]);\n\n  return {\n    visibleItems,\n    totalHeight: items.length * itemHeight,\n    setScrollTop,\n    scrollTop\n  };\n} "],"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","ignoreList":[]}