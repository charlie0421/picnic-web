{"version":3,"names":["cov_7vagpzh9j","actualCoverage","s","translationLogger","TranslationLogger","constructor","config","b","f","errorCache","Map","reportedErrors","Set","reportingQueue","enableConsoleLogging","process","env","NODE_ENV","enableRemoteLogging","maxLocalErrors","reportingEndpoint","logMissingTranslation","key","language","context","fallbackUsed","errorId","has","error","timestamp","Date","now","set","add","console","warn","push","scheduleReporting","size","oldestKey","keys","next","value","undefined","delete","logLoadingError","source","errorMessage","message","logTranslationSuccess","keysLoaded","log","logLanguageSync","fromLanguage","toLanguage","trigger","getMissingTranslationStats","byLanguage","recentErrors","oneHourAgo","Array","from","values","totalMissing","sort","a","clearErrorCache","clear","length","setTimeout","sendErrorReport","errorsToReport","response","fetch","method","headers","body","JSON","stringify","errors","userAgent","window","navigator","url","location","href","ok","Error","status","statusText","retriableErrors","filter","err","includes","parseInt","split","forEach","retryCount"],"sources":["/Users/charlie.hyun/Repositories/picnic-web/utils/translationLogger.ts"],"sourcesContent":["import { Language } from '@/config/settings';\n\ninterface TranslationError {\n  key: string;\n  language: Language;\n  timestamp: number;\n  context?: string;\n  fallbackUsed?: string;\n}\n\ninterface TranslationLoggerConfig {\n  enableConsoleLogging: boolean;\n  enableRemoteLogging: boolean;\n  maxLocalErrors: number;\n  reportingEndpoint?: string;\n}\n\nclass TranslationLogger {\n  private config: TranslationLoggerConfig;\n  private errorCache: Map<string, TranslationError> = new Map();\n  private reportedErrors: Set<string> = new Set();\n  private reportingQueue: TranslationError[] = [];\n\n  constructor(config: Partial<TranslationLoggerConfig> = {}) {\n    this.config = {\n      enableConsoleLogging: process.env.NODE_ENV === 'development',\n      enableRemoteLogging: false, // API ÏóîÎìúÌè¨Ïù∏Ìä∏Í∞Ä ÏóÜÏúºÎØÄÎ°ú ÎπÑÌôúÏÑ±Ìôî\n      maxLocalErrors: 100,\n      reportingEndpoint: '/api/translations/report-missing',\n      ...config,\n    };\n  }\n\n  /**\n   * Î≤àÏó≠ ÌÇ§Í∞Ä ÎàÑÎùΩÎêú Í≤ΩÏö∞ Î°úÍπÖ\n   */\n  logMissingTranslation(\n    key: string,\n    language: Language,\n    context?: string,\n    fallbackUsed?: string\n  ): void {\n    const errorId = `${key}-${language}`;\n    \n    // Ïù¥ÎØ∏ Î≥¥Í≥†Îêú ÏóêÎü¨Îäî Ï§ëÎ≥µ Î°úÍπÖ Î∞©ÏßÄ\n    if (this.reportedErrors.has(errorId)) {\n      return;\n    }\n\n    const error: TranslationError = {\n      key,\n      language,\n      timestamp: Date.now(),\n      context,\n      fallbackUsed,\n    };\n\n    // Î°úÏª¨ Ï∫êÏãúÏóê Ï†ÄÏû•\n    this.errorCache.set(errorId, error);\n    this.reportedErrors.add(errorId);\n\n    // ÏΩòÏÜî Î°úÍπÖ (Í∞úÎ∞ú ÌôòÍ≤Ω)\n    if (this.config.enableConsoleLogging) {\n      console.warn(\n        `üîç [Translation] Missing key: \"${key}\" for language: ${language}`,\n        context ? `(context: ${context})` : '',\n        fallbackUsed ? `(fallback: \"${fallbackUsed}\")` : ''\n      );\n    }\n\n    // ÏõêÍ≤© Î≥¥Í≥† ÌÅêÏóê Ï∂îÍ∞Ä\n    if (this.config.enableRemoteLogging) {\n      this.reportingQueue.push(error);\n      this.scheduleReporting();\n    }\n\n    // Ï∫êÏãú ÌÅ¨Í∏∞ Ï†úÌïú\n    if (this.errorCache.size > this.config.maxLocalErrors) {\n      const oldestKey = this.errorCache.keys().next().value;\n      if (oldestKey !== undefined) {\n        this.errorCache.delete(oldestKey);\n      }\n    }\n  }\n\n  /**\n   * Î≤àÏó≠ Î°úÎî© ÏóêÎü¨ Î°úÍπÖ\n   */\n  logLoadingError(language: Language, error: Error, source: 'local'): void {\n    const errorMessage = `Failed to load ${source} translations for ${language}: ${error.message}`;\n    \n    if (this.config.enableConsoleLogging) {\n      console.error(`‚ùå [Translation] ${errorMessage}`, error);\n    }\n\n    // ÏõêÍ≤© Î≥¥Í≥†\n    if (this.config.enableRemoteLogging) {\n      this.reportingQueue.push({\n        key: `__LOADING_ERROR__`,\n        language,\n        timestamp: Date.now(),\n        context: `${source}_loading_error: ${error.message}`,\n      });\n      this.scheduleReporting();\n    }\n  }\n\n  /**\n   * Î≤àÏó≠ ÏÑ±Í≥µ Î°úÍπÖ (ÌÜµÍ≥ÑÏö©)\n   */\n  logTranslationSuccess(language: Language, keysLoaded: number, source: 'local'): void {\n    if (this.config.enableConsoleLogging) {\n      console.log(`‚úÖ [Translation] Loaded ${keysLoaded} keys for ${language} from ${source}`);\n    }\n  }\n\n  /**\n   * Ïñ∏Ïñ¥ ÎèôÍ∏∞Ìôî Ïù¥Î≤§Ìä∏ Î°úÍπÖ\n   */\n  logLanguageSync(fromLanguage: Language, toLanguage: Language, trigger: string): void {\n    if (this.config.enableConsoleLogging) {\n      console.log(`üîÑ [Translation] Language sync: ${fromLanguage} ‚Üí ${toLanguage} (${trigger})`);\n    }\n  }\n\n  /**\n   * ÎàÑÎùΩÎêú Î≤àÏó≠ ÌÇ§ ÌÜµÍ≥Ñ Î∞òÌôò\n   */\n  getMissingTranslationStats(): {\n    totalMissing: number;\n    byLanguage: Record<Language, number>;\n    recentErrors: TranslationError[];\n  } {\n    const byLanguage = {} as Record<Language, number>;\n    const recentErrors: TranslationError[] = [];\n    const oneHourAgo = Date.now() - 60 * 60 * 1000;\n\n    for (const error of Array.from(this.errorCache.values())) {\n      // Ïñ∏Ïñ¥Î≥Ñ ÌÜµÍ≥Ñ\n      byLanguage[error.language] = (byLanguage[error.language] || 0) + 1;\n      \n      // ÏµúÍ∑º 1ÏãúÍ∞Ñ ÏóêÎü¨\n      if (error.timestamp > oneHourAgo) {\n        recentErrors.push(error);\n      }\n    }\n\n    return {\n      totalMissing: this.errorCache.size,\n      byLanguage,\n      recentErrors: recentErrors.sort((a, b) => b.timestamp - a.timestamp),\n    };\n  }\n\n  /**\n   * ÏóêÎü¨ Ï∫êÏãú Ï¥àÍ∏∞Ìôî\n   */\n  clearErrorCache(): void {\n    this.errorCache.clear();\n    this.reportedErrors.clear();\n    this.reportingQueue.length = 0;\n  }\n\n  /**\n   * ÏõêÍ≤© Î≥¥Í≥† Ïä§ÏºÄÏ§ÑÎßÅ (Î∞∞Ïπò Ï≤òÎ¶¨)\n   */\n  private scheduleReporting(): void {\n    // Ïù¥ÎØ∏ Ïä§ÏºÄÏ§ÑÎêú Î≥¥Í≥†Í∞Ä ÏûàÏúºÎ©¥ Î¨¥Ïãú\n    if (this.reportingQueue.length === 0) return;\n\n    // 5Ï¥à ÌõÑ Î∞∞Ïπò Î≥¥Í≥†\n    setTimeout(() => {\n      this.sendErrorReport();\n    }, 5000);\n  }\n\n  /**\n   * ÏõêÍ≤© ÏÑúÎ≤ÑÎ°ú ÏóêÎü¨ Î≥¥Í≥† Ï†ÑÏÜ°\n   */\n  private async sendErrorReport(): Promise<void> {\n    if (this.reportingQueue.length === 0 || !this.config.reportingEndpoint) return;\n\n    const errorsToReport = [...this.reportingQueue];\n    this.reportingQueue.length = 0;\n\n    try {\n      const response = await fetch(this.config.reportingEndpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          errors: errorsToReport,\n          userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : 'server',\n          url: typeof window !== 'undefined' ? window.location.href : 'server',\n          timestamp: Date.now(),\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n\n      if (this.config.enableConsoleLogging) {\n        console.log(`üì§ [Translation] Reported ${errorsToReport.length} translation errors`);\n      }\n    } catch (error) {\n      // Î≥¥Í≥† Ïã§Ìå® Ïãú Îã§Ïãú ÌÅêÏóê Ï∂îÍ∞Ä (ÏµúÎåÄ 3Ìöå Ïû¨ÏãúÎèÑ)\n      const retriableErrors = errorsToReport.filter(err => \n        !err.context?.includes('retry_count') || \n        parseInt(err.context.split('retry_count:')[1] || '0') < 3\n      );\n\n      retriableErrors.forEach(err => {\n        const retryCount = parseInt(err.context?.split('retry_count:')[1] || '0') + 1;\n        err.context = `${err.context || ''} retry_count:${retryCount}`;\n        this.reportingQueue.push(err);\n      });\n\n      if (this.config.enableConsoleLogging) {\n        console.error('‚ùå [Translation] Failed to report errors:', error);\n      }\n    }\n  }\n}\n\n// Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±\nexport const translationLogger = new TranslationLogger();\n\n// Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú Ï†ÑÏó≠ Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï\nif (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {\n  (window as any).translationLogger = translationLogger;\n} "],"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","ignoreList":[]}