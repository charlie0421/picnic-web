# 피크닉 웹 애플리케이션 유지보수 PRD

## 프로젝트 개요
피크닉 웹 애플리케이션의 핵심 기능들을 개선하고 사용자 경험을 향상시키기 위한 유지보수 작업입니다. 투표 시스템의 실시간 기능 구현, 로그인 시스템 완성, 필터링 기능 개선, 다국어 지원 강화 등을 포함합니다.

## 기술 스택
- **Frontend**: Next.js 15.3.1, React, TypeScript, Tailwind CSS
- **Backend**: Supabase (PostgreSQL, Realtime, Auth)
- **State Management**: Zustand
- **Internationalization**: next-intl
- **Authentication**: Supabase Auth (Google, Apple, Kakao, WeChat)
- **Real-time**: Supabase Realtime subscriptions
- **Styling**: Tailwind CSS, Framer Motion (애니메이션)

## 핵심 기능 요구사항

### 1. 투표 실행 기능 구현
- **목적**: 사용자가 투표에 참여할 수 있는 완전한 기능 구현
- **요구사항**:
  - 투표 선택 및 제출 기능
  - 중복 투표 방지 (사용자당 1회)
  - 투표 결과 실시간 반영
  - 투표 마감 시간 체크
  - 로그인 사용자만 투표 가능
  - 투표 후 결과 즉시 표시

### 2. 위챗(WeChat) 로그인 완성
- **목적**: 위챗 소셜 로그인 기능 완전 구현
- **요구사항**:
  - WeChat OAuth 2.0 연동 완성
  - 콜백 처리 및 세션 관리
  - 에러 처리 및 사용자 피드백
  - 기존 Google, Apple, Kakao 로그인과 동일한 UX
  - 위챗 사용자 정보 연동

### 3. Area Filter 전체 기능
- **목적**: 지역 필터에 "전체" 옵션 추가 및 상태 관리
- **요구사항**:
  - 기본값: "전체(All)" 선택
  - 선택된 필터 값 브라우저 localStorage에 저장
  - 페이지 새로고침 시 저장된 값 복원
  - 필터 변경 시 즉시 결과 반영
  - 다국어 지원 (전체/All)

### 4. Status Filter 브라우저 저장 기능
- **목적**: 상태 필터 선택값 영구 저장
- **요구사항**:
  - 선택된 상태 필터 localStorage에 저장
  - 페이지 재방문 시 저장된 필터 상태 복원
  - 필터 초기화 기능
  - 유효하지 않은 저장값 처리

### 5. 메뉴 네비게이션 언어 처리 개선
- **목적**: Reward, Media, Vote 메뉴 클릭 시 현재 언어 유지
- **요구사항**:
  - 현재 활성 언어 감지
  - 메뉴 링크에 현재 언어 코드 적용
  - /en이 강제로 붙는 문제 해결
  - 언어 변경 시 메뉴 링크도 동적 업데이트

### 6. 초기 언어 설정 및 저장
- **목적**: 사용자 장비의 기본 언어를 초기값으로 설정
- **요구사항**:
  - 브라우저 navigator.language 감지
  - 지원 언어(ko, en) 매핑
  - 변경된 언어 localStorage에 저장
  - 저장된 언어가 있으면 우선 적용
  - 언어 변경 시 즉시 반영

### 7. 투표 실시간 기능 및 애니메이션
- **목적**: 투표 결과의 실시간 업데이트 및 시각적 피드백
- **요구사항**:
  - Supabase Realtime을 통한 투표 데이터 실시간 구독
  - 투표 수 변동 시 카운트 애니메이션 (숫자 증가 효과)
  - 순위 변동 시 강력한 시각적 애니메이션 (위치 이동, 하이라이트)
  - 실시간 업데이트 시 부드러운 전환 효과
  - 네트워크 연결 상태 표시
  - 실시간 연결 실패 시 폴백 처리

## 기술적 구현 세부사항

### 데이터베이스 스키마
- 기존 Supabase 스키마 활용
- 투표 테이블: votes, vote_options, user_votes
- 사용자 테이블: users, user_profiles
- 실시간 구독을 위한 RLS 정책 설정

### 상태 관리
- Zustand를 활용한 전역 상태 관리
- 필터 상태, 언어 설정, 사용자 인증 상태
- localStorage와 동기화

### 실시간 기능
- Supabase Realtime channels 활용
- 투표 테이블 변경사항 구독
- 연결 상태 모니터링
- 자동 재연결 처리

### 애니메이션
- Framer Motion 라이브러리 활용
- 숫자 카운트 애니메이션
- 순위 변동 애니메이션
- 로딩 및 전환 효과

### 다국어 지원
- next-intl 라이브러리 활용
- 동적 언어 전환
- 메타데이터 다국어 지원
- SEO 최적화

## 성능 및 최적화
- ISR (Incremental Static Regeneration) 활용
- 이미지 최적화 (Next.js Image 컴포넌트)
- 코드 스플리팅 및 지연 로딩
- 실시간 연결 최적화 (불필요한 구독 방지)

## 보안 고려사항
- RLS (Row Level Security) 정책 적용
- 투표 중복 방지 로직
- 사용자 인증 상태 검증
- XSS 및 CSRF 방지

## 테스트 전략
- 단위 테스트: Jest + React Testing Library
- 통합 테스트: 실시간 기능 테스트
- E2E 테스트: 투표 플로우 전체 테스트
- 다국어 기능 테스트
- 브라우저 호환성 테스트

## 배포 및 모니터링
- Vercel을 통한 자동 배포
- 실시간 기능 모니터링
- 에러 추적 및 로깅
- 성능 메트릭 수집 