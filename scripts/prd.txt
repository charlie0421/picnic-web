# 픽닉 웹 프로젝트 개선 PRD (Product Requirements Document)

## 프로젝트 개요
픽닉 웹 프로젝트는 NextJS 기반의 웹 애플리케이션으로, Supabase를 데이터베이스 및 인증 서비스로 사용하고 있습니다. 현재 프로젝트는 기능적으로는 작동하지만, 아키텍처와 코드 품질 측면에서 개선이 필요합니다.

## 현재 문제점
1. **클라이언트/서버 코드 분리 미흡**: 현재 프로젝트는 클라이언트와 서버 코드가 명확히 분리되어 있지 않아 NextJS의 App Router 구조를 최대한 활용하지 못하고 있습니다.
2. **Supabase 클라이언트 분리 미흡**: 클라이언트용과 서버용 Supabase 클라이언트가 존재하지만, 일관성 있게 사용되지 않고 있습니다.
3. **SSR 활용 미흡**: 서버 사이드 렌더링(SSR)을 충분히 활용하지 못해 초기 로딩 성능과 SEO가 최적화되지 않았습니다.
4. **테스트 부재**: 유닛 테스트가 거의 없어 코드 품질과 안정성을 보장하기 어렵습니다.
5. **코드 커버리지 관리 부재**: 테스트 커버리지를 측정하고 관리하는 시스템이 없습니다.

## 개선 요구사항

### 1. 클라이언트/서버 코드 분리
- NextJS의 App Router 구조에 맞게 'use client'와 'use server' 지시문을 명확히 사용
- 서버 컴포넌트와 클라이언트 컴포넌트의 역할 명확히 분리
- 서버 컴포넌트에서는 데이터 페칭, 클라이언트 컴포넌트에서는 상호작용과 UI 관리

### 2. Supabase 클라이언트 구조 개선
- 클라이언트용 Supabase 클라이언트 (`@supabase/ssr`의 `createBrowserClient` 사용)
- 서버용 Supabase 클라이언트 (`@supabase/ssr`의 `createServerClient` 사용)
- 각 환경에 맞는 클라이언트를 일관되게 사용하도록 구조 개선
- 중복 코드 제거 및 모듈화 개선

### 3. SSR 최적화
- 가능한 모든 페이지에서 서버 컴포넌트 활용
- 데이터 페칭 로직을 서버 컴포넌트로 이동
- 정적 생성 가능한 페이지 식별 및 최적화
- 메타데이터 및 SEO 최적화

### 4. 유닛 테스트 추가
- Jest 및 React Testing Library를 활용한 테스트 환경 구성
- 주요 컴포넌트 및 유틸리티 함수에 대한 유닛 테스트 작성
- 비즈니스 로직에 대한 테스트 우선 구현
- 테스트 모범 사례 적용

### 5. 테스트 커버리지 관리
- Jest 커버리지 리포트 설정
- 코드 커버리지 목표 설정 (최소 70%)
- CI/CD 파이프라인에 커버리지 확인 절차 추가
- 커버리지 리포트 시각화

## 기대 효과
- 코드 구조 개선으로 유지보수성 향상
- SSR 최적화로 성능 및 SEO 개선
- 테스트 도입으로 버그 감소 및 안정성 향상
- 명확한 아키텍처 패턴으로 개발자 온보딩 시간 단축

## 우선순위
1. Supabase 클라이언트 구조 개선 (가장 시급)
2. 클라이언트/서버 코드 분리
3. SSR 최적화
4. 유닛 테스트 환경 구성
5. 테스트 작성 및 커버리지 관리 