# Task ID: 4
# Title: 현재 컴포넌트 구조 분석
# Status: done
# Dependencies: None
# Priority: medium
# Description: Analyze the current component structure to identify components that should be server components vs. client components.
# Details:
1. Review all components in the codebase
2. Identify components that primarily handle:
   - Data fetching (potential server components)
   - UI rendering without interactivity (potential server components)
   - Interactive elements (must be client components)
   - State management (must be client components)
3. Document current client-side data fetching that could be moved to server components
4. Identify components with mixed responsibilities that should be split
5. Create a migration plan for each component

Implementation approach:
- Create a spreadsheet or document listing all components
- Categorize each component as 'Server', 'Client', or 'Split needed'
- Note dependencies between components to understand migration impact

# Test Strategy:
This is an analysis task, so formal testing is not applicable. Success criteria will be a comprehensive component inventory with clear categorization and migration recommendations.

# Subtasks:
## 1. Create Component Inventory [done]
### Dependencies: None
### Description: Catalog all existing components in the application with their current rendering type, functionality, and usage patterns.
### Details:
Create a spreadsheet or document listing all components with columns for: component name, current rendering type (client/server/hybrid), primary functionality, where it's used in the application, and any special requirements (e.g., needs user interaction, relies on browser APIs, etc.). Include component file paths for easy reference.
<info added on 2025-05-22T15:09:17.754Z>
# 컴포넌트 인벤토리 초기 분석

## 디렉토리 구조 분석

프로젝트는 다음과 같은 주요 컴포넌트 디렉토리를 가지고 있습니다:

1. `components/client/` - 클라이언트 컴포넌트 (인터랙션이 필요한 UI)
2. `components/server/` - 서버 컴포넌트 (데이터 페칭 및 정적 렌더링)
3. `components/shared/` - 클라이언트/서버 로직을 모두 포함하는 복합 컴포넌트
4. `components/ui/` - 기본 UI 요소 (버튼, 스피너 등)
5. `components/layouts/` - 레이아웃 관련 컴포넌트
6. `components/providers/` - 컨텍스트 프로바이더
7. `components/features/` - 기능별 컴포넌트 (투표, 리워드, 인증 등)
8. `components/common/` - 공통 컴포넌트

현재 구조에서 일부 불일치가 발견되었습니다:
- `components/ui/LoadingSpinner.tsx`와 `components/client/LoadingSpinner.tsx`에 중복 정의
- 일부 레이아웃 컴포넌트가 'use client' 지시어를 사용하지만 폴더 분리는 안됨
- shared 컴포넌트는 서버/클라이언트 로직을 둘 다 가지고 있으나 분리 패턴이 일관적이지 않음

## 현재 컴포넌트 패턴 분석

### 클라이언트-서버 경계 패턴

1. **서버에서 데이터 가져오기 & 클라이언트에 전달 패턴**:
   - `ServerClientBoundary.tsx`에서 예시를 볼 수 있음
   - 서버 컴포넌트에서 데이터를 가져와 props로 클라이언트 컴포넌트에 전달

2. **래퍼-내부 구현 패턴**:
   - `VoteDetail.tsx` (래퍼) -> `VoteDetailServer.tsx` (서버 데이터 페칭) -> `VoteDetailClient.tsx` (클라이언트 상호작용)
   - 래퍼 컴포넌트가 서버/클라이언트 컴포넌트 간의 연결 역할

3. **Suspense 사용 패턴**:
   - 서버 컴포넌트에서 `Suspense`와 함께 데이터 로딩 상태 처리
   - 로딩 스켈레톤이나 상태 컴포넌트를 fallback으로 사용

### 주요 문제점

1. **일관성 부족**:
   - 일부 컴포넌트는 클라이언트/서버 분리가 명확하지만 다른 컴포넌트는 혼합되어 있음
   - 네이밍 규칙이 일관되지 않음 (예: `*Client.tsx` vs `*ClientComponent.tsx`)

2. **중복 코드**:
   - 같은 기능의 컴포넌트가 여러 위치에 존재 (예: LoadingSpinner)
   - 유사한 기능의 컴포넌트가 서로 다른 패턴으로 구현됨

3. **불명확한 의존성**:
   - 클라이언트 컴포넌트가 서버 컴포넌트에 직접 의존하는 경우가 있음
   - 서버/클라이언트 구분이 없는 공통 컴포넌트의 사용이 명확하지 않음

## 주요 컴포넌트 현황

| 컴포넌트 | 타입 | 설명 | 권장 타입 |
|---------|------|------|-----------|
| VoteListClient | 클라이언트 | 투표 목록 인터랙션 처리 | 클라이언트 |
| VoteListServer | 서버 | 투표 데이터 페칭 | 서버 |
| VoteDetail | 래퍼 | 투표 상세 경계 | 서버 |
| VoteDetailServer | 서버 | 투표 상세 데이터 페칭 | 서버 |
| VoteDetailClient | 클라이언트 | 투표 상세 인터랙션 | 클라이언트 |
| AuthCallback | 래퍼 | 인증 콜백 경계 | 서버 |
| AuthCallbackClient | 클라이언트 | 인증 처리 | 클라이언트 |
| SupabaseProvider | 클라이언트 | Supabase 컨텍스트 | 클라이언트 |
| LoadingSpinner | 클라이언트/UI | 로딩 인디케이터 | 클라이언트 |
| LoadingState | 서버 | 서버 로딩 상태 | 서버 |
| Header | 클라이언트 | 헤더 레이아웃 | 클라이언트 |
| Footer | 클라이언트 | 푸터 레이아웃 | 클라이언트 |
| Menu | 클라이언트 | 메뉴 레이아웃 | 클라이언트 |
| SocialLoginButtons | 클라이언트 | 소셜 로그인 버튼 | 클라이언트 |
</info added on 2025-05-22T15:09:17.754Z>

## 2. Server vs. Client Component Analysis [done]
### Dependencies: 4.1
### Description: Analyze each component to determine optimal rendering strategy (server or client component) based on its functionality and requirements.
### Details:
For each component in the inventory, evaluate: Does it need interactivity? Does it use browser-only APIs? Does it use hooks? Does it need access to request-time data? Mark each component with a recommended rendering strategy and document the reasoning. Flag components that may need to be split into server/client parts.
<info added on 2025-05-22T15:11:03.319Z>
# 서버 vs. 클라이언트 컴포넌트 분석

## 현재 컴포넌트 패턴

프로젝트에서 사용 중인 주요 패턴을 분석한 결과는 다음과 같습니다:

### 1. 서버 컴포넌트 패턴

1. **순수 서버 컴포넌트**:
   - `use client` 지시어가 없음
   - 데이터 페칭을 직접 수행 (getList, getById 등 사용)
   - Suspense를 사용한 로딩 상태 처리
   - 비동기 함수 (async/await) 사용
   - 예: `components/server/ParallelDataFetching.tsx`, `components/server/NestedDataFetching.tsx`

2. **데이터 페칭 계층**:
   - 서버 컴포넌트 내에서 중첩된 데이터 페칭 로직 구현
   - 우선순위에 따른 계층적 로딩 구현
   - 예: `NestedDataFetching.tsx`의 계층적 Suspense 경계

3. **서버-클라이언트 경계**:
   - 서버에서 데이터를 가져와 props로 클라이언트 컴포넌트에 전달
   - 클라이언트 측 인터랙션을 위해 데이터를 초기값으로 제공
   - 예: `components/server/ServerClientBoundary.tsx`, `components/server/VoteDetailServer.tsx`

### 2. 클라이언트 컴포넌트 패턴

1. **순수 클라이언트 컴포넌트**:
   - 파일 상단에 `'use client'` 지시어 사용
   - React 훅 사용 (`useState`, `useEffect`, `useCallback` 등)
   - 이벤트 핸들러 구현 (onClick, onChange 등)
   - 예: `components/client/VoteClientComponent.tsx`, `components/client/RetryButton.tsx`

2. **초기 데이터 수신 패턴**:
   - 서버 컴포넌트로부터 초기 데이터를 props로 받음
   - 클라이언트 상태 관리에 초기 데이터 사용
   - 예: `components/shared/VoteDetail/VoteDetailClient.tsx`

3. **클라이언트측 데이터 업데이트**:
   - 필요시 클라이언트에서 추가 데이터 요청
   - 실시간 업데이트 및 사용자 인터랙션 처리
   - 예: `VoteDetailClient.tsx`의 refreshVoteData 메서드

### 3. 래퍼-구현 패턴 (공유 컴포넌트)

1. **경량 래퍼 패턴**:
   - 경량 서버 컴포넌트가 실제 구현 컴포넌트를 래핑
   - 페이지에서는 래퍼 컴포넌트만 가져와 사용
   - 예: `components/shared/VoteDetail/VoteDetail.tsx`가 `VoteDetailServer`를 래핑

2. **컴포넌트 분리 패턴**:
   - 컴포넌트 로직을 서버/클라이언트 부분으로 명확히 분리
   - 디렉토리 구조로 관계 표현
   - 예: `VoteDetail`, `VoteDetailServer`, `VoteDetailClient` 3단계 구조

## 최적 렌더링 전략 분석

아래는 주요 컴포넌트 타입별 최적 렌더링 전략 분석입니다:

### 서버 컴포넌트로 유지해야 할 컴포넌트

1. **데이터 페칭 컴포넌트**:
   - `VoteDetailServer` - 투표 상세 데이터 가져오기
   - `VoteListServer` - 투표 목록 데이터 가져오기
   - `ParallelDataFetching` - 여러 데이터 소스 병렬 로딩
   - `NestedDataFetching` - 계층적 데이터 로딩

2. **로딩/에러 상태 컴포넌트**:
   - `LoadingState` - 로딩 인디케이터
   - `ErrorState` - 오류 표시
   - `NotFoundState` - 데이터 없음 표시
   - `VoteDetailSkeleton` - 투표 상세 스켈레톤

3. **정적 UI 컴포넌트**:
   - 페이지의 정적 레이아웃 요소
   - SEO 관련 메타데이터 컴포넌트

### 클라이언트 컴포넌트로 유지해야 할 컴포넌트

1. **인터랙티브 UI 컴포넌트**:
   - `VoteDetailClient` - 투표 상세 인터랙션
   - `VoteListClient` - 투표 목록 인터랙션
   - `VoteClientComponent` - 투표 관련 클라이언트 로직
   - `RetryButton` - 재시도 버튼

2. **폼 및 입력 컴포넌트**:
   - `SocialLoginButtons` - 소셜 로그인 버튼
   - 폼 컴포넌트들 (입력, 버튼 등)

3. **상태 관리 컴포넌트**:
   - `SupabaseProvider` - Supabase 컨텍스트 제공
   - `AuthProvider` - 인증 컨텍스트 제공
   - `NavigationProvider` - 네비게이션 컨텍스트 제공

4. **클라이언트 전용 API 사용 컴포넌트**:
   - `AdSense` - 광고 스크립트 로드
   - 로컬 스토리지, 쿠키 등을 사용하는 컴포넌트

### 분리/개선이 필요한 컴포넌트

1. **레이아웃 컴포넌트**:
   - `Header.tsx` - 클라이언트 컴포넌트이나 일부 정적 UI는 서버로 분리 가능
   - `Footer.tsx` - 정적 부분은 서버 컴포넌트로 분리 가능
   - `Menu.tsx` - 정적 메뉴 구조는 서버, 인터랙션은 클라이언트로 분리 가능

2. **중복 컴포넌트**:
   - `LoadingSpinner` - UI와 client 디렉토리에 중복 존재

3. **불일치 패턴**:
   - 일부 `layout.tsx` 파일들이 서버/클라이언트 패턴을 일관되게 따르지 않음
   - 일부 래퍼 컴포넌트가 간접적인 서버 컴포넌트를 사용하지 않고 직접 클라이언트 컴포넌트 사용

## 개선 방향 제안

1. **명확한 책임 분리**:
   - 데이터 페칭은 서버 컴포넌트에서만 수행
   - 사용자 인터랙션은 클라이언트 컴포넌트에서만 처리
   - UI 렌더링은 가능한 서버 컴포넌트에서 수행

2. **일관된 패턴 적용**:
   - 공유 컴포넌트는 항상 서버/클라이언트 구분 명확히 적용
   - 네이밍 규칙 표준화 (*Server.tsx, *Client.tsx)
   - 디렉토리 구조 정리 (client/, server/, shared/ 구분 명확히)

3. **최적화 기회**:
   - 레이아웃 컴포넌트의 정적/동적 부분 분리
   - 중복 컴포넌트 통합
   - 클라이언트 번들 크기 최소화를 위한 컴포넌트 분할

이 분석을 바탕으로 다음 서브태스크에서는 의존성 맵핑을 수행하여 컴포넌트 간의 관계와 잠재적인 문제점을 시각화할 예정입니다.
</info added on 2025-05-22T15:11:03.319Z>

## 3. Dependency Mapping [done]
### Dependencies: 4.1, 4.2
### Description: Create a visual dependency map showing relationships between components and identify potential issues in the current structure.
### Details:
Generate a directed graph showing component dependencies. Identify circular dependencies, client components importing server components, and other architectural issues. Document potential refactoring needs based on Next.js server/client component rules. Use a tool like Mermaid or draw.io for visualization.

## 4. Migration Planning [done]
### Dependencies: 4.2, 4.3
### Description: Develop a phased migration plan for transitioning components to their optimal rendering strategy with minimal disruption.
### Details:
Create a prioritized list of components to migrate, starting with leaf components and working up the tree. Document required changes for each component, including: file renaming (.js/.jsx to .server.js/.client.js), code splitting needs, prop adjustments, and potential performance impacts. Include testing strategies for each migration phase.

