# Task ID: 6
# Title: 'use client' 지시문을 사용한 클라이언트 컴포넌트 리팩토링
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Properly mark interactive components with the 'use client' directive and ensure they follow client component best practices.
# Details:
1. Add 'use client' directive to all components that:
   - Use hooks (useState, useEffect, etc.)
   - Handle user interactions (onClick, onChange, etc.)
   - Use browser-only APIs
2. Ensure client components are properly importing the browser Supabase client
3. Move state management and event handlers to client components
4. Minimize the size of client component trees by keeping as much as possible in server components

Example refactoring:
```typescript
// Before: Mixed component with data fetching and interactivity
import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase'

export default function PostList() {
  const [posts, setPosts] = useState([])
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    async function fetchPosts() {
      const { data, error } = await supabase.from('posts').select('*')
      if (!error) setPosts(data)
      setLoading(false)
    }
    fetchPosts()
  }, [])
  
  return (
    <div>
      {loading ? <p>Loading...</p> : (
        <ul>
          {posts.map(post => <li key={post.id}>{post.title}</li>)}
        </ul>
      )}
    </div>
  )
}

// After: Split into server and client components
// app/posts/page.tsx (Server Component)
import { createServerSupabaseClient } from '@/lib/supabase/server'
import PostList from './PostList'

async function getPosts() {
  const supabase = createServerSupabaseClient()
  const { data, error } = await supabase.from('posts').select('*')
  if (error) throw new Error('Failed to fetch posts')
  return data
}

export default async function PostsPage() {
  const posts = await getPosts()
  return <PostList initialPosts={posts} />
}

// app/posts/PostList.tsx (Client Component)
'use client'

import { useState } from 'react'

export default function PostList({ initialPosts }) {
  const [posts, setPosts] = useState(initialPosts)
  
  return (
    <ul>
      {posts.map(post => <li key={post.id}>{post.title}</li>)}
    </ul>
  )
}
```

# Test Strategy:
1. Verify that all interactive components have the 'use client' directive
2. Test that client components correctly receive and render data from server components
3. Test interactive features like button clicks and form submissions
4. Ensure client components don't unnecessarily re-render

# Subtasks:
## 1. Component Identification and Analysis [pending]
### Dependencies: None
### Description: Identify all components that need to be refactored as client components and analyze their current implementation.
### Details:
Create an inventory of all components in the application. Analyze each component to determine if it needs the 'use client' directive based on its interactivity, event handlers, and state management. Document the components that require refactoring and their dependencies.

## 2. Add 'use client' Directives [pending]
### Dependencies: 6.1
### Description: Add the 'use client' directive to all identified components that require client-side functionality.
### Details:
Based on the analysis from subtask 1, systematically add the 'use client' directive at the top of each component file that requires client-side functionality. Ensure the directive is placed before any imports or other code in the file.

## 3. State Management Migration [pending]
### Dependencies: 6.2
### Description: Refactor state management in components to align with the client component architecture.
### Details:
Review all state management code in the identified components. Move React hooks (useState, useReducer, useContext) to client components. Ensure state is properly contained within client boundaries. Consider implementing state lifting where necessary to maintain proper data flow between components.

## 4. Event Handler Refactoring [pending]
### Dependencies: 6.2, 6.3
### Description: Refactor event handlers to ensure they are properly implemented in client components.
### Details:
Identify all event handlers (onClick, onChange, onSubmit, etc.) in the components. Ensure they are contained within client components. Refactor any event handling logic that spans across component boundaries. Test each handler to verify functionality is maintained after refactoring.

## 5. Component Tree Optimization [pending]
### Dependencies: 6.3, 6.4
### Description: Optimize the component tree to minimize client components and improve performance.
### Details:
Review the refactored component structure to identify opportunities for optimization. Split components to separate client and server parts where possible. Minimize the number of client components to reduce JavaScript bundle size. Implement performance testing to ensure the refactored components maintain or improve application performance.

