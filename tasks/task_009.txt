# Task ID: 9
# Title: Jest 및 React Testing Library 설정
# Status: done
# Dependencies: None
# Priority: medium
# Description: Configure Jest and React Testing Library for the project to enable component and utility testing.
# Details:
1. Install required dependencies:
   - jest
   - @testing-library/react
   - @testing-library/jest-dom
   - jest-environment-jsdom
2. Configure Jest in package.json or jest.config.js
3. Setup test utilities and mocks
4. Configure TypeScript for testing

Implementation steps:
```bash
npm install --save-dev jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom @testing-library/user-event
```

Create jest.config.js:
```javascript
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  collectCoverage: true,
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/_*.{js,jsx,ts,tsx}',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
  ],
}

module.exports = createJestConfig(customJestConfig)
```

Create jest.setup.js:
```javascript
import '@testing-library/jest-dom'

// Mock Supabase
jest.mock('@/lib/supabase/client', () => ({
  createBrowserSupabaseClient: jest.fn(() => ({
    auth: {
      getUser: jest.fn(),
      signIn: jest.fn(),
      signOut: jest.fn(),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        eq: jest.fn(() => ({
          data: [],
          error: null,
        })),
      })),
    })),
  })),
}))

jest.mock('@/lib/supabase/server', () => ({
  createServerSupabaseClient: jest.fn(() => ({
    auth: {
      getUser: jest.fn(),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        eq: jest.fn(() => ({
          data: [],
          error: null,
        })),
      })),
    })),
  })),
}))
```

# Test Strategy:
1. Verify Jest configuration by running a simple test
2. Test that mocks are working correctly
3. Ensure test environment correctly simulates the Next.js environment
4. Verify code coverage reporting works

# Subtasks:
## 1. Install Testing Dependencies [done]
### Dependencies: None
### Description: Install Jest, React Testing Library, and other necessary testing packages
### Details:
Install Jest, @testing-library/react, @testing-library/jest-dom, @testing-library/user-event, and jest-environment-jsdom. Update package.json with appropriate test scripts. Configure any necessary TypeScript settings for Jest.
<info added on 2025-05-22T16:01:20.749Z>
프로젝트에는 이미 필요한 모든 테스트 종속성이 설치되어 있습니다:

1. 기본 테스트 라이브러리:
   - jest: ^29.7.0
   - jest-environment-jsdom: ^29.7.0
   - @types/jest: ^29.5.14

2. React Testing Library:
   - @testing-library/react: ^16.3.0
   - @testing-library/jest-dom: ^6.6.3
   - @testing-library/user-event: ^14.6.1

3. 기타 필요한 도구:
   - ts-node: ^10.9.2 (TypeScript 테스트 지원)
   - tsx: ^4.19.3 (TypeScript 실행)

4. 테스트 스크립트:
   package.json에는 다양한 테스트 스크립트가 이미 구성되어 있습니다:
   - 기본 테스트: npm test
   - 감시 모드: npm run test:watch
   - 커버리지 보고서: npm run test:coverage
   - CI 환경용: npm run test:ci
   - 변경된 파일만: npm run test:changed
   - 스냅샷 업데이트: npm run test:update
   - 특정 디렉토리 테스트: test:utils, test:components, test:libs, test:api
   - 빠른 실패: npm run test:fail-fast
   - 디버깅: npm run test:debug

추가적으로 생성된 설정 파일:

1. __tests__/setup.ts:
   - 서버 컴포넌트 테스트를 위한 React.cache 및 React.use 모킹
   - Next.js의 캐시 관련 함수 모킹
   - TextEncoder/TextDecoder 폴리필
   - 불필요한 콘솔 경고 필터링

2. __tests__/utils/test-utils.tsx:
   - 커스텀 render 함수 (프로바이더 포함)
   - userEvent 설정
   - 테스트 ID 생성 유틸리티

기존 구성:

1. jest.config.js:
   - Next.js 통합 (nextJest)
   - 모듈 경로 별칭
   - 커버리지 설정 및 임계값
   - 테스트 타임아웃 및 캐시 설정

2. jest.setup.js:
   - next/navigation 모킹
   - Supabase 클라이언트 모킹
   - next-intl 모킹
   - 로컬 스토리지 및 쿠키 모킹
</info added on 2025-05-22T16:01:20.749Z>

## 2. Configure Jest for Next.js [done]
### Dependencies: 9.1
### Description: Set up Jest configuration to work with Next.js environment
### Details:
Create jest.config.js file with appropriate Next.js settings. Configure moduleNameMapper for handling CSS, image imports, and other assets. Set up the correct test environment and transform settings for JSX/TSX files.
<info added on 2025-05-22T16:01:56.920Z>
프로젝트에는 이미 완전한 Jest 구성이 구현되어 있습니다:

1. jest.config.js:
   - nextJest를 사용한 Next.js 통합 (환경 변수, next.config.js 자동 로딩)
   - @/ 경로 지원을 위한 모듈 경로 별칭
   - jest-environment-jsdom 테스트 환경
   - 디렉토리별 임계값을 포함한 코드 커버리지 설정
   - 캐시 사용 및 병렬 실행을 통한 테스트 최적화

2. jest.setup.js:
   - Testing Library DOM 확장 로드
   - Next.js 내장 함수 및 컴포넌트 모킹 (useRouter, usePathname 등)
   - Supabase 클라이언트 모킹
   - next-intl 다국어 지원 모킹
   - localStorage, cookies 등 브라우저 API 모킹

3. __tests__/setup.ts:
   - 서버 컴포넌트 지원을 위한 React.cache 및 React.use 모킹
   - revalidatePath, revalidateTag 등 Next.js 캐시 관련 함수 모킹
   - TextEncoder/TextDecoder 폴리필 추가
   - 특정 콘솔 경고 필터링

4. __tests__/utils/test-utils.tsx:
   - 모든 필요한 프로바이더를 포함한 커스텀 render 함수
   - userEvent 통합 사용자 상호작용 테스트 지원
   - 테스트 ID 생성 유틸리티

이 구성으로 서버 컴포넌트 테스트, Next.js API 모킹, Supabase 통합 테스트, 성능 최적화 및 코드 품질 관리가 가능합니다.
</info added on 2025-05-22T16:01:56.920Z>

## 3. Create Mock Setup for External Dependencies [done]
### Dependencies: 9.2
### Description: Set up mocks for Supabase, Next.js router, and other external services
### Details:
Create __mocks__ directory with mock implementations for Supabase client, Next.js useRouter, and any other external services. Set up a test utilities file with common testing functions and providers for wrapping components during tests.
<info added on 2025-05-22T16:05:00.364Z>
외부 종속성을 위한 모의 설정을 성공적으로 구현했습니다. 다음과 같은 모의 구현을 생성했습니다:

1. Next.js 관련 모의 구현:
   - `__mocks__/next/navigation.js`: Next.js의 라우팅 관련 기능들 (useRouter, usePathname, useParams, redirect 등)을 모의 구현하여 테스트에서 사용할 수 있게 합니다. 또한 테스트에서 라우터 상태를 조작할 수 있는 유틸리티 함수들도 제공합니다.
   - `__mocks__/next/headers.js`: 쿠키와 헤더 관련 함수들을 모의 구현하고 테스트에서 이들을 조작할 수 있는 유틸리티 함수들을 제공합니다.

2. next-intl 모의 구현:
   - `__mocks__/next-intl/index.js`: 다국어 지원 라이브러리의 주요 기능들 (useTranslations, useLocale, NextIntlClientProvider 등)을 모의 구현하고, 테스트에서 로케일과 번역을 설정할 수 있는 유틸리티 함수들을 제공합니다.

3. Supabase 관련 모의 구현:
   - `__mocks__/@supabase/ssr.js`: Supabase SSR 클라이언트의 주요 기능 (인증, 데이터 액세스 등)을 모의 구현하고, 테스트에서 인증 상태와 데이터를 설정할 수 있는 유틸리티 함수들을 제공합니다.
   - `__tests__/utils/mockSupabase.ts`: Supabase 클라이언트를 쉽게 모킹하기 위한 유틸리티 함수들과 기본 사용자/세션 정보를 제공합니다. 특히 여러 Supabase 관련 모듈을 일관되게 모킹할 수 있는 setupSupabaseMock과 clearSupabaseMocks 함수를 제공합니다.

모든 모의 구현은 다음과 같은 특징을 가지고 있습니다:

1. 테스트 편의성: 모든 모의 구현은 일관된 인터페이스와 기본값을 제공하여 테스트 코드를 간결하게 유지할 수 있습니다.
2. 상태 관리: 테스트에서 모의 상태를 쉽게 조작할 수 있는 유틸리티 함수들을 제공합니다.
3. 타입 안전성: TypeScript를 사용하여 타입 안전성을 보장하며, 필요한 경우 타입 단언을 사용하여 호환성 문제를 해결합니다.

이러한 모의 구현을 통해 다음과 같은 테스트 시나리오를 지원할 수 있습니다:
- 인증된 사용자와 비인증 사용자의 경험 테스트
- 다양한 로케일에서의 다국어 지원 테스트
- 라우팅과 리디렉션 테스트
- 서버 컴포넌트와 클라이언트 컴포넌트 간의 상호작용 테스트
- 데이터 페칭 시나리오 테스트

기존 jest.setup.js 파일과 함께 이러한 모의 구현은 프로젝트의 모든 주요 외부 종속성을 효과적으로 테스트할 수 있는 포괄적인 환경을 제공합니다.
</info added on 2025-05-22T16:05:00.364Z>

## 4. Create Initial Component Tests [done]
### Dependencies: 9.3
### Description: Write basic test cases for a simple component to verify the testing setup
### Details:
Create a test file for a simple component (e.g., Button or Header). Write tests for rendering, user interactions, and any component-specific logic. Ensure tests pass and the setup is working correctly before proceeding with more complex component testing.

