# Task ID: 9
# Title: Jest 및 React Testing Library 설정
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Configure Jest and React Testing Library for the project to enable component and utility testing.
# Details:
1. Install required dependencies:
   - jest
   - @testing-library/react
   - @testing-library/jest-dom
   - jest-environment-jsdom
2. Configure Jest in package.json or jest.config.js
3. Setup test utilities and mocks
4. Configure TypeScript for testing

Implementation steps:
```bash
npm install --save-dev jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom @testing-library/user-event
```

Create jest.config.js:
```javascript
const nextJest = require('next/jest')

const createJestConfig = nextJest({
  dir: './',
})

const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  testEnvironment: 'jest-environment-jsdom',
  moduleNameMapper: {
    '^@/(.*)$': '<rootDir>/src/$1',
  },
  collectCoverage: true,
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/_*.{js,jsx,ts,tsx}',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
  ],
}

module.exports = createJestConfig(customJestConfig)
```

Create jest.setup.js:
```javascript
import '@testing-library/jest-dom'

// Mock Supabase
jest.mock('@/lib/supabase/client', () => ({
  createBrowserSupabaseClient: jest.fn(() => ({
    auth: {
      getUser: jest.fn(),
      signIn: jest.fn(),
      signOut: jest.fn(),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        eq: jest.fn(() => ({
          data: [],
          error: null,
        })),
      })),
    })),
  })),
}))

jest.mock('@/lib/supabase/server', () => ({
  createServerSupabaseClient: jest.fn(() => ({
    auth: {
      getUser: jest.fn(),
    },
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        eq: jest.fn(() => ({
          data: [],
          error: null,
        })),
      })),
    })),
  })),
}))
```

# Test Strategy:
1. Verify Jest configuration by running a simple test
2. Test that mocks are working correctly
3. Ensure test environment correctly simulates the Next.js environment
4. Verify code coverage reporting works

# Subtasks:
## 1. Install Testing Dependencies [pending]
### Dependencies: None
### Description: Install Jest, React Testing Library, and other necessary testing packages
### Details:
Install Jest, @testing-library/react, @testing-library/jest-dom, @testing-library/user-event, and jest-environment-jsdom. Update package.json with appropriate test scripts. Configure any necessary TypeScript settings for Jest.

## 2. Configure Jest for Next.js [pending]
### Dependencies: 9.1
### Description: Set up Jest configuration to work with Next.js environment
### Details:
Create jest.config.js file with appropriate Next.js settings. Configure moduleNameMapper for handling CSS, image imports, and other assets. Set up the correct test environment and transform settings for JSX/TSX files.

## 3. Create Mock Setup for External Dependencies [pending]
### Dependencies: 9.2
### Description: Set up mocks for Supabase, Next.js router, and other external services
### Details:
Create __mocks__ directory with mock implementations for Supabase client, Next.js useRouter, and any other external services. Set up a test utilities file with common testing functions and providers for wrapping components during tests.

## 4. Create Initial Component Tests [pending]
### Dependencies: 9.3
### Description: Write basic test cases for a simple component to verify the testing setup
### Details:
Create a test file for a simple component (e.g., Button or Header). Write tests for rendering, user interactions, and any component-specific logic. Ensure tests pass and the setup is working correctly before proceeding with more complex component testing.

