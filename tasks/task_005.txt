# Task ID: 5
# Title: 서버 컴포넌트 데이터 페칭 구현
# Status: done
# Dependencies: 2, 4
# Priority: high
# Description: Refactor data fetching logic to use server components with the server Supabase client.
# Details:
1. Create utility functions for common data fetching operations using server Supabase client
2. Move data fetching from client components to server components
3. Implement proper error handling for server-side data fetching
4. Use React Suspense for loading states where appropriate

Example implementation:
```typescript
// app/posts/page.tsx
import { createServerSupabaseClient } from '@/lib/supabase/server'

async function getPosts() {
  const supabase = createServerSupabaseClient()
  const { data, error } = await supabase
    .from('posts')
    .select('*')
    .order('created_at', { ascending: false })
  
  if (error) {
    console.error('Error fetching posts:', error)
    throw new Error('Failed to fetch posts')
  }
  
  return data
}

export default async function PostsPage() {
  const posts = await getPosts()
  
  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {posts.map(post => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  )
}
```

# Test Strategy:
1. Write unit tests for data fetching utility functions
2. Test error handling scenarios
3. Create integration tests that verify server components correctly fetch and render data
4. Mock Supabase responses for testing

# Subtasks:
## 1. Create server-side data fetching utility functions [done]
### Dependencies: None
### Description: Develop reusable utility functions for server-side data fetching using Supabase server client
### Details:
Create a set of utility functions that leverage the Supabase server client for data fetching. These functions should handle common data access patterns, support pagination, filtering, and sorting. Implement proper typing for all functions and ensure they're optimized for server component usage. Include documentation for each function explaining its purpose and usage patterns.
<info added on 2025-05-22T15:48:29.922Z>
After analyzing the server-side data fetching utilities in our project, I've found that we already have comprehensive implementations in place:

1. Server Supabase client utilities in `lib/supabase/server.ts`:
   - `createServerSupabaseClient()` 
   - `createServerSupabaseClientWithCookies()`
   - `getServerSession()`
   - `getServerUser()`
   - `withAuth()`

2. Comprehensive data fetching utilities in `lib/data-fetching/supabase-service.ts`:
   - `getById`, `getList`, `getPaginatedList`, `getByIdOrNotFound`
   - `getManyByIds`, `bulkInsert`, `bulkUpdate`, `callRpcFunction`
   - All with caching, error handling, and type safety

3. Simplified fetcher functions in `lib/data-fetching/fetchers.ts`:
   - `fetchFromSupabase`, `fetchById`, `fetchList`, `fetchApi`

4. Domain-specific service functions like those in `lib/data-fetching/vote-service.ts`

5. Cached client creation functions in `utils/supabase-server-client.ts`

These utilities effectively leverage modern Next.js patterns including React's `cache`, Next.js's `unstable_cache` and `revalidatePath`, proper separation of concerns, and consistent error handling.

Given the comprehensive nature of existing utilities, we should focus on migrating client component data fetching to server components rather than developing additional utility functions.
</info added on 2025-05-22T15:48:29.922Z>

## 2. Implement error handling patterns for server components [done]
### Dependencies: 5.1
### Description: Design and implement consistent error handling patterns for server component data fetching
### Details:
Create error boundary components specifically designed for server components. Implement standardized error handling patterns including error logging, fallback UI components, and retry mechanisms. Ensure errors are properly typed and categorized (network errors, authentication errors, etc.). Develop a strategy for handling errors at different levels of the component tree.
<info added on 2025-05-22T15:54:10.843Z>
서버 컴포넌트를 위한 오류 처리 패턴 분석 결과, 프로젝트는 이미 포괄적인 오류 처리 시스템을 구현하고 있습니다:

1. 표준화된 오류 객체와 코드 체계:
   - `lib/supabase/error.ts`의 `AppError` 클래스와 `ErrorCode` 열거형
   - `handleSupabaseError` 함수로 PostgreSQL 오류를 표준화된 애플리케이션 오류로 변환
   - `handleError` 함수로 일반 오류를 애플리케이션 오류로 변환

2. 다양한 오류 컴포넌트:
   - `components/server/ErrorBoundary.tsx`: Next.js의 error.tsx와 함께 사용되는 클라이언트 컴포넌트
   - `components/server/ErrorState.tsx`: 오류 메시지와 코드를 표시하는 재사용 가능한 컴포넌트
   - `components/server/NotFoundState.tsx`: 404 오류에 특화된 사용자 친화적 컴포넌트

3. 비동기 오류 처리 패턴:
   - `components/server/AsyncBoundary.tsx`: 서버 컴포넌트의 비동기 작업을 try/catch로 감싸고 Suspense와 함께 오류 처리

4. 실제 구현 사례:
   - `app/[lang]/(main)/vote/[id]/error.tsx`: 투표 상세 페이지의 오류 처리
   - `app/[lang]/(main)/vote/[id]/not-found.tsx`: 투표가 없을 때의 처리

5. 고급 데이터 페칭 패턴:
   - `components/server/NestedDataFetching.tsx`: 중첩된 Suspense를 활용한 계층적 데이터 로딩 패턴
   - `components/server/ParallelDataFetching.tsx`: 병렬 데이터 페칭 패턴

기존 오류 처리 패턴은 다음과 같은 모범 사례를 따르고 있습니다:
- 일관된 오류 타입 사용: 모든 오류가 `AppError` 클래스로 표준화
- 세분화된 오류 코드: `ErrorCode` 열거형을 통해 다양한 오류 상황 분류
- 사용자 친화적 메시지: `toFriendlyMessage()` 메서드로 기술적 오류를 사용자가 이해할 수 있는 메시지로 변환
- 중첩된 오류 경계: 전체 페이지가 아닌 특정 영역만 오류 UI로 대체 가능
- 로깅: 오류 발생 시 콘솔에 로깅하며, 추후 Sentry 등의 서비스 통합 가능성 있음

현재의 오류 처리 패턴은 Next.js 서버 컴포넌트에 적합하고 충분히 포괄적이므로, 추가적인 구현보다는 기존 패턴을 활용하여 클라이언트 컴포넌트에서 서버 컴포넌트로 데이터 페칭을 마이그레이션하는 작업에 집중하는 것이 권장됩니다.
</info added on 2025-05-22T15:54:10.843Z>

## 3. Integrate React Suspense with server components [done]
### Dependencies: 5.1, 5.2
### Description: Set up React Suspense boundaries and loading states for server component data fetching
### Details:
Implement Suspense boundaries at appropriate levels in the component hierarchy. Create loading UI components that provide meaningful feedback during data fetching. Ensure Suspense works correctly with nested server components and parallel data fetching. Test various network conditions to verify the loading states behave as expected.
<info added on 2025-05-22T15:55:18.346Z>
프로젝트에서 구현된 React Suspense와 서버 컴포넌트 통합 패턴 분석:

1. 기본적인 Suspense 경계 패턴:
   - `app/[lang]/(main)/vote/[id]/page.tsx`: 투표 상세 페이지에서 `<Suspense>` 경계 활용
   - `components/server/VoteDetailServer.tsx`: 서버 컴포넌트 내 Suspense 사용

2. 로딩 상태 처리 컴포넌트:
   - `components/server/LoadingState.tsx`: 재사용 가능한 로딩 컴포넌트
   - `components/server/VoteDetailSkeleton.tsx`: 스켈레톤 UI 컴포넌트
   - `app/[lang]/(main)/vote/[id]/loading.tsx`: Next.js 자동 로딩 상태 처리

3. 고급 Suspense 패턴:
   - `components/server/NestedDataFetching.tsx`: 중첩 Suspense 경계 패턴
   - `components/server/ParallelDataFetching.tsx`: 병렬 데이터 요청 처리
   - `components/server/ServerClientBoundary.tsx`: 서버-클라이언트 데이터 전달 패턴

4. Suspense와 오류 처리 통합:
   - `components/server/AsyncBoundary.tsx`: Suspense와 try/catch 결합 컴포넌트

5. 캐싱 통합:
   - `lib/data-fetching/` 내 데이터 페칭 함수들은 React `cache` 함수로 감싸져 중복 요청 방지

현재 구현은 다음 모범 사례를 따름:
- 적절한 계층 구조의 Suspense 경계 배치
- 스켈레톤 UI 및 로딩 상태 컴포넌트 활용
- 데이터 의존성에 따른 중첩/병렬 Suspense 경계 활용
- Suspense와 오류 처리의 효과적 통합

개선 필요 사항:
- `app/[lang]/(main)/media/page.tsx` 등 클라이언트 측 `useState`/`useEffect` 데이터 페칭 사용 페이지들
- 이러한 페이지들을 서버 컴포넌트와 Suspense 활용 방식으로 리팩토링 필요
</info added on 2025-05-22T15:55:18.346Z>

## 4. Refactor existing components to use server-side data fetching [done]
### Dependencies: 5.1, 5.2, 5.3
### Description: Convert client components to server components where appropriate and update data fetching patterns
### Details:
Identify components that can be converted to server components. Refactor these components to use the new server-side data fetching utilities. Update component props and interfaces as needed. Ensure proper separation between server and client components. Test each refactored component to verify functionality remains intact.
<info added on 2025-05-22T15:58:59.658Z>
데이터 페칭 아키텍처 분석 결과:

1. 현재 구현된 데이터 페칭 시스템:
   - React.cache를 활용한 컴포넌트 트리 캐싱 (lib/data-fetching 디렉토리)
   - 세분화된 데이터 페칭 유틸리티 (getById, getList, getPaginatedList 등)
   - 타입 안전성이 보장된 Supabase 연동
   - 표준화된 오류 처리 및 로깅 시스템
   - 다양한 캐싱 전략 지원 (CacheOptions 인터페이스)
   - 서버/클라이언트 경계 관리 메커니즘

2. 서버 컴포넌트 리팩토링 지침:
   - MediaServer.tsx 컴포넌트를 참고하여 클라이언트 컴포넌트에서 서버 컴포넌트로 마이그레이션
   - 데이터 집약적 페이지에서는 prefetch 함수 활용
   - 필요시 SWR이나 React Query와 같은 클라이언트 상태 관리 라이브러리 도입 고려
   - 서버 컴포넌트에서 데이터를 가져와 클라이언트 컴포넌트로 전달하는 패턴 구현

3. 최적화 포인트:
   - 중복 요청 방지를 위한 React.cache 활용
   - 선언적 데이터 페칭 패턴 적용
   - 캐시 태그를 활용한 선택적 캐시 무효화 구현
   - generateCacheTag 함수로 캐시 일관성 유지
</info added on 2025-05-22T15:58:59.658Z>

## 5. Optimize performance of server component data fetching [done]
### Dependencies: 5.4
### Description: Implement caching, prefetching, and other performance optimizations for server components
### Details:
Implement React Cache for data fetching results. Set up appropriate cache invalidation strategies. Add prefetching for anticipated user interactions. Measure and optimize server component rendering performance. Implement waterfall prevention techniques for parallel data fetching. Document performance improvements and best practices for the team.

