# PRD: 클라이언트 사이드 Supabase 연결 리팩토링 및 API 레이어 전환

## 1. 개요 (Overview)

본 문서는 현재 클라이언트 측에서 직접 Supabase 데이터베이스와 통신하는 구조를 백엔드 API 레이어를 통해 통신하도록 리팩토링하는 프로젝트의 요구사항을 정의합니다. 이 아키텍처 변경은 보안 강화, 성능 최적화, 그리고 유지보수성 향상을 목표로 합니다.

## 2. 배경 (Background)

현재 Picnic Web 애플리케이션은 다수의 클라이언트 컴포넌트에서 `@supabase/ssr`의 `createBrowserClient`를 사용하여 직접 Supabase와 통신하고 있습니다. 이 방식은 다음과 같은 잠재적 문제점을 내포하고 있습니다.

- **보안 취약점**: Supabase URL과 anon key가 클라이언트에 노출되어야 하며, 정교한 RLS(Row Level Security) 정책이 없으면 비인가된 데이터 접근 시도가 발생할 수 있습니다.
- **성능 저하**: 각 클라이언트가 개별적으로 Supabase와 연결을 맺고 데이터를 가져오므로, 서버사이드 캐싱이나 데이터 집계와 같은 최적화 전략을 적용하기 어렵습니다.
- **유지보수 어려움**: 데이터 접근 로직이 여러 컴포넌트에 분산되어 있어, 공통 로직 변경 시 수정 범위가 넓고 일관성을 유지하기 어렵습니다.

## 3. 목표 (Goals)

- **보안 강화**: 클라이언트의 데이터베이스 직접 접근을 차단하고, 모든 요청이 서버 API를 통하도록 강제하여 데이터 접근 제어를 중앙화합니다.
- **성능 개선**: 서버 사이드에서 데이터를 페칭하고 캐싱 전략을 적용할 수 있는 기반을 마련하여 클라이언트 렌더링 성능을 향상시킵니다.
- **유지보수성 향상**: 데이터 관련 로직을 API 레이어에 집중시켜 코드의 응집도를 높이고 재사용성을 증대시킵니다.

## 4. 요구사항 (Requirements)

### 4.1. 클라이언트 측 Supabase 직접 연결 제거
- 프로젝트 내 모든 파일에서 `@supabase/ssr` 또는 `@supabase/supabase-js`의 클라이언트용 인스턴스 생성 코드 (`createBrowserClient` 등)를 제거합니다.
- 클라이언트 컴포넌트는 내부 API 엔드포인트를 호출하여 데이터를 요청하도록 수정합니다.

### 4.2. 백엔드 API 라우트 구현
- 기존에 클라이언트에서 수행하던 모든 Supabase 데이터 CRUD(Create, Read, Update, Delete) 작업을 대체하는 API 라우트를 `app/api/` 경로 하에 구현합니다.
- 각 API 라우트는 서버 전용 Supabase 클라이언트(`createServerClient`)를 사용하여 데이터베이스와 통신합니다.
- API 요청에 대한 인증 및 인가 로직을 구현하여, 허용된 사용자만 데이터에 접근할 수 있도록 보장합니다.

### 4.3. 인증(Authentication) 흐름 변경
- 로그인, 로그아웃, 사용자 세션 확인 등 모든 인증 관련 로직을 서버 사이드에서 처리하도록 변경합니다.
- 클라이언트는 API 요청 시 쿠키 기반의 세션을 사용하여 인증 상태를 증명합니다.
- 소셜 로그인 콜백 처리 등 인증과 관련된 페이지 및 라우트 핸들러를 서버 중심으로 재구성합니다.

### 4.4. 실시간(Realtime) 기능 재구성
- 현재 Supabase Realtime을 사용하는 기능이 있다면, 해당 기능을 서버가 Realtime 연결을 관리하고 클라이언트에게는 웹소켓이나 SSE(Server-Sent Events)를 통해 데이터를 전달하는 방식으로 변경합니다.
- 또는, 클라이언트의 직접 구독을 유지해야 한다면, 구독에 필요한 토큰을 서버 API를 통해 안전하게 발급받도록 수정합니다.

### 4.5. 환경 변수 정리
- 클라이언트에 노출되던 `NEXT_PUBLIC_SUPABASE_URL`와 `NEXT_PUBLIC_SUPABASE_ANON_KEY` 환경 변수를 제거합니다.
- 모든 Supabase 관련 키는 서버 전용 환경 변수로만 관리합니다.

### 4.6. 테스트 및 검증
- 기존의 모든 기능이 리팩토링 이후에도 동일하게 동작하는지 확인하는 통합 테스트 및 E2E 테스트를 수행합니다.
- 브라우저 개발자 도구의 네트워크 탭에서 `supabase.co` 도메인으로 직접 요청이 발생하지 않음을 검증합니다.

## 5. 범위에서 제외 (Out of Scope)

- UI/UX 디자인 변경
- 데이터베이스 스키마 수정
- 새로운 기능 추가

## 6. 성공 지표 (Success Metrics)

- 애플리케이션의 모든 기능이 이전과 같이 정상적으로 작동한다.
- 클라이언트 측 코드에서 Supabase 클라이언트 초기화 코드가 완전히 제거된다.
- 모든 데이터 요청은 애플리케이션 내부 API를 통해 이루어지며, 브라우저에서 Supabase로의 직접적인 네트워크 요청이 관찰되지 않는다. 